
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initrightASSIGNleftANDrightNOTnonassocLOWEREQUALLOWER_EQUALleftPLUSMINUSleftTIMESDIVrightISNULLUMINUSrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA DIV DO DOT ELSE EQUAL EXTENDS FALSE IF IN INT32 INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SELF SEMICOLON STRING THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE string_literalinit : programprogram : program class\n                    | classclass : field\n                | methodclass : CLASS errorclass : expression\n                | TYPE_IDENTIFIER\n                | blockclass : CLASS new_class_scope class-body\n                | CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-bodynew_class_scope : TYPE_IDENTIFIERclass-body : LBRACE class-body-in RBRACEclass-body : LBRACE class-body-in errorclass-body-in : class-body-in fieldclass-body-in : class-body-in methodclass-body-in : field : OBJECT_IDENTIFIER COLON type SEMICOLON\n                | OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLONmethod : OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type blocknew_variables_scope :type : TYPE_IDENTIFIER\n                | INT32\n                | BOOL\n                | STRING\n                | UNIT formals : formal\n                | formals COMMA formal\n                | formal : OBJECT_IDENTIFIER COLON typeblock : LBRACE new_variables_scope inblock RBRACEinblock : inblock SEMICOLON expression\n                | expression\n                |inblock : inblock error expression : new_variables_scope IF expression THEN expression\n                    | new_variables_scope IF expression THEN expression ELSE expressionexpression : WHILE expression DO expressionexpression : LET let_type IN expression\n                    | LET let_type ASSIGN expression IN expressionlet_type : OBJECT_IDENTIFIER COLON typeexpression : OBJECT_IDENTIFIER ASSIGN get_type expressionget_type :expression : NOT expression\n                    | MINUS expression %prec UMINUS\n                    | ISNULL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIV expression\n                  | expression EQUAL expression\n                  | expression LOWER_EQUAL expression\n                  | expression LOWER expression\n                  | expression POW expression\n                  | expression AND expressionexpression : OBJECT_IDENTIFIER LPAR args RPAR\n                    | expression DOT OBJECT_IDENTIFIER LPAR args RPARexpression : NEW TYPE_IDENTIFIERexpression : OBJECT_IDENTIFIERexpression : SELFexpression : literalexpression : LPAR RPARexpression : LPAR expression RPARexpression : LPAR expression error\n                    | error expression RPARexpression : blockexpression : error\n                    | IF expression THEN expression SEMICOLON errorargs : args COMMA expression\n                | expression\n                |literal : literal_integer\n                | literal_string\n                | boolean-literalliteral_string : string_literalliteral_integer : INTEGER_LITERALboolean-literal : TRUE \n                        | FALSE'
    
_lr_action_items = {'CLASS':([0,2,3,4,5,7,8,9,10,11,21,22,24,25,26,27,28,29,30,31,32,36,37,53,59,60,61,62,64,67,68,69,70,71,72,73,74,75,76,89,90,101,103,107,111,112,115,118,119,120,130,134,135,140,141,143,144,],[6,6,-3,-4,-5,-67,-7,-8,-9,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,-62,-44,-45,-46,-58,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,-18,-42,-56,-38,-39,-31,-11,-13,-14,-36,-57,-19,-68,-40,-37,-20,]),'TYPE_IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,20,21,22,24,25,26,27,28,29,30,31,32,36,37,48,53,59,60,61,62,64,65,67,68,69,70,71,72,73,74,75,76,89,90,95,101,103,107,111,112,115,118,119,120,126,130,134,135,137,140,141,143,144,],[9,9,-3,-4,-5,34,-67,-7,-8,-9,-59,62,-60,-61,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,79,-62,-44,-45,-46,-58,-10,98,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,79,-18,-42,-56,-38,-39,-31,-11,-13,-14,79,-36,-57,-19,79,-68,-40,-37,-20,]),'OBJECT_IDENTIFIER':([0,2,3,4,5,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,49,51,52,53,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,84,85,89,90,91,92,93,94,99,100,101,102,103,107,108,109,111,112,115,116,118,119,120,121,122,128,130,132,134,135,139,140,141,143,144,],[11,11,-3,-4,-5,36,-7,-8,-9,-59,36,36,36,58,36,36,36,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,36,36,36,36,36,36,36,36,36,77,-43,36,36,-62,-44,-45,-46,-58,36,-10,-17,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,36,104,-63,-64,36,36,36,36,123,36,-18,36,-42,-56,36,36,-38,-39,-31,36,-11,-13,-14,-15,-16,104,-36,36,-57,-19,36,-68,-40,-37,-20,]),'WHILE':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[15,15,-3,-4,-5,15,-7,-8,-9,-59,15,15,15,15,15,15,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,15,15,15,15,15,15,15,15,15,-43,15,15,-62,-44,-45,-46,-58,15,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,15,-63,-64,15,15,15,15,15,-18,15,-42,-56,15,15,-38,-39,-31,15,-11,-13,-14,-36,15,-57,-19,15,-68,-40,-37,-20,]),'LET':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[16,16,-3,-4,-5,16,-7,-8,-9,-59,16,16,16,16,16,16,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,16,16,16,16,16,16,16,16,16,-43,16,16,-62,-44,-45,-46,-58,16,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,16,-63,-64,16,16,16,16,16,-18,16,-42,-56,16,16,-38,-39,-31,16,-11,-13,-14,-36,16,-57,-19,16,-68,-40,-37,-20,]),'NOT':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[17,17,-3,-4,-5,17,-7,-8,-9,-59,17,17,17,17,17,17,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,17,17,17,17,17,17,17,17,17,-43,17,17,-62,-44,-45,-46,-58,17,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,17,-63,-64,17,17,17,17,17,-18,17,-42,-56,17,17,-38,-39,-31,17,-11,-13,-14,-36,17,-57,-19,17,-68,-40,-37,-20,]),'MINUS':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,54,55,56,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,87,88,89,90,91,92,93,94,97,100,101,102,103,107,108,109,110,111,112,113,115,116,118,119,120,125,129,130,132,133,134,135,139,140,141,143,144,],[18,18,-3,-4,-5,18,39,-8,-9,-59,18,18,18,18,18,18,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,39,-59,-66,18,18,18,18,18,18,18,18,18,-43,18,18,-62,39,39,39,39,-45,-46,-58,18,-10,-65,-47,-48,-49,-50,39,39,39,-54,39,18,39,39,-63,-64,18,18,18,18,39,18,-18,18,39,-56,18,18,39,39,39,39,-31,18,-11,-13,-14,39,39,39,18,39,-57,-19,18,-68,39,39,-20,]),'ISNULL':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[19,19,-3,-4,-5,19,-7,-8,-9,-59,19,19,19,19,19,19,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,19,19,19,19,19,19,19,19,19,-43,19,19,-62,-44,-45,-46,-58,19,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,19,-63,-64,19,19,19,19,19,-18,19,-42,-56,19,19,-38,-39,-31,19,-11,-13,-14,-36,19,-57,-19,19,-68,-40,-37,-20,]),'NEW':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[20,20,-3,-4,-5,20,-7,-8,-9,-59,20,20,20,20,20,20,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,20,20,20,20,20,20,20,20,20,-43,20,20,-62,-44,-45,-46,-58,20,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,20,-63,-64,20,20,20,20,20,-18,20,-42,-56,20,20,-38,-39,-31,20,-11,-13,-14,-36,20,-57,-19,20,-68,-40,-37,-20,]),'SELF':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[21,21,-3,-4,-5,21,-7,-8,-9,-59,21,21,21,21,21,21,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,21,21,21,21,21,21,21,21,21,-43,21,21,-62,-44,-45,-46,-58,21,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,21,-63,-64,21,21,21,21,21,-18,21,-42,-56,21,21,-38,-39,-31,21,-11,-13,-14,-36,21,-57,-19,21,-68,-40,-37,-20,]),'LPAR':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,77,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,123,130,132,134,135,139,140,141,143,144,],[13,13,-3,-4,-5,13,-7,-8,-9,51,13,13,13,13,13,13,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,51,-66,13,13,13,13,13,13,13,13,13,-43,85,13,13,-62,-44,-45,-46,-58,13,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,100,13,-63,-64,13,13,13,13,13,-18,13,-42,-56,13,13,-38,-39,-31,13,-11,-13,-14,-21,-36,13,-57,-19,13,-68,-40,-37,-20,]),'error':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,54,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,96,97,99,100,101,102,103,107,108,109,111,112,115,116,117,118,119,120,121,122,130,131,132,133,134,135,139,140,141,143,144,],[7,7,-3,-4,-5,32,7,-7,-8,-9,-59,7,7,7,7,7,7,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,7,7,7,7,7,7,7,7,7,-43,7,7,-62,90,-44,-45,-46,-58,7,-10,-17,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,7,-63,-64,7,7,7,7,117,-33,120,7,-18,7,-42,-56,7,7,-38,-39,-31,7,-35,-11,-13,-14,-15,-16,-36,140,7,-32,-57,-19,7,-68,-40,-37,-20,]),'IF':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[14,14,-3,-4,-5,14,-7,-8,-9,-59,52,14,14,14,14,14,14,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,14,14,14,14,14,14,14,14,14,-43,14,14,-62,-44,-45,-46,-58,14,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,14,-63,-64,14,14,14,14,14,-18,14,-42,-56,14,14,-38,-39,-31,14,-11,-13,-14,-36,14,-57,-19,14,-68,-40,-37,-20,]),'LBRACE':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,89,90,91,92,93,94,98,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,142,143,144,],[23,23,-3,-4,-5,23,-7,-8,-9,-59,23,23,23,23,23,23,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,66,-12,-59,-66,23,23,23,23,23,23,23,23,23,-43,23,23,-62,-44,-45,-46,-58,23,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-22,-23,-24,-25,-26,23,-63,-64,23,23,23,23,66,23,-18,23,-42,-56,23,23,-38,-39,-31,23,-11,-13,-14,-36,23,-57,-19,23,-68,-40,23,-37,-20,]),'INTEGER_LITERAL':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[27,27,-3,-4,-5,27,-7,-8,-9,-59,27,27,27,27,27,27,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,27,27,27,27,27,27,27,27,27,-43,27,27,-62,-44,-45,-46,-58,27,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,27,-63,-64,27,27,27,27,27,-18,27,-42,-56,27,27,-38,-39,-31,27,-11,-13,-14,-36,27,-57,-19,27,-68,-40,-37,-20,]),'string_literal':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[28,28,-3,-4,-5,28,-7,-8,-9,-59,28,28,28,28,28,28,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,28,28,28,28,28,28,28,28,28,-43,28,28,-62,-44,-45,-46,-58,28,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,28,-63,-64,28,28,28,28,28,-18,28,-42,-56,28,28,-38,-39,-31,28,-11,-13,-14,-36,28,-57,-19,28,-68,-40,-37,-20,]),'TRUE':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[29,29,-3,-4,-5,29,-7,-8,-9,-59,29,29,29,29,29,29,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,29,29,29,29,29,29,29,29,29,-43,29,29,-62,-44,-45,-46,-58,29,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,29,-63,-64,29,29,29,29,29,-18,29,-42,-56,29,29,-38,-39,-31,29,-11,-13,-14,-36,29,-57,-19,29,-68,-40,-37,-20,]),'FALSE':([0,2,3,4,5,7,8,9,10,11,13,14,15,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,59,60,61,62,63,64,67,68,69,70,71,72,73,74,75,76,84,89,90,91,92,93,94,100,101,102,103,107,108,109,111,112,115,116,118,119,120,130,132,134,135,139,140,141,143,144,],[30,30,-3,-4,-5,30,-7,-8,-9,-59,30,30,30,30,30,30,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,30,30,30,30,30,30,30,30,30,-43,30,30,-62,-44,-45,-46,-58,30,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,30,-63,-64,30,30,30,30,30,-18,30,-42,-56,30,30,-38,-39,-31,30,-11,-13,-14,-36,30,-57,-19,30,-68,-40,-37,-20,]),'$end':([1,2,3,4,5,7,8,9,10,11,21,22,24,25,26,27,28,29,30,31,32,36,37,53,59,60,61,62,64,67,68,69,70,71,72,73,74,75,76,89,90,101,103,107,111,112,115,118,119,120,130,134,135,140,141,143,144,],[0,-1,-3,-4,-5,-67,-7,-8,-9,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,-2,-6,-59,-66,-62,-44,-45,-46,-58,-10,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,-18,-42,-56,-38,-39,-31,-11,-13,-14,-36,-57,-19,-68,-40,-37,-20,]),'PLUS':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,38,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,38,-59,-66,-62,38,38,38,38,-45,-46,-58,-65,-47,-48,-49,-50,38,38,38,-54,38,38,38,-63,-64,38,38,-56,38,38,38,38,-31,38,38,38,38,-57,-68,38,38,]),'TIMES':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,40,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,40,-59,-66,-62,40,40,40,40,-45,-46,-58,-65,40,40,-49,-50,40,40,40,-54,40,40,40,-63,-64,40,40,-56,40,40,40,40,-31,40,40,40,40,-57,-68,40,40,]),'DIV':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,41,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,41,-59,-66,-62,41,41,41,41,-45,-46,-58,-65,41,41,-49,-50,41,41,41,-54,41,41,41,-63,-64,41,41,-56,41,41,41,41,-31,41,41,41,41,-57,-68,41,41,]),'EQUAL':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,42,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,42,-59,-66,-62,42,42,42,42,-45,-46,-58,-65,-47,-48,-49,-50,None,None,None,-54,42,42,42,-63,-64,42,42,-56,42,42,42,42,-31,42,42,42,42,-57,-68,42,42,]),'LOWER_EQUAL':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,43,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,43,-59,-66,-62,43,43,43,43,-45,-46,-58,-65,-47,-48,-49,-50,None,None,None,-54,43,43,43,-63,-64,43,43,-56,43,43,43,43,-31,43,43,43,43,-57,-68,43,43,]),'LOWER':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,44,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,44,-59,-66,-62,44,44,44,44,-45,-46,-58,-65,-47,-48,-49,-50,None,None,None,-54,44,44,44,-63,-64,44,44,-56,44,44,44,44,-31,44,44,44,44,-57,-68,44,44,]),'POW':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,45,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,45,-59,-66,-62,45,45,45,45,45,45,-58,-65,45,45,45,45,45,45,45,45,45,45,45,-63,-64,45,45,-56,45,45,45,45,-31,45,45,45,45,-57,-68,45,45,]),'AND':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,46,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,46,-59,-66,-62,46,46,46,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,46,46,-63,-64,46,46,-56,46,46,46,46,-31,46,46,46,46,-57,-68,46,46,]),'DOT':([7,8,10,11,21,22,24,25,26,27,28,29,30,35,36,37,53,54,55,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,87,88,89,90,97,103,107,110,111,112,113,115,125,129,130,133,134,140,141,143,],[-67,47,-66,-59,-60,-61,-72,-73,-74,-76,-75,-77,-78,47,-59,-66,-62,47,47,47,47,47,47,-58,-65,47,47,47,47,47,47,47,47,47,47,47,-63,-64,47,47,-56,47,47,47,47,-31,47,47,47,47,-57,-68,47,47,]),'RPAR':([7,13,21,22,24,25,26,27,28,29,30,35,36,37,51,53,54,59,60,61,62,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,85,86,87,89,90,100,103,105,106,107,111,112,115,124,129,130,134,136,138,140,141,143,],[-67,53,-60,-61,-72,-73,-74,-76,-75,-77,-78,67,-59,-66,-71,-62,89,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-22,-23,-24,-25,-26,-29,107,-70,-63,-64,-71,-42,127,-27,-56,-38,-39,-31,134,-69,-36,-57,-30,-28,-68,-40,-37,]),'THEN':([7,21,22,24,25,26,27,28,29,30,36,37,53,55,59,60,61,62,67,68,69,70,71,72,73,74,75,76,88,89,90,103,107,111,112,115,130,134,140,141,143,],[-67,-60,-61,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,91,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,109,-63,-64,-42,-56,-38,-39,-31,-36,-57,-68,-40,-37,]),'DO':([7,21,22,24,25,26,27,28,29,30,36,37,53,56,59,60,61,62,67,68,69,70,71,72,73,74,75,76,89,90,103,107,111,112,115,130,134,140,141,143,],[-67,-60,-61,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,92,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,-42,-56,-38,-39,-31,-36,-57,-68,-40,-37,]),'COMMA':([7,21,22,24,25,26,27,28,29,30,36,37,51,53,59,60,61,62,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,85,86,87,89,90,100,103,105,106,107,111,112,115,124,129,130,134,136,138,140,141,143,],[-67,-60,-61,-72,-73,-74,-76,-75,-77,-78,-59,-66,-71,-62,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-22,-23,-24,-25,-26,-29,108,-70,-63,-64,-71,-42,128,-27,-56,-38,-39,-31,108,-69,-36,-57,-30,-28,-68,-40,-37,]),'RBRACE':([7,21,22,23,24,25,26,27,28,29,30,36,37,53,59,60,61,62,63,66,67,68,69,70,71,72,73,74,75,76,89,90,96,97,99,101,103,107,111,112,115,117,121,122,130,133,134,135,140,141,143,144,],[-67,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,-44,-45,-46,-58,-34,-17,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,115,-33,119,-18,-42,-56,-38,-39,-31,-35,-15,-16,-36,-32,-57,-19,-68,-40,-37,-20,]),'SEMICOLON':([7,21,22,23,24,25,26,27,28,29,30,36,37,53,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,89,90,96,97,103,107,110,111,112,115,117,125,130,133,134,140,141,143,],[-67,-60,-61,-21,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,-44,-45,-46,-58,-34,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,101,-22,-23,-24,-25,-26,-63,-64,116,-33,-42,-56,131,-38,-39,-31,-35,135,-36,-32,-57,-68,-40,-37,]),'IN':([7,21,22,24,25,26,27,28,29,30,36,37,53,57,59,60,61,62,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,89,90,103,107,111,112,113,114,115,130,134,140,141,143,],[-67,-60,-61,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,93,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-22,-23,-24,-25,-26,-63,-64,-42,-56,-38,-39,132,-41,-31,-36,-57,-68,-40,-37,]),'ELSE':([7,21,22,24,25,26,27,28,29,30,36,37,53,59,60,61,62,67,68,69,70,71,72,73,74,75,76,89,90,103,107,111,112,115,130,134,140,141,143,],[-67,-60,-61,-72,-73,-74,-76,-75,-77,-78,-59,-66,-62,-44,-45,-46,-58,-65,-47,-48,-49,-50,-51,-52,-53,-54,-55,-63,-64,-42,-56,-38,-39,-31,139,-57,-68,-40,-37,]),'COLON':([11,58,104,123,127,],[48,95,126,48,137,]),'ASSIGN':([11,36,57,78,79,80,81,82,83,114,],[49,49,94,102,-22,-23,-24,-25,-26,-41,]),'EXTENDS':([33,34,],[65,-12,]),'INT32':([48,95,126,137,],[80,80,80,80,]),'BOOL':([48,95,126,137,],[81,81,81,81,]),'STRING':([48,95,126,137,],[82,82,82,82,]),'UNIT':([48,95,126,137,],[83,83,83,83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'program':([0,],[2,]),'class':([0,2,],[3,31,]),'field':([0,2,99,],[4,4,121,]),'method':([0,2,99,],[5,5,122,]),'expression':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,],[8,8,35,54,55,56,59,60,61,68,69,70,71,72,73,74,75,76,87,88,97,103,110,111,112,113,87,125,129,130,133,141,143,]),'block':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,142,],[10,10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,144,]),'new_variables_scope':([0,2,7,11,13,14,15,17,18,19,23,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,123,132,139,],[12,12,12,50,12,12,12,12,12,12,63,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,50,12,12,]),'literal':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'literal_integer':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'literal_string':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'boolean-literal':([0,2,7,13,14,15,17,18,19,38,39,40,41,42,43,44,45,46,51,52,63,84,91,92,93,94,100,102,108,109,116,132,139,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'new_class_scope':([6,],[33,]),'let_type':([16,],[57,]),'class-body':([33,98,],[64,118,]),'type':([48,95,126,137,],[78,114,136,142,]),'get_type':([49,],[84,]),'args':([51,100,],[86,124,]),'inblock':([63,],[96,]),'class-body-in':([66,],[99,]),'formals':([85,],[105,]),'formal':([85,128,],[106,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> program','init',1,'p_init','semanticsFile.py',99),
  ('program -> program class','program',2,'p_program','semanticsFile.py',103),
  ('program -> class','program',1,'p_program','semanticsFile.py',104),
  ('class -> field','class',1,'p_field_method_error','semanticsFile.py',111),
  ('class -> method','class',1,'p_field_method_error','semanticsFile.py',112),
  ('class -> CLASS error','class',2,'p_class_error','semanticsFile.py',118),
  ('class -> expression','class',1,'p_general_class_error','semanticsFile.py',123),
  ('class -> TYPE_IDENTIFIER','class',1,'p_general_class_error','semanticsFile.py',124),
  ('class -> block','class',1,'p_general_class_error','semanticsFile.py',125),
  ('class -> CLASS new_class_scope class-body','class',3,'p_class','semanticsFile.py',131),
  ('class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body','class',5,'p_class','semanticsFile.py',132),
  ('new_class_scope -> TYPE_IDENTIFIER','new_class_scope',1,'p_new_class_scope','semanticsFile.py',144),
  ('class-body -> LBRACE class-body-in RBRACE','class-body',3,'p_class_body','semanticsFile.py',152),
  ('class-body -> LBRACE class-body-in error','class-body',3,'p_class_braces_error','semanticsFile.py',156),
  ('class-body-in -> class-body-in field','class-body-in',2,'p_class_body_field','semanticsFile.py',161),
  ('class-body-in -> class-body-in method','class-body-in',2,'p_class_body_method','semanticsFile.py',166),
  ('class-body-in -> <empty>','class-body-in',0,'p_class_body_empty','semanticsFile.py',171),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','semanticsFile.py',175),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON','field',6,'p_field','semanticsFile.py',176),
  ('method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block','method',8,'p_method','semanticsFile.py',185),
  ('new_variables_scope -> <empty>','new_variables_scope',0,'p_new_variables_scope','semanticsFile.py',190),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','semanticsFile.py',196),
  ('type -> INT32','type',1,'p_type','semanticsFile.py',197),
  ('type -> BOOL','type',1,'p_type','semanticsFile.py',198),
  ('type -> STRING','type',1,'p_type','semanticsFile.py',199),
  ('type -> UNIT','type',1,'p_type','semanticsFile.py',200),
  ('formals -> formal','formals',1,'p_formals','semanticsFile.py',204),
  ('formals -> formals COMMA formal','formals',3,'p_formals','semanticsFile.py',205),
  ('formals -> <empty>','formals',0,'p_formals','semanticsFile.py',206),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','semanticsFile.py',215),
  ('block -> LBRACE new_variables_scope inblock RBRACE','block',4,'p_block','semanticsFile.py',220),
  ('inblock -> inblock SEMICOLON expression','inblock',3,'p_block_inside','semanticsFile.py',226),
  ('inblock -> expression','inblock',1,'p_block_inside','semanticsFile.py',227),
  ('inblock -> <empty>','inblock',0,'p_block_inside','semanticsFile.py',228),
  ('inblock -> inblock error','inblock',2,'p_block_error','semanticsFile.py',237),
  ('expression -> new_variables_scope IF expression THEN expression','expression',5,'p_if','semanticsFile.py',242),
  ('expression -> new_variables_scope IF expression THEN expression ELSE expression','expression',7,'p_if','semanticsFile.py',243),
  ('expression -> WHILE expression DO expression','expression',4,'p_while','semanticsFile.py',250),
  ('expression -> LET let_type IN expression','expression',4,'p_let','semanticsFile.py',254),
  ('expression -> LET let_type ASSIGN expression IN expression','expression',6,'p_let','semanticsFile.py',255),
  ('let_type -> OBJECT_IDENTIFIER COLON type','let_type',3,'p_let_type','semanticsFile.py',262),
  ('expression -> OBJECT_IDENTIFIER ASSIGN get_type expression','expression',4,'p_assign','semanticsFile.py',268),
  ('get_type -> <empty>','get_type',0,'p_get_type','semanticsFile.py',273),
  ('expression -> NOT expression','expression',2,'p_unary_operators','semanticsFile.py',277),
  ('expression -> MINUS expression','expression',2,'p_unary_operators','semanticsFile.py',278),
  ('expression -> ISNULL expression','expression',2,'p_unary_operators','semanticsFile.py',279),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operators','semanticsFile.py',283),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operators','semanticsFile.py',284),
  ('expression -> expression TIMES expression','expression',3,'p_binary_operators','semanticsFile.py',285),
  ('expression -> expression DIV expression','expression',3,'p_binary_operators','semanticsFile.py',286),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_operators','semanticsFile.py',287),
  ('expression -> expression LOWER_EQUAL expression','expression',3,'p_binary_operators','semanticsFile.py',288),
  ('expression -> expression LOWER expression','expression',3,'p_binary_operators','semanticsFile.py',289),
  ('expression -> expression POW expression','expression',3,'p_binary_operators','semanticsFile.py',290),
  ('expression -> expression AND expression','expression',3,'p_binary_operators','semanticsFile.py',291),
  ('expression -> OBJECT_IDENTIFIER LPAR args RPAR','expression',4,'p_object_call','semanticsFile.py',296),
  ('expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR','expression',6,'p_object_call','semanticsFile.py',297),
  ('expression -> NEW TYPE_IDENTIFIER','expression',2,'p_new_type','semanticsFile.py',304),
  ('expression -> OBJECT_IDENTIFIER','expression',1,'p_expression_object','semanticsFile.py',308),
  ('expression -> SELF','expression',1,'p_expression_self','semanticsFile.py',319),
  ('expression -> literal','expression',1,'p_expression_literal','semanticsFile.py',323),
  ('expression -> LPAR RPAR','expression',2,'p_par_alone','semanticsFile.py',327),
  ('expression -> LPAR expression RPAR','expression',3,'p_par_expression','semanticsFile.py',331),
  ('expression -> LPAR expression error','expression',3,'p_par_error','semanticsFile.py',335),
  ('expression -> error expression RPAR','expression',3,'p_par_error','semanticsFile.py',336),
  ('expression -> block','expression',1,'p_expression_block','semanticsFile.py',341),
  ('expression -> error','expression',1,'p_expression_error','semanticsFile.py',345),
  ('expression -> IF expression THEN expression SEMICOLON error','expression',6,'p_expression_error','semanticsFile.py',346),
  ('args -> args COMMA expression','args',3,'p_args','semanticsFile.py',354),
  ('args -> expression','args',1,'p_args','semanticsFile.py',355),
  ('args -> <empty>','args',0,'p_args','semanticsFile.py',356),
  ('literal -> literal_integer','literal',1,'p_literal','semanticsFile.py',365),
  ('literal -> literal_string','literal',1,'p_literal','semanticsFile.py',366),
  ('literal -> boolean-literal','literal',1,'p_literal','semanticsFile.py',367),
  ('literal_string -> string_literal','literal_string',1,'p_literal_string','semanticsFile.py',371),
  ('literal_integer -> INTEGER_LITERAL','literal_integer',1,'p_literal_integer','semanticsFile.py',377),
  ('boolean-literal -> TRUE','boolean-literal',1,'p_boolean_literal','semanticsFile.py',383),
  ('boolean-literal -> FALSE','boolean-literal',1,'p_boolean_literal','semanticsFile.py',384),
]
