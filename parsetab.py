
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightASSIGNleftANDrightNOTnonassocLOWEREQUALLOWER_EQUALleftPLUSMINUSleftTIMESDIVrightISNULLUMINUSrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA COMMENTS DIV DO DOT ELSE EQUAL EXTENDS FALSE IF IN INT32 INTEGER_ERROR INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR Lexicalerror MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SELF SEMICOLON SPACES STRING THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE string_literalprogram : class program\n                    | classclass : CLASS TYPE_IDENTIFIER class-body\n                | CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-bodyclass-body : LBRACE class-body-in RBRACEclass-body-in : field class-body-inclass-body-in : method class-body-inclass-body-in : field : OBJECT_IDENTIFIER COLON type SEMICOLON\n                | OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLONmethod : OBJECT_IDENTIFIER LPAR formals RPAR COLON type blocktype : TYPE_IDENTIFIER\n                | INT32\n                | BOOL\n                | STRING\n                | UNIT formals : formal\n                | formal COMMA formals\n                | formal : OBJECT_IDENTIFIER COLON typeblock : LBRACE inblock RBRACEinblock : inblock SEMICOLON expression\n                | expressionexpression : IF expression THEN expression\n                    | IF expression THEN expression ELSE expressionexpression : WHILE expression DO expressionexpression : LET OBJECT_IDENTIFIER COLON type IN expression\n                    | LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expressionexpression : OBJECT_IDENTIFIER ASSIGN expressionexpression : NOT expression\n                    | MINUS expression %prec UMINUS\n                    | ISNULL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIV expression\n                  | expression EQUAL expression\n                  | expression LOWER_EQUAL expression\n                  | expression LOWER expression\n                  | expression POW expression\n                  | expression AND expressionexpression : OBJECT_IDENTIFIER LPAR args RPAR\n                    | expression DOT OBJECT_IDENTIFIER LPAR args RPARexpression : NEW TYPE_IDENTIFIERexpression : OBJECT_IDENTIFIERexpression : SELFexpression : literalexpression : LPAR RPARexpression : LPAR expression RPARexpression : blockargs : expression COMMA args\n                | expression\n                |literal : INTEGER_LITERAL\n                | string_literal\n                | boolean-literalboolean-literal : TRUE \n                        | FALSE'
    
_lr_action_items = {'CLASS':([0,2,6,14,15,],[3,3,-3,-4,-5,]),'$end':([1,2,4,6,14,15,],[0,-2,-1,-3,-4,-5,]),'TYPE_IDENTIFIER':([3,7,18,31,43,54,96,],[5,9,21,21,77,21,21,]),'EXTENDS':([5,],[7,]),'LBRACE':([5,9,21,22,23,24,25,30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,80,94,95,99,102,103,110,111,112,117,],[8,8,-12,-13,-14,-15,-16,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'RBRACE':([8,10,11,12,16,17,29,34,44,45,46,47,48,49,51,52,58,72,73,74,75,77,78,79,81,84,85,86,87,88,89,90,91,92,97,98,100,101,104,105,107,113,114,115,118,],[-8,15,-8,-8,-6,-7,-9,-45,-46,-47,-50,-54,-55,-56,-57,-58,-10,-30,-31,-32,-48,-44,98,-23,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-11,-42,-24,-26,-22,-43,-25,-27,-28,]),'OBJECT_IDENTIFIER':([8,11,12,19,29,30,33,36,37,38,39,40,41,42,50,56,57,58,59,60,61,62,63,64,65,66,67,68,94,95,98,99,100,102,103,110,111,112,117,],[13,13,13,26,-9,34,26,34,34,71,34,34,34,34,34,34,34,-10,34,34,34,34,34,34,34,34,34,93,34,34,-21,34,-11,34,34,34,34,34,34,]),'COLON':([13,26,32,71,],[18,31,54,96,]),'LPAR':([13,30,34,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,93,94,95,99,102,103,110,111,112,117,],[19,42,57,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,103,42,42,42,42,42,42,42,42,42,]),'INT32':([18,31,54,96,],[22,22,22,22,]),'BOOL':([18,31,54,96,],[23,23,23,23,]),'STRING':([18,31,54,96,],[24,24,24,24,]),'UNIT':([18,31,54,96,],[25,25,25,25,]),'RPAR':([19,21,22,23,24,25,27,28,33,34,42,44,45,46,47,48,49,51,52,53,55,57,72,73,74,75,76,77,81,82,83,84,85,86,87,88,89,90,91,92,97,98,101,102,103,104,105,108,109,113,114,115,118,],[-19,-12,-13,-14,-15,-16,32,-17,-19,-45,75,-46,-47,-50,-54,-55,-56,-57,-58,-20,-18,-53,-30,-31,-32,-48,97,-44,-29,101,-52,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-53,-53,-24,-26,-51,113,-43,-25,-27,-28,]),'SEMICOLON':([20,21,22,23,24,25,34,35,44,45,46,47,48,49,51,52,72,73,74,75,77,78,79,81,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,118,],[29,-12,-13,-14,-15,-16,-45,58,-46,-47,-50,-54,-55,-56,-57,-58,-30,-31,-32,-48,-44,99,-23,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-24,-26,-22,-43,-25,-27,-28,]),'ASSIGN':([20,21,22,23,24,25,34,106,],[30,-12,-13,-14,-15,-16,56,112,]),'COMMA':([21,22,23,24,25,28,34,44,45,46,47,48,49,51,52,53,72,73,74,75,77,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,113,114,115,118,],[-12,-13,-14,-15,-16,33,-45,-46,-47,-50,-54,-55,-56,-57,-58,-20,-30,-31,-32,-48,-44,-29,102,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-24,-26,-43,-25,-27,-28,]),'IN':([21,22,23,24,25,34,44,45,46,47,48,49,51,52,72,73,74,75,77,81,84,85,86,87,88,89,90,91,92,97,98,101,104,105,106,113,114,115,116,118,],[-12,-13,-14,-15,-16,-45,-46,-47,-50,-54,-55,-56,-57,-58,-30,-31,-32,-48,-44,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-24,-26,111,-43,-25,-27,117,-28,]),'IF':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'WHILE':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'LET':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'NOT':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'MINUS':([30,34,35,36,37,39,40,41,42,44,45,46,47,48,49,50,51,52,56,57,59,60,61,62,63,64,65,66,67,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,102,103,104,105,107,110,111,112,113,114,115,116,117,118,],[40,-45,60,40,40,40,40,40,40,-46,-47,-50,-54,-55,-56,40,-57,-58,40,40,40,40,40,40,40,40,40,40,40,60,60,60,-31,-32,-48,60,-44,60,60,60,-33,-34,-35,-36,60,60,60,-40,60,40,40,-49,-21,40,-42,40,40,60,60,60,40,40,40,-43,60,60,60,40,60,]),'ISNULL':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'NEW':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'SELF':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'INTEGER_LITERAL':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'string_literal':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FALSE':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'PLUS':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,59,-46,-47,-50,-54,-55,-56,-57,-58,59,59,59,-31,-32,-48,59,-44,59,59,59,-33,-34,-35,-36,59,59,59,-40,59,-49,-21,-42,59,59,59,-43,59,59,59,59,]),'TIMES':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,61,-46,-47,-50,-54,-55,-56,-57,-58,61,61,61,-31,-32,-48,61,-44,61,61,61,61,61,-35,-36,61,61,61,-40,61,-49,-21,-42,61,61,61,-43,61,61,61,61,]),'DIV':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,62,-46,-47,-50,-54,-55,-56,-57,-58,62,62,62,-31,-32,-48,62,-44,62,62,62,62,62,-35,-36,62,62,62,-40,62,-49,-21,-42,62,62,62,-43,62,62,62,62,]),'EQUAL':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,63,-46,-47,-50,-54,-55,-56,-57,-58,63,63,63,-31,-32,-48,63,-44,63,63,63,-33,-34,-35,-36,None,None,None,-40,63,-49,-21,-42,63,63,63,-43,63,63,63,63,]),'LOWER_EQUAL':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,64,-46,-47,-50,-54,-55,-56,-57,-58,64,64,64,-31,-32,-48,64,-44,64,64,64,-33,-34,-35,-36,None,None,None,-40,64,-49,-21,-42,64,64,64,-43,64,64,64,64,]),'LOWER':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,65,-46,-47,-50,-54,-55,-56,-57,-58,65,65,65,-31,-32,-48,65,-44,65,65,65,-33,-34,-35,-36,None,None,None,-40,65,-49,-21,-42,65,65,65,-43,65,65,65,65,]),'POW':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,66,-46,-47,-50,-54,-55,-56,-57,-58,66,66,66,66,66,-48,66,-44,66,66,66,66,66,66,66,66,66,66,66,66,-49,-21,-42,66,66,66,-43,66,66,66,66,]),'AND':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,67,-46,-47,-50,-54,-55,-56,-57,-58,67,67,-30,-31,-32,-48,67,-44,67,67,67,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,67,67,67,-43,67,67,67,67,]),'DOT':([34,35,44,45,46,47,48,49,51,52,69,70,72,73,74,75,76,77,79,81,83,84,85,86,87,88,89,90,91,92,97,98,101,104,105,107,113,114,115,116,118,],[-45,68,-46,-47,-50,-54,-55,-56,-57,-58,68,68,68,68,68,-48,68,-44,68,68,68,68,68,68,68,68,68,68,68,68,-49,-21,-42,68,68,68,-43,68,68,68,68,]),'THEN':([34,44,45,46,47,48,49,51,52,69,72,73,74,75,77,81,84,85,86,87,88,89,90,91,92,97,98,101,104,105,113,114,115,118,],[-45,-46,-47,-50,-54,-55,-56,-57,-58,94,-30,-31,-32,-48,-44,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-24,-26,-43,-25,-27,-28,]),'DO':([34,44,45,46,47,48,49,51,52,70,72,73,74,75,77,81,84,85,86,87,88,89,90,91,92,97,98,101,104,105,113,114,115,118,],[-45,-46,-47,-50,-54,-55,-56,-57,-58,95,-30,-31,-32,-48,-44,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,-24,-26,-43,-25,-27,-28,]),'ELSE':([34,44,45,46,47,48,49,51,52,72,73,74,75,77,81,84,85,86,87,88,89,90,91,92,97,98,101,104,105,113,114,115,118,],[-45,-46,-47,-50,-54,-55,-56,-57,-58,-30,-31,-32,-48,-44,-29,-33,-34,-35,-36,-37,-38,-39,-40,-41,-49,-21,-42,110,-26,-43,-25,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,4,]),'class':([0,2,],[2,2,]),'class-body':([5,9,],[6,14,]),'class-body-in':([8,11,12,],[10,16,17,]),'field':([8,11,12,],[11,11,11,]),'method':([8,11,12,],[12,12,12,]),'type':([18,31,54,96,],[20,53,80,106,]),'formals':([19,33,],[27,55,]),'formal':([19,33,],[28,28,]),'expression':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[35,69,70,72,73,74,76,79,81,83,84,85,86,87,88,89,90,91,92,104,105,107,83,83,114,115,116,118,]),'literal':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'block':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,80,94,95,99,102,103,110,111,112,117,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,100,46,46,46,46,46,46,46,46,46,]),'boolean-literal':([30,36,37,39,40,41,42,50,56,57,59,60,61,62,63,64,65,66,67,94,95,99,102,103,110,111,112,117,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'inblock':([50,],[78,]),'args':([57,102,103,],[82,108,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class program','program',2,'p_program','parserFile.py',41),
  ('program -> class','program',1,'p_program','parserFile.py',42),
  ('class -> CLASS TYPE_IDENTIFIER class-body','class',3,'p_class','parserFile.py',49),
  ('class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body','class',5,'p_class','parserFile.py',50),
  ('class-body -> LBRACE class-body-in RBRACE','class-body',3,'p_class_body','parserFile.py',60),
  ('class-body-in -> field class-body-in','class-body-in',2,'p_class_body_field','parserFile.py',64),
  ('class-body-in -> method class-body-in','class-body-in',2,'p_class_body_method','parserFile.py',69),
  ('class-body-in -> <empty>','class-body-in',0,'p_class_body_empty','parserFile.py',74),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','parserFile.py',78),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON','field',6,'p_field','parserFile.py',79),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block','method',7,'p_method','parserFile.py',87),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','parserFile.py',91),
  ('type -> INT32','type',1,'p_type','parserFile.py',92),
  ('type -> BOOL','type',1,'p_type','parserFile.py',93),
  ('type -> STRING','type',1,'p_type','parserFile.py',94),
  ('type -> UNIT','type',1,'p_type','parserFile.py',95),
  ('formals -> formal','formals',1,'p_formals','parserFile.py',99),
  ('formals -> formal COMMA formals','formals',3,'p_formals','parserFile.py',100),
  ('formals -> <empty>','formals',0,'p_formals','parserFile.py',101),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','parserFile.py',110),
  ('block -> LBRACE inblock RBRACE','block',3,'p_block','parserFile.py',114),
  ('inblock -> inblock SEMICOLON expression','inblock',3,'p_block_inside','parserFile.py',119),
  ('inblock -> expression','inblock',1,'p_block_inside','parserFile.py',120),
  ('expression -> IF expression THEN expression','expression',4,'p_if','parserFile.py',127),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_if','parserFile.py',128),
  ('expression -> WHILE expression DO expression','expression',4,'p_while','parserFile.py',135),
  ('expression -> LET OBJECT_IDENTIFIER COLON type IN expression','expression',6,'p_let','parserFile.py',139),
  ('expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression','expression',8,'p_let','parserFile.py',140),
  ('expression -> OBJECT_IDENTIFIER ASSIGN expression','expression',3,'p_assign','parserFile.py',147),
  ('expression -> NOT expression','expression',2,'p_unary_operators','parserFile.py',151),
  ('expression -> MINUS expression','expression',2,'p_unary_operators','parserFile.py',152),
  ('expression -> ISNULL expression','expression',2,'p_unary_operators','parserFile.py',153),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operators','parserFile.py',157),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operators','parserFile.py',158),
  ('expression -> expression TIMES expression','expression',3,'p_binary_operators','parserFile.py',159),
  ('expression -> expression DIV expression','expression',3,'p_binary_operators','parserFile.py',160),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_operators','parserFile.py',161),
  ('expression -> expression LOWER_EQUAL expression','expression',3,'p_binary_operators','parserFile.py',162),
  ('expression -> expression LOWER expression','expression',3,'p_binary_operators','parserFile.py',163),
  ('expression -> expression POW expression','expression',3,'p_binary_operators','parserFile.py',164),
  ('expression -> expression AND expression','expression',3,'p_binary_operators','parserFile.py',165),
  ('expression -> OBJECT_IDENTIFIER LPAR args RPAR','expression',4,'p_object_call','parserFile.py',170),
  ('expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR','expression',6,'p_object_call','parserFile.py',171),
  ('expression -> NEW TYPE_IDENTIFIER','expression',2,'p_new_type','parserFile.py',178),
  ('expression -> OBJECT_IDENTIFIER','expression',1,'p_expression_object','parserFile.py',182),
  ('expression -> SELF','expression',1,'p_expression_self','parserFile.py',186),
  ('expression -> literal','expression',1,'p_expression_literal','parserFile.py',190),
  ('expression -> LPAR RPAR','expression',2,'p_par_alone','parserFile.py',194),
  ('expression -> LPAR expression RPAR','expression',3,'p_par_expression','parserFile.py',198),
  ('expression -> block','expression',1,'p_expression_block','parserFile.py',202),
  ('args -> expression COMMA args','args',3,'p_args','parserFile.py',206),
  ('args -> expression','args',1,'p_args','parserFile.py',207),
  ('args -> <empty>','args',0,'p_args','parserFile.py',208),
  ('literal -> INTEGER_LITERAL','literal',1,'p_literal','parserFile.py',217),
  ('literal -> string_literal','literal',1,'p_literal','parserFile.py',218),
  ('literal -> boolean-literal','literal',1,'p_literal','parserFile.py',219),
  ('boolean-literal -> TRUE','boolean-literal',1,'p_boolean_literal','parserFile.py',223),
  ('boolean-literal -> FALSE','boolean-literal',1,'p_boolean_literal','parserFile.py',224),
]
