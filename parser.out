Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTS
    INTEGER_ERROR
    Lexicalerror
    SPACES

Grammar

Rule 0     S' -> program
Rule 1     program -> class program
Rule 2     program -> class
Rule 3     class -> CLASS TYPE_IDENTIFIER class-body
Rule 4     class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body
Rule 5     class-body -> LBRACE class-body-in RBRACE
Rule 6     class-body-in -> field class-body-in
Rule 7     class-body-in -> method class-body-in
Rule 8     class-body-in -> <empty>
Rule 9     field -> OBJECT_IDENTIFIER COLON type SEMICOLON
Rule 10    field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
Rule 11    method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block
Rule 12    type -> TYPE_IDENTIFIER
Rule 13    type -> INT32
Rule 14    type -> BOOL
Rule 15    type -> STRING
Rule 16    type -> UNIT
Rule 17    formals -> formal
Rule 18    formals -> formal COMMA formals
Rule 19    formals -> <empty>
Rule 20    formal -> OBJECT_IDENTIFIER COLON type
Rule 21    block -> LBRACE inblock RBRACE
Rule 22    inblock -> inblock SEMICOLON expression
Rule 23    inblock -> expression
Rule 24    expression -> IF expression THEN expression
Rule 25    expression -> IF expression THEN expression ELSE expression
Rule 26    expression -> WHILE expression DO expression
Rule 27    expression -> LET OBJECT_IDENTIFIER COLON type IN expression
Rule 28    expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
Rule 29    expression -> OBJECT_IDENTIFIER ASSIGN expression
Rule 30    expression -> NOT expression
Rule 31    expression -> MINUS expression
Rule 32    expression -> ISNULL expression
Rule 33    expression -> expression PLUS expression
Rule 34    expression -> expression MINUS expression
Rule 35    expression -> expression TIMES expression
Rule 36    expression -> expression DIV expression
Rule 37    expression -> expression EQUAL expression
Rule 38    expression -> expression LOWER_EQUAL expression
Rule 39    expression -> expression LOWER expression
Rule 40    expression -> expression POW expression
Rule 41    expression -> expression AND expression
Rule 42    expression -> OBJECT_IDENTIFIER LPAR args RPAR
Rule 43    expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR
Rule 44    expression -> NEW TYPE_IDENTIFIER
Rule 45    expression -> OBJECT_IDENTIFIER
Rule 46    expression -> SELF
Rule 47    expression -> literal
Rule 48    expression -> LPAR RPAR
Rule 49    expression -> LPAR expression RPAR
Rule 50    expression -> block
Rule 51    args -> expression COMMA args
Rule 52    args -> expression
Rule 53    args -> <empty>
Rule 54    literal -> INTEGER_LITERAL
Rule 55    literal -> string_literal
Rule 56    literal -> boolean-literal
Rule 57    boolean-literal -> TRUE
Rule 58    boolean-literal -> FALSE

Terminals, with rules where they appear

AND                  : 41
ASSIGN               : 10 28 29
BOOL                 : 14
CLASS                : 3 4
COLON                : 9 10 11 20 27 28
COMMA                : 18 51
COMMENTS             : 
DIV                  : 36
DO                   : 26
DOT                  : 43
ELSE                 : 25
EQUAL                : 37
EXTENDS              : 4
FALSE                : 58
IF                   : 24 25
IN                   : 27 28
INT32                : 13
INTEGER_ERROR        : 
INTEGER_LITERAL      : 54
ISNULL               : 32
LBRACE               : 5 21
LET                  : 27 28
LOWER                : 39
LOWER_EQUAL          : 38
LPAR                 : 11 42 43 48 49
Lexicalerror         : 
MINUS                : 31 34
NEW                  : 44
NOT                  : 30
OBJECT_IDENTIFIER    : 9 10 11 20 27 28 29 42 43 45
PLUS                 : 33
POW                  : 40
RBRACE               : 5 21
RPAR                 : 11 42 43 48 49
SELF                 : 46
SEMICOLON            : 9 10 22
SPACES               : 
STRING               : 15
THEN                 : 24 25
TIMES                : 35
TRUE                 : 57
TYPE_IDENTIFIER      : 3 4 4 12 44
UNIT                 : 16
WHILE                : 26
error                : 
string_literal       : 55

Nonterminals, with rules where they appear

args                 : 42 43 51
block                : 11 50
boolean-literal      : 56
class                : 1 2
class-body           : 3 4
class-body-in        : 5 6 7
expression           : 10 22 23 24 24 25 25 25 26 26 27 28 28 29 30 31 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 43 49 51 52
field                : 6
formal               : 17 18
formals              : 11 18
inblock              : 21 22
literal              : 47
method               : 7
program              : 1 0
type                 : 9 10 11 20 27 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . class program
    (2) program -> . class
    (3) class -> . CLASS TYPE_IDENTIFIER class-body
    (4) class -> . CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body

    CLASS           shift and go to state 3

    program                        shift and go to state 1
    class                          shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> class . program
    (2) program -> class .
    (1) program -> . class program
    (2) program -> . class
    (3) class -> . CLASS TYPE_IDENTIFIER class-body
    (4) class -> . CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body

    $end            reduce using rule 2 (program -> class .)
    CLASS           shift and go to state 3

    class                          shift and go to state 2
    program                        shift and go to state 4

state 3

    (3) class -> CLASS . TYPE_IDENTIFIER class-body
    (4) class -> CLASS . TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body

    TYPE_IDENTIFIER shift and go to state 5


state 4

    (1) program -> class program .

    $end            reduce using rule 1 (program -> class program .)


state 5

    (3) class -> CLASS TYPE_IDENTIFIER . class-body
    (4) class -> CLASS TYPE_IDENTIFIER . EXTENDS TYPE_IDENTIFIER class-body
    (5) class-body -> . LBRACE class-body-in RBRACE

    EXTENDS         shift and go to state 7
    LBRACE          shift and go to state 8

    class-body                     shift and go to state 6

state 6

    (3) class -> CLASS TYPE_IDENTIFIER class-body .

    CLASS           reduce using rule 3 (class -> CLASS TYPE_IDENTIFIER class-body .)
    $end            reduce using rule 3 (class -> CLASS TYPE_IDENTIFIER class-body .)


state 7

    (4) class -> CLASS TYPE_IDENTIFIER EXTENDS . TYPE_IDENTIFIER class-body

    TYPE_IDENTIFIER shift and go to state 9


state 8

    (5) class-body -> LBRACE . class-body-in RBRACE
    (6) class-body-in -> . field class-body-in
    (7) class-body-in -> . method class-body-in
    (8) class-body-in -> .
    (9) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (10) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (11) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 8 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 13

    class-body-in                  shift and go to state 10
    field                          shift and go to state 11
    method                         shift and go to state 12

state 9

    (4) class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER . class-body
    (5) class-body -> . LBRACE class-body-in RBRACE

    LBRACE          shift and go to state 8

    class-body                     shift and go to state 14

state 10

    (5) class-body -> LBRACE class-body-in . RBRACE

    RBRACE          shift and go to state 15


state 11

    (6) class-body-in -> field . class-body-in
    (6) class-body-in -> . field class-body-in
    (7) class-body-in -> . method class-body-in
    (8) class-body-in -> .
    (9) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (10) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (11) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 8 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 13

    field                          shift and go to state 11
    class-body-in                  shift and go to state 16
    method                         shift and go to state 12

state 12

    (7) class-body-in -> method . class-body-in
    (6) class-body-in -> . field class-body-in
    (7) class-body-in -> . method class-body-in
    (8) class-body-in -> .
    (9) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (10) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (11) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 8 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 13

    method                         shift and go to state 12
    class-body-in                  shift and go to state 17
    field                          shift and go to state 11

state 13

    (9) field -> OBJECT_IDENTIFIER . COLON type SEMICOLON
    (10) field -> OBJECT_IDENTIFIER . COLON type ASSIGN expression SEMICOLON
    (11) method -> OBJECT_IDENTIFIER . LPAR formals RPAR COLON type block

    COLON           shift and go to state 18
    LPAR            shift and go to state 19


state 14

    (4) class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .

    CLASS           reduce using rule 4 (class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .)
    $end            reduce using rule 4 (class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .)


state 15

    (5) class-body -> LBRACE class-body-in RBRACE .

    CLASS           reduce using rule 5 (class-body -> LBRACE class-body-in RBRACE .)
    $end            reduce using rule 5 (class-body -> LBRACE class-body-in RBRACE .)


state 16

    (6) class-body-in -> field class-body-in .

    RBRACE          reduce using rule 6 (class-body-in -> field class-body-in .)


state 17

    (7) class-body-in -> method class-body-in .

    RBRACE          reduce using rule 7 (class-body-in -> method class-body-in .)


state 18

    (9) field -> OBJECT_IDENTIFIER COLON . type SEMICOLON
    (10) field -> OBJECT_IDENTIFIER COLON . type ASSIGN expression SEMICOLON
    (12) type -> . TYPE_IDENTIFIER
    (13) type -> . INT32
    (14) type -> . BOOL
    (15) type -> . STRING
    (16) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 21
    INT32           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    UNIT            shift and go to state 25

    type                           shift and go to state 20

state 19

    (11) method -> OBJECT_IDENTIFIER LPAR . formals RPAR COLON type block
    (17) formals -> . formal
    (18) formals -> . formal COMMA formals
    (19) formals -> .
    (20) formal -> . OBJECT_IDENTIFIER COLON type

    RPAR            reduce using rule 19 (formals -> .)
    OBJECT_IDENTIFIER shift and go to state 26

    formals                        shift and go to state 27
    formal                         shift and go to state 28

state 20

    (9) field -> OBJECT_IDENTIFIER COLON type . SEMICOLON
    (10) field -> OBJECT_IDENTIFIER COLON type . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 29
    ASSIGN          shift and go to state 30


state 21

    (12) type -> TYPE_IDENTIFIER .

    SEMICOLON       reduce using rule 12 (type -> TYPE_IDENTIFIER .)
    ASSIGN          reduce using rule 12 (type -> TYPE_IDENTIFIER .)
    COMMA           reduce using rule 12 (type -> TYPE_IDENTIFIER .)
    RPAR            reduce using rule 12 (type -> TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 12 (type -> TYPE_IDENTIFIER .)
    IN              reduce using rule 12 (type -> TYPE_IDENTIFIER .)


state 22

    (13) type -> INT32 .

    SEMICOLON       reduce using rule 13 (type -> INT32 .)
    ASSIGN          reduce using rule 13 (type -> INT32 .)
    COMMA           reduce using rule 13 (type -> INT32 .)
    RPAR            reduce using rule 13 (type -> INT32 .)
    LBRACE          reduce using rule 13 (type -> INT32 .)
    IN              reduce using rule 13 (type -> INT32 .)


state 23

    (14) type -> BOOL .

    SEMICOLON       reduce using rule 14 (type -> BOOL .)
    ASSIGN          reduce using rule 14 (type -> BOOL .)
    COMMA           reduce using rule 14 (type -> BOOL .)
    RPAR            reduce using rule 14 (type -> BOOL .)
    LBRACE          reduce using rule 14 (type -> BOOL .)
    IN              reduce using rule 14 (type -> BOOL .)


state 24

    (15) type -> STRING .

    SEMICOLON       reduce using rule 15 (type -> STRING .)
    ASSIGN          reduce using rule 15 (type -> STRING .)
    COMMA           reduce using rule 15 (type -> STRING .)
    RPAR            reduce using rule 15 (type -> STRING .)
    LBRACE          reduce using rule 15 (type -> STRING .)
    IN              reduce using rule 15 (type -> STRING .)


state 25

    (16) type -> UNIT .

    SEMICOLON       reduce using rule 16 (type -> UNIT .)
    ASSIGN          reduce using rule 16 (type -> UNIT .)
    COMMA           reduce using rule 16 (type -> UNIT .)
    RPAR            reduce using rule 16 (type -> UNIT .)
    LBRACE          reduce using rule 16 (type -> UNIT .)
    IN              reduce using rule 16 (type -> UNIT .)


state 26

    (20) formal -> OBJECT_IDENTIFIER . COLON type

    COLON           shift and go to state 31


state 27

    (11) method -> OBJECT_IDENTIFIER LPAR formals . RPAR COLON type block

    RPAR            shift and go to state 32


state 28

    (17) formals -> formal .
    (18) formals -> formal . COMMA formals

    RPAR            reduce using rule 17 (formals -> formal .)
    COMMA           shift and go to state 33


state 29

    (9) field -> OBJECT_IDENTIFIER COLON type SEMICOLON .

    OBJECT_IDENTIFIER reduce using rule 9 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    RBRACE          reduce using rule 9 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)


state 30

    (10) field -> OBJECT_IDENTIFIER COLON type ASSIGN . expression SEMICOLON
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 35
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 31

    (20) formal -> OBJECT_IDENTIFIER COLON . type
    (12) type -> . TYPE_IDENTIFIER
    (13) type -> . INT32
    (14) type -> . BOOL
    (15) type -> . STRING
    (16) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 21
    INT32           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    UNIT            shift and go to state 25

    type                           shift and go to state 53

state 32

    (11) method -> OBJECT_IDENTIFIER LPAR formals RPAR . COLON type block

    COLON           shift and go to state 54


state 33

    (18) formals -> formal COMMA . formals
    (17) formals -> . formal
    (18) formals -> . formal COMMA formals
    (19) formals -> .
    (20) formal -> . OBJECT_IDENTIFIER COLON type

    RPAR            reduce using rule 19 (formals -> .)
    OBJECT_IDENTIFIER shift and go to state 26

    formal                         shift and go to state 28
    formals                        shift and go to state 55

state 34

    (29) expression -> OBJECT_IDENTIFIER . ASSIGN expression
    (42) expression -> OBJECT_IDENTIFIER . LPAR args RPAR
    (45) expression -> OBJECT_IDENTIFIER .

    ASSIGN          shift and go to state 56
    LPAR            shift and go to state 57
    SEMICOLON       reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    PLUS            reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    MINUS           reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    TIMES           reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    DIV             reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    EQUAL           reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    LOWER           reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    POW             reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    AND             reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    DOT             reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    THEN            reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    DO              reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    RPAR            reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    RBRACE          reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    COMMA           reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    ELSE            reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)
    IN              reduce using rule 45 (expression -> OBJECT_IDENTIFIER .)


state 35

    (10) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression . SEMICOLON
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       shift and go to state 58
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 36

    (24) expression -> IF . expression THEN expression
    (25) expression -> IF . expression THEN expression ELSE expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 69
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 37

    (26) expression -> WHILE . expression DO expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 70
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 38

    (27) expression -> LET . OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> LET . OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression

    OBJECT_IDENTIFIER shift and go to state 71


state 39

    (30) expression -> NOT . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 72
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 40

    (31) expression -> MINUS . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 73
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 41

    (32) expression -> ISNULL . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 74
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 42

    (48) expression -> LPAR . RPAR
    (49) expression -> LPAR . expression RPAR
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    RPAR            shift and go to state 75
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 76
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 43

    (44) expression -> NEW . TYPE_IDENTIFIER

    TYPE_IDENTIFIER shift and go to state 77


state 44

    (46) expression -> SELF .

    SEMICOLON       reduce using rule 46 (expression -> SELF .)
    PLUS            reduce using rule 46 (expression -> SELF .)
    MINUS           reduce using rule 46 (expression -> SELF .)
    TIMES           reduce using rule 46 (expression -> SELF .)
    DIV             reduce using rule 46 (expression -> SELF .)
    EQUAL           reduce using rule 46 (expression -> SELF .)
    LOWER_EQUAL     reduce using rule 46 (expression -> SELF .)
    LOWER           reduce using rule 46 (expression -> SELF .)
    POW             reduce using rule 46 (expression -> SELF .)
    AND             reduce using rule 46 (expression -> SELF .)
    DOT             reduce using rule 46 (expression -> SELF .)
    THEN            reduce using rule 46 (expression -> SELF .)
    DO              reduce using rule 46 (expression -> SELF .)
    RPAR            reduce using rule 46 (expression -> SELF .)
    RBRACE          reduce using rule 46 (expression -> SELF .)
    COMMA           reduce using rule 46 (expression -> SELF .)
    ELSE            reduce using rule 46 (expression -> SELF .)
    IN              reduce using rule 46 (expression -> SELF .)


state 45

    (47) expression -> literal .

    SEMICOLON       reduce using rule 47 (expression -> literal .)
    PLUS            reduce using rule 47 (expression -> literal .)
    MINUS           reduce using rule 47 (expression -> literal .)
    TIMES           reduce using rule 47 (expression -> literal .)
    DIV             reduce using rule 47 (expression -> literal .)
    EQUAL           reduce using rule 47 (expression -> literal .)
    LOWER_EQUAL     reduce using rule 47 (expression -> literal .)
    LOWER           reduce using rule 47 (expression -> literal .)
    POW             reduce using rule 47 (expression -> literal .)
    AND             reduce using rule 47 (expression -> literal .)
    DOT             reduce using rule 47 (expression -> literal .)
    THEN            reduce using rule 47 (expression -> literal .)
    DO              reduce using rule 47 (expression -> literal .)
    RPAR            reduce using rule 47 (expression -> literal .)
    RBRACE          reduce using rule 47 (expression -> literal .)
    COMMA           reduce using rule 47 (expression -> literal .)
    ELSE            reduce using rule 47 (expression -> literal .)
    IN              reduce using rule 47 (expression -> literal .)


state 46

    (50) expression -> block .

    SEMICOLON       reduce using rule 50 (expression -> block .)
    PLUS            reduce using rule 50 (expression -> block .)
    MINUS           reduce using rule 50 (expression -> block .)
    TIMES           reduce using rule 50 (expression -> block .)
    DIV             reduce using rule 50 (expression -> block .)
    EQUAL           reduce using rule 50 (expression -> block .)
    LOWER_EQUAL     reduce using rule 50 (expression -> block .)
    LOWER           reduce using rule 50 (expression -> block .)
    POW             reduce using rule 50 (expression -> block .)
    AND             reduce using rule 50 (expression -> block .)
    DOT             reduce using rule 50 (expression -> block .)
    THEN            reduce using rule 50 (expression -> block .)
    DO              reduce using rule 50 (expression -> block .)
    RPAR            reduce using rule 50 (expression -> block .)
    RBRACE          reduce using rule 50 (expression -> block .)
    COMMA           reduce using rule 50 (expression -> block .)
    ELSE            reduce using rule 50 (expression -> block .)
    IN              reduce using rule 50 (expression -> block .)


state 47

    (54) literal -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 54 (literal -> INTEGER_LITERAL .)
    PLUS            reduce using rule 54 (literal -> INTEGER_LITERAL .)
    MINUS           reduce using rule 54 (literal -> INTEGER_LITERAL .)
    TIMES           reduce using rule 54 (literal -> INTEGER_LITERAL .)
    DIV             reduce using rule 54 (literal -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 54 (literal -> INTEGER_LITERAL .)
    LOWER_EQUAL     reduce using rule 54 (literal -> INTEGER_LITERAL .)
    LOWER           reduce using rule 54 (literal -> INTEGER_LITERAL .)
    POW             reduce using rule 54 (literal -> INTEGER_LITERAL .)
    AND             reduce using rule 54 (literal -> INTEGER_LITERAL .)
    DOT             reduce using rule 54 (literal -> INTEGER_LITERAL .)
    THEN            reduce using rule 54 (literal -> INTEGER_LITERAL .)
    DO              reduce using rule 54 (literal -> INTEGER_LITERAL .)
    RPAR            reduce using rule 54 (literal -> INTEGER_LITERAL .)
    RBRACE          reduce using rule 54 (literal -> INTEGER_LITERAL .)
    COMMA           reduce using rule 54 (literal -> INTEGER_LITERAL .)
    ELSE            reduce using rule 54 (literal -> INTEGER_LITERAL .)
    IN              reduce using rule 54 (literal -> INTEGER_LITERAL .)


state 48

    (55) literal -> string_literal .

    SEMICOLON       reduce using rule 55 (literal -> string_literal .)
    PLUS            reduce using rule 55 (literal -> string_literal .)
    MINUS           reduce using rule 55 (literal -> string_literal .)
    TIMES           reduce using rule 55 (literal -> string_literal .)
    DIV             reduce using rule 55 (literal -> string_literal .)
    EQUAL           reduce using rule 55 (literal -> string_literal .)
    LOWER_EQUAL     reduce using rule 55 (literal -> string_literal .)
    LOWER           reduce using rule 55 (literal -> string_literal .)
    POW             reduce using rule 55 (literal -> string_literal .)
    AND             reduce using rule 55 (literal -> string_literal .)
    DOT             reduce using rule 55 (literal -> string_literal .)
    THEN            reduce using rule 55 (literal -> string_literal .)
    DO              reduce using rule 55 (literal -> string_literal .)
    RPAR            reduce using rule 55 (literal -> string_literal .)
    RBRACE          reduce using rule 55 (literal -> string_literal .)
    COMMA           reduce using rule 55 (literal -> string_literal .)
    ELSE            reduce using rule 55 (literal -> string_literal .)
    IN              reduce using rule 55 (literal -> string_literal .)


state 49

    (56) literal -> boolean-literal .

    SEMICOLON       reduce using rule 56 (literal -> boolean-literal .)
    PLUS            reduce using rule 56 (literal -> boolean-literal .)
    MINUS           reduce using rule 56 (literal -> boolean-literal .)
    TIMES           reduce using rule 56 (literal -> boolean-literal .)
    DIV             reduce using rule 56 (literal -> boolean-literal .)
    EQUAL           reduce using rule 56 (literal -> boolean-literal .)
    LOWER_EQUAL     reduce using rule 56 (literal -> boolean-literal .)
    LOWER           reduce using rule 56 (literal -> boolean-literal .)
    POW             reduce using rule 56 (literal -> boolean-literal .)
    AND             reduce using rule 56 (literal -> boolean-literal .)
    DOT             reduce using rule 56 (literal -> boolean-literal .)
    THEN            reduce using rule 56 (literal -> boolean-literal .)
    DO              reduce using rule 56 (literal -> boolean-literal .)
    RPAR            reduce using rule 56 (literal -> boolean-literal .)
    RBRACE          reduce using rule 56 (literal -> boolean-literal .)
    COMMA           reduce using rule 56 (literal -> boolean-literal .)
    ELSE            reduce using rule 56 (literal -> boolean-literal .)
    IN              reduce using rule 56 (literal -> boolean-literal .)


state 50

    (21) block -> LBRACE . inblock RBRACE
    (22) inblock -> . inblock SEMICOLON expression
    (23) inblock -> . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    inblock                        shift and go to state 78
    expression                     shift and go to state 79
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 51

    (57) boolean-literal -> TRUE .

    SEMICOLON       reduce using rule 57 (boolean-literal -> TRUE .)
    PLUS            reduce using rule 57 (boolean-literal -> TRUE .)
    MINUS           reduce using rule 57 (boolean-literal -> TRUE .)
    TIMES           reduce using rule 57 (boolean-literal -> TRUE .)
    DIV             reduce using rule 57 (boolean-literal -> TRUE .)
    EQUAL           reduce using rule 57 (boolean-literal -> TRUE .)
    LOWER_EQUAL     reduce using rule 57 (boolean-literal -> TRUE .)
    LOWER           reduce using rule 57 (boolean-literal -> TRUE .)
    POW             reduce using rule 57 (boolean-literal -> TRUE .)
    AND             reduce using rule 57 (boolean-literal -> TRUE .)
    DOT             reduce using rule 57 (boolean-literal -> TRUE .)
    THEN            reduce using rule 57 (boolean-literal -> TRUE .)
    DO              reduce using rule 57 (boolean-literal -> TRUE .)
    RPAR            reduce using rule 57 (boolean-literal -> TRUE .)
    RBRACE          reduce using rule 57 (boolean-literal -> TRUE .)
    COMMA           reduce using rule 57 (boolean-literal -> TRUE .)
    ELSE            reduce using rule 57 (boolean-literal -> TRUE .)
    IN              reduce using rule 57 (boolean-literal -> TRUE .)


state 52

    (58) boolean-literal -> FALSE .

    SEMICOLON       reduce using rule 58 (boolean-literal -> FALSE .)
    PLUS            reduce using rule 58 (boolean-literal -> FALSE .)
    MINUS           reduce using rule 58 (boolean-literal -> FALSE .)
    TIMES           reduce using rule 58 (boolean-literal -> FALSE .)
    DIV             reduce using rule 58 (boolean-literal -> FALSE .)
    EQUAL           reduce using rule 58 (boolean-literal -> FALSE .)
    LOWER_EQUAL     reduce using rule 58 (boolean-literal -> FALSE .)
    LOWER           reduce using rule 58 (boolean-literal -> FALSE .)
    POW             reduce using rule 58 (boolean-literal -> FALSE .)
    AND             reduce using rule 58 (boolean-literal -> FALSE .)
    DOT             reduce using rule 58 (boolean-literal -> FALSE .)
    THEN            reduce using rule 58 (boolean-literal -> FALSE .)
    DO              reduce using rule 58 (boolean-literal -> FALSE .)
    RPAR            reduce using rule 58 (boolean-literal -> FALSE .)
    RBRACE          reduce using rule 58 (boolean-literal -> FALSE .)
    COMMA           reduce using rule 58 (boolean-literal -> FALSE .)
    ELSE            reduce using rule 58 (boolean-literal -> FALSE .)
    IN              reduce using rule 58 (boolean-literal -> FALSE .)


state 53

    (20) formal -> OBJECT_IDENTIFIER COLON type .

    COMMA           reduce using rule 20 (formal -> OBJECT_IDENTIFIER COLON type .)
    RPAR            reduce using rule 20 (formal -> OBJECT_IDENTIFIER COLON type .)


state 54

    (11) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON . type block
    (12) type -> . TYPE_IDENTIFIER
    (13) type -> . INT32
    (14) type -> . BOOL
    (15) type -> . STRING
    (16) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 21
    INT32           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    UNIT            shift and go to state 25

    type                           shift and go to state 80

state 55

    (18) formals -> formal COMMA formals .

    RPAR            reduce using rule 18 (formals -> formal COMMA formals .)


state 56

    (29) expression -> OBJECT_IDENTIFIER ASSIGN . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 81
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 57

    (42) expression -> OBJECT_IDENTIFIER LPAR . args RPAR
    (51) args -> . expression COMMA args
    (52) args -> . expression
    (53) args -> .
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    RPAR            reduce using rule 53 (args -> .)
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    args                           shift and go to state 82
    expression                     shift and go to state 83
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 58

    (10) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .

    OBJECT_IDENTIFIER reduce using rule 10 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 10 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)


state 59

    (33) expression -> expression PLUS . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 84
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 60

    (34) expression -> expression MINUS . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 85
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 61

    (35) expression -> expression TIMES . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 86
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 62

    (36) expression -> expression DIV . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 87
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 63

    (37) expression -> expression EQUAL . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 88
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 64

    (38) expression -> expression LOWER_EQUAL . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 89
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 65

    (39) expression -> expression LOWER . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 90
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 66

    (40) expression -> expression POW . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 91
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 67

    (41) expression -> expression AND . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 92
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 68

    (43) expression -> expression DOT . OBJECT_IDENTIFIER LPAR args RPAR

    OBJECT_IDENTIFIER shift and go to state 93


state 69

    (24) expression -> IF expression . THEN expression
    (25) expression -> IF expression . THEN expression ELSE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    THEN            shift and go to state 94
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 70

    (26) expression -> WHILE expression . DO expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    DO              shift and go to state 95
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 71

    (27) expression -> LET OBJECT_IDENTIFIER . COLON type IN expression
    (28) expression -> LET OBJECT_IDENTIFIER . COLON type ASSIGN expression IN expression

    COLON           shift and go to state 96


state 72

    (30) expression -> NOT expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 30 (expression -> NOT expression .)
    AND             reduce using rule 30 (expression -> NOT expression .)
    THEN            reduce using rule 30 (expression -> NOT expression .)
    DO              reduce using rule 30 (expression -> NOT expression .)
    RPAR            reduce using rule 30 (expression -> NOT expression .)
    RBRACE          reduce using rule 30 (expression -> NOT expression .)
    COMMA           reduce using rule 30 (expression -> NOT expression .)
    ELSE            reduce using rule 30 (expression -> NOT expression .)
    IN              reduce using rule 30 (expression -> NOT expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 30 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 30 (expression -> NOT expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 30 (expression -> NOT expression .) ]
  ! LOWER           [ reduce using rule 30 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 30 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 30 (expression -> NOT expression .) ]
  ! AND             [ shift and go to state 67 ]


state 73

    (31) expression -> MINUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 31 (expression -> MINUS expression .)
    PLUS            reduce using rule 31 (expression -> MINUS expression .)
    MINUS           reduce using rule 31 (expression -> MINUS expression .)
    TIMES           reduce using rule 31 (expression -> MINUS expression .)
    DIV             reduce using rule 31 (expression -> MINUS expression .)
    EQUAL           reduce using rule 31 (expression -> MINUS expression .)
    LOWER_EQUAL     reduce using rule 31 (expression -> MINUS expression .)
    LOWER           reduce using rule 31 (expression -> MINUS expression .)
    AND             reduce using rule 31 (expression -> MINUS expression .)
    THEN            reduce using rule 31 (expression -> MINUS expression .)
    DO              reduce using rule 31 (expression -> MINUS expression .)
    RPAR            reduce using rule 31 (expression -> MINUS expression .)
    RBRACE          reduce using rule 31 (expression -> MINUS expression .)
    COMMA           reduce using rule 31 (expression -> MINUS expression .)
    ELSE            reduce using rule 31 (expression -> MINUS expression .)
    IN              reduce using rule 31 (expression -> MINUS expression .)
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! POW             [ reduce using rule 31 (expression -> MINUS expression .) ]
  ! DOT             [ reduce using rule 31 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 74

    (32) expression -> ISNULL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 32 (expression -> ISNULL expression .)
    PLUS            reduce using rule 32 (expression -> ISNULL expression .)
    MINUS           reduce using rule 32 (expression -> ISNULL expression .)
    TIMES           reduce using rule 32 (expression -> ISNULL expression .)
    DIV             reduce using rule 32 (expression -> ISNULL expression .)
    EQUAL           reduce using rule 32 (expression -> ISNULL expression .)
    LOWER_EQUAL     reduce using rule 32 (expression -> ISNULL expression .)
    LOWER           reduce using rule 32 (expression -> ISNULL expression .)
    AND             reduce using rule 32 (expression -> ISNULL expression .)
    THEN            reduce using rule 32 (expression -> ISNULL expression .)
    DO              reduce using rule 32 (expression -> ISNULL expression .)
    RPAR            reduce using rule 32 (expression -> ISNULL expression .)
    RBRACE          reduce using rule 32 (expression -> ISNULL expression .)
    COMMA           reduce using rule 32 (expression -> ISNULL expression .)
    ELSE            reduce using rule 32 (expression -> ISNULL expression .)
    IN              reduce using rule 32 (expression -> ISNULL expression .)
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! POW             [ reduce using rule 32 (expression -> ISNULL expression .) ]
  ! DOT             [ reduce using rule 32 (expression -> ISNULL expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 75

    (48) expression -> LPAR RPAR .

    SEMICOLON       reduce using rule 48 (expression -> LPAR RPAR .)
    PLUS            reduce using rule 48 (expression -> LPAR RPAR .)
    MINUS           reduce using rule 48 (expression -> LPAR RPAR .)
    TIMES           reduce using rule 48 (expression -> LPAR RPAR .)
    DIV             reduce using rule 48 (expression -> LPAR RPAR .)
    EQUAL           reduce using rule 48 (expression -> LPAR RPAR .)
    LOWER_EQUAL     reduce using rule 48 (expression -> LPAR RPAR .)
    LOWER           reduce using rule 48 (expression -> LPAR RPAR .)
    POW             reduce using rule 48 (expression -> LPAR RPAR .)
    AND             reduce using rule 48 (expression -> LPAR RPAR .)
    DOT             reduce using rule 48 (expression -> LPAR RPAR .)
    THEN            reduce using rule 48 (expression -> LPAR RPAR .)
    DO              reduce using rule 48 (expression -> LPAR RPAR .)
    RPAR            reduce using rule 48 (expression -> LPAR RPAR .)
    RBRACE          reduce using rule 48 (expression -> LPAR RPAR .)
    COMMA           reduce using rule 48 (expression -> LPAR RPAR .)
    ELSE            reduce using rule 48 (expression -> LPAR RPAR .)
    IN              reduce using rule 48 (expression -> LPAR RPAR .)


state 76

    (49) expression -> LPAR expression . RPAR
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            shift and go to state 97
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 77

    (44) expression -> NEW TYPE_IDENTIFIER .

    SEMICOLON       reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    PLUS            reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    MINUS           reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    TIMES           reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    DIV             reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    EQUAL           reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER           reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    POW             reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    AND             reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    DOT             reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    THEN            reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    DO              reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    RPAR            reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    RBRACE          reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    COMMA           reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    ELSE            reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)
    IN              reduce using rule 44 (expression -> NEW TYPE_IDENTIFIER .)


state 78

    (21) block -> LBRACE inblock . RBRACE
    (22) inblock -> inblock . SEMICOLON expression

    RBRACE          shift and go to state 98
    SEMICOLON       shift and go to state 99


state 79

    (23) inblock -> expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 23 (inblock -> expression .)
    SEMICOLON       reduce using rule 23 (inblock -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 80

    (11) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type . block
    (21) block -> . LBRACE inblock RBRACE

    LBRACE          shift and go to state 50

    block                          shift and go to state 100

state 81

    (29) expression -> OBJECT_IDENTIFIER ASSIGN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    DO              reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RPAR            reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! EQUAL           [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER           [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! POW             [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! AND             [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DOT             [ reduce using rule 29 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]


state 82

    (42) expression -> OBJECT_IDENTIFIER LPAR args . RPAR

    RPAR            shift and go to state 101


state 83

    (51) args -> expression . COMMA args
    (52) args -> expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    COMMA           shift and go to state 102
    RPAR            reduce using rule 52 (args -> expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 84

    (33) expression -> expression PLUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 33 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 33 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 33 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 33 (expression -> expression PLUS expression .)
    LOWER_EQUAL     reduce using rule 33 (expression -> expression PLUS expression .)
    LOWER           reduce using rule 33 (expression -> expression PLUS expression .)
    AND             reduce using rule 33 (expression -> expression PLUS expression .)
    THEN            reduce using rule 33 (expression -> expression PLUS expression .)
    DO              reduce using rule 33 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 33 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 33 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 33 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 33 (expression -> expression PLUS expression .)
    IN              reduce using rule 33 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! TIMES           [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 33 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 85

    (34) expression -> expression MINUS expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 34 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 34 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 34 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 34 (expression -> expression MINUS expression .)
    LOWER_EQUAL     reduce using rule 34 (expression -> expression MINUS expression .)
    LOWER           reduce using rule 34 (expression -> expression MINUS expression .)
    AND             reduce using rule 34 (expression -> expression MINUS expression .)
    THEN            reduce using rule 34 (expression -> expression MINUS expression .)
    DO              reduce using rule 34 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 34 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 34 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 34 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 34 (expression -> expression MINUS expression .)
    IN              reduce using rule 34 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! TIMES           [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 34 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 86

    (35) expression -> expression TIMES expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 35 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 35 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 35 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 35 (expression -> expression TIMES expression .)
    DIV             reduce using rule 35 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 35 (expression -> expression TIMES expression .)
    LOWER_EQUAL     reduce using rule 35 (expression -> expression TIMES expression .)
    LOWER           reduce using rule 35 (expression -> expression TIMES expression .)
    AND             reduce using rule 35 (expression -> expression TIMES expression .)
    THEN            reduce using rule 35 (expression -> expression TIMES expression .)
    DO              reduce using rule 35 (expression -> expression TIMES expression .)
    RPAR            reduce using rule 35 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 35 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 35 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 35 (expression -> expression TIMES expression .)
    IN              reduce using rule 35 (expression -> expression TIMES expression .)
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! POW             [ reduce using rule 35 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 35 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 87

    (36) expression -> expression DIV expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 36 (expression -> expression DIV expression .)
    PLUS            reduce using rule 36 (expression -> expression DIV expression .)
    MINUS           reduce using rule 36 (expression -> expression DIV expression .)
    TIMES           reduce using rule 36 (expression -> expression DIV expression .)
    DIV             reduce using rule 36 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 36 (expression -> expression DIV expression .)
    LOWER_EQUAL     reduce using rule 36 (expression -> expression DIV expression .)
    LOWER           reduce using rule 36 (expression -> expression DIV expression .)
    AND             reduce using rule 36 (expression -> expression DIV expression .)
    THEN            reduce using rule 36 (expression -> expression DIV expression .)
    DO              reduce using rule 36 (expression -> expression DIV expression .)
    RPAR            reduce using rule 36 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 36 (expression -> expression DIV expression .)
    COMMA           reduce using rule 36 (expression -> expression DIV expression .)
    ELSE            reduce using rule 36 (expression -> expression DIV expression .)
    IN              reduce using rule 36 (expression -> expression DIV expression .)
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! POW             [ reduce using rule 36 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 36 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 88

    (37) expression -> expression EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 37 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 37 (expression -> expression EQUAL expression .)
    LOWER_EQUAL     reduce using rule 37 (expression -> expression EQUAL expression .)
    LOWER           reduce using rule 37 (expression -> expression EQUAL expression .)
    AND             reduce using rule 37 (expression -> expression EQUAL expression .)
    THEN            reduce using rule 37 (expression -> expression EQUAL expression .)
    DO              reduce using rule 37 (expression -> expression EQUAL expression .)
    RPAR            reduce using rule 37 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 37 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 37 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 37 (expression -> expression EQUAL expression .)
    IN              reduce using rule 37 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! DOT             [ reduce using rule 37 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 89

    (38) expression -> expression LOWER_EQUAL expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    EQUAL           reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    LOWER_EQUAL     reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    LOWER           reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    AND             reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    THEN            reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    DO              reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    RPAR            reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    RBRACE          reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    COMMA           reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    ELSE            reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    IN              reduce using rule 38 (expression -> expression LOWER_EQUAL expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! POW             [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! DOT             [ reduce using rule 38 (expression -> expression LOWER_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 90

    (39) expression -> expression LOWER expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 39 (expression -> expression LOWER expression .)
    EQUAL           reduce using rule 39 (expression -> expression LOWER expression .)
    LOWER_EQUAL     reduce using rule 39 (expression -> expression LOWER expression .)
    LOWER           reduce using rule 39 (expression -> expression LOWER expression .)
    AND             reduce using rule 39 (expression -> expression LOWER expression .)
    THEN            reduce using rule 39 (expression -> expression LOWER expression .)
    DO              reduce using rule 39 (expression -> expression LOWER expression .)
    RPAR            reduce using rule 39 (expression -> expression LOWER expression .)
    RBRACE          reduce using rule 39 (expression -> expression LOWER expression .)
    COMMA           reduce using rule 39 (expression -> expression LOWER expression .)
    ELSE            reduce using rule 39 (expression -> expression LOWER expression .)
    IN              reduce using rule 39 (expression -> expression LOWER expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! POW             [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! DOT             [ reduce using rule 39 (expression -> expression LOWER expression .) ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 91

    (40) expression -> expression POW expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 40 (expression -> expression POW expression .)
    PLUS            reduce using rule 40 (expression -> expression POW expression .)
    MINUS           reduce using rule 40 (expression -> expression POW expression .)
    TIMES           reduce using rule 40 (expression -> expression POW expression .)
    DIV             reduce using rule 40 (expression -> expression POW expression .)
    EQUAL           reduce using rule 40 (expression -> expression POW expression .)
    LOWER_EQUAL     reduce using rule 40 (expression -> expression POW expression .)
    LOWER           reduce using rule 40 (expression -> expression POW expression .)
    AND             reduce using rule 40 (expression -> expression POW expression .)
    THEN            reduce using rule 40 (expression -> expression POW expression .)
    DO              reduce using rule 40 (expression -> expression POW expression .)
    RPAR            reduce using rule 40 (expression -> expression POW expression .)
    RBRACE          reduce using rule 40 (expression -> expression POW expression .)
    COMMA           reduce using rule 40 (expression -> expression POW expression .)
    ELSE            reduce using rule 40 (expression -> expression POW expression .)
    IN              reduce using rule 40 (expression -> expression POW expression .)
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! POW             [ reduce using rule 40 (expression -> expression POW expression .) ]
  ! DOT             [ reduce using rule 40 (expression -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 59 ]
  ! MINUS           [ shift and go to state 60 ]
  ! TIMES           [ shift and go to state 61 ]
  ! DIV             [ shift and go to state 62 ]
  ! EQUAL           [ shift and go to state 63 ]
  ! LOWER_EQUAL     [ shift and go to state 64 ]
  ! LOWER           [ shift and go to state 65 ]
  ! AND             [ shift and go to state 67 ]


state 92

    (41) expression -> expression AND expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 41 (expression -> expression AND expression .)
    AND             reduce using rule 41 (expression -> expression AND expression .)
    THEN            reduce using rule 41 (expression -> expression AND expression .)
    DO              reduce using rule 41 (expression -> expression AND expression .)
    RPAR            reduce using rule 41 (expression -> expression AND expression .)
    RBRACE          reduce using rule 41 (expression -> expression AND expression .)
    COMMA           reduce using rule 41 (expression -> expression AND expression .)
    ELSE            reduce using rule 41 (expression -> expression AND expression .)
    IN              reduce using rule 41 (expression -> expression AND expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! LOWER           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 67 ]


state 93

    (43) expression -> expression DOT OBJECT_IDENTIFIER . LPAR args RPAR

    LPAR            shift and go to state 103


state 94

    (24) expression -> IF expression THEN . expression
    (25) expression -> IF expression THEN . expression ELSE expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 104
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 95

    (26) expression -> WHILE expression DO . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 105
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 96

    (27) expression -> LET OBJECT_IDENTIFIER COLON . type IN expression
    (28) expression -> LET OBJECT_IDENTIFIER COLON . type ASSIGN expression IN expression
    (12) type -> . TYPE_IDENTIFIER
    (13) type -> . INT32
    (14) type -> . BOOL
    (15) type -> . STRING
    (16) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 21
    INT32           shift and go to state 22
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    UNIT            shift and go to state 25

    type                           shift and go to state 106

state 97

    (49) expression -> LPAR expression RPAR .

    SEMICOLON       reduce using rule 49 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 49 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 49 (expression -> LPAR expression RPAR .)
    TIMES           reduce using rule 49 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 49 (expression -> LPAR expression RPAR .)
    EQUAL           reduce using rule 49 (expression -> LPAR expression RPAR .)
    LOWER_EQUAL     reduce using rule 49 (expression -> LPAR expression RPAR .)
    LOWER           reduce using rule 49 (expression -> LPAR expression RPAR .)
    POW             reduce using rule 49 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 49 (expression -> LPAR expression RPAR .)
    DOT             reduce using rule 49 (expression -> LPAR expression RPAR .)
    THEN            reduce using rule 49 (expression -> LPAR expression RPAR .)
    DO              reduce using rule 49 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 49 (expression -> LPAR expression RPAR .)
    RBRACE          reduce using rule 49 (expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 49 (expression -> LPAR expression RPAR .)
    ELSE            reduce using rule 49 (expression -> LPAR expression RPAR .)
    IN              reduce using rule 49 (expression -> LPAR expression RPAR .)


state 98

    (21) block -> LBRACE inblock RBRACE .

    SEMICOLON       reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    PLUS            reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    MINUS           reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    TIMES           reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    DIV             reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    EQUAL           reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    LOWER_EQUAL     reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    LOWER           reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    POW             reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    AND             reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    DOT             reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    THEN            reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    DO              reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    RPAR            reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    RBRACE          reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    COMMA           reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    ELSE            reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    IN              reduce using rule 21 (block -> LBRACE inblock RBRACE .)
    OBJECT_IDENTIFIER reduce using rule 21 (block -> LBRACE inblock RBRACE .)


state 99

    (22) inblock -> inblock SEMICOLON . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 107
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 100

    (11) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .

    OBJECT_IDENTIFIER reduce using rule 11 (method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .)
    RBRACE          reduce using rule 11 (method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .)


state 101

    (42) expression -> OBJECT_IDENTIFIER LPAR args RPAR .

    SEMICOLON       reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    PLUS            reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 42 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)


state 102

    (51) args -> expression COMMA . args
    (51) args -> . expression COMMA args
    (52) args -> . expression
    (53) args -> .
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    RPAR            reduce using rule 53 (args -> .)
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 83
    args                           shift and go to state 108
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 103

    (43) expression -> expression DOT OBJECT_IDENTIFIER LPAR . args RPAR
    (51) args -> . expression COMMA args
    (52) args -> . expression
    (53) args -> .
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    RPAR            reduce using rule 53 (args -> .)
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 83
    args                           shift and go to state 109
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 104

    (24) expression -> IF expression THEN expression .
    (25) expression -> IF expression THEN expression . ELSE expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 24 (expression -> IF expression THEN expression .)
    THEN            reduce using rule 24 (expression -> IF expression THEN expression .)
    DO              reduce using rule 24 (expression -> IF expression THEN expression .)
    RPAR            reduce using rule 24 (expression -> IF expression THEN expression .)
    RBRACE          reduce using rule 24 (expression -> IF expression THEN expression .)
    COMMA           reduce using rule 24 (expression -> IF expression THEN expression .)
    IN              reduce using rule 24 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 110
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! MINUS           [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! TIMES           [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! DIV             [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! EQUAL           [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! LOWER           [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! POW             [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! DOT             [ reduce using rule 24 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 24 (expression -> IF expression THEN expression .) ]


state 105

    (26) expression -> WHILE expression DO expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 26 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 26 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 26 (expression -> WHILE expression DO expression .)
    RPAR            reduce using rule 26 (expression -> WHILE expression DO expression .)
    RBRACE          reduce using rule 26 (expression -> WHILE expression DO expression .)
    COMMA           reduce using rule 26 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 26 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 26 (expression -> WHILE expression DO expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! MINUS           [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! TIMES           [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! DIV             [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! EQUAL           [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! LOWER           [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! POW             [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]
  ! DOT             [ reduce using rule 26 (expression -> WHILE expression DO expression .) ]


state 106

    (27) expression -> LET OBJECT_IDENTIFIER COLON type . IN expression
    (28) expression -> LET OBJECT_IDENTIFIER COLON type . ASSIGN expression IN expression

    IN              shift and go to state 111
    ASSIGN          shift and go to state 112


state 107

    (22) inblock -> inblock SEMICOLON expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 22 (inblock -> inblock SEMICOLON expression .)
    SEMICOLON       reduce using rule 22 (inblock -> inblock SEMICOLON expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 108

    (51) args -> expression COMMA args .

    RPAR            reduce using rule 51 (args -> expression COMMA args .)


state 109

    (43) expression -> expression DOT OBJECT_IDENTIFIER LPAR args . RPAR

    RPAR            shift and go to state 113


state 110

    (25) expression -> IF expression THEN expression ELSE . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 114
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 111

    (27) expression -> LET OBJECT_IDENTIFIER COLON type IN . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 115
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 112

    (28) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN . expression IN expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 116
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 113

    (43) expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .

    SEMICOLON       reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    PLUS            reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 43 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)


state 114

    (25) expression -> IF expression THEN expression ELSE expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    RPAR            reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    RBRACE          reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    COMMA           reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! MINUS           [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! TIMES           [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DIV             [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQUAL           [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER           [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! POW             [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DOT             [ reduce using rule 25 (expression -> IF expression THEN expression ELSE expression .) ]


state 115

    (27) expression -> LET OBJECT_IDENTIFIER COLON type IN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    THEN            reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    DO              reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RPAR            reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RBRACE          reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    COMMA           reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    ELSE            reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    IN              reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! MINUS           [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! TIMES           [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DIV             [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! EQUAL           [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER           [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! POW             [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! AND             [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DOT             [ reduce using rule 27 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]


state 116

    (28) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression . IN expression
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    IN              shift and go to state 117
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68


state 117

    (28) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN . expression
    (24) expression -> . IF expression THEN expression
    (25) expression -> . IF expression THEN expression ELSE expression
    (26) expression -> . WHILE expression DO expression
    (27) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (28) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (29) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (30) expression -> . NOT expression
    (31) expression -> . MINUS expression
    (32) expression -> . ISNULL expression
    (33) expression -> . expression PLUS expression
    (34) expression -> . expression MINUS expression
    (35) expression -> . expression TIMES expression
    (36) expression -> . expression DIV expression
    (37) expression -> . expression EQUAL expression
    (38) expression -> . expression LOWER_EQUAL expression
    (39) expression -> . expression LOWER expression
    (40) expression -> . expression POW expression
    (41) expression -> . expression AND expression
    (42) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (43) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (44) expression -> . NEW TYPE_IDENTIFIER
    (45) expression -> . OBJECT_IDENTIFIER
    (46) expression -> . SELF
    (47) expression -> . literal
    (48) expression -> . LPAR RPAR
    (49) expression -> . LPAR expression RPAR
    (50) expression -> . block
    (54) literal -> . INTEGER_LITERAL
    (55) literal -> . string_literal
    (56) literal -> . boolean-literal
    (21) block -> . LBRACE inblock RBRACE
    (57) boolean-literal -> . TRUE
    (58) boolean-literal -> . FALSE

    IF              shift and go to state 36
    WHILE           shift and go to state 37
    LET             shift and go to state 38
    OBJECT_IDENTIFIER shift and go to state 34
    NOT             shift and go to state 39
    MINUS           shift and go to state 40
    ISNULL          shift and go to state 41
    NEW             shift and go to state 43
    SELF            shift and go to state 44
    LPAR            shift and go to state 42
    INTEGER_LITERAL shift and go to state 47
    string_literal  shift and go to state 48
    LBRACE          shift and go to state 50
    TRUE            shift and go to state 51
    FALSE           shift and go to state 52

    expression                     shift and go to state 118
    literal                        shift and go to state 45
    block                          shift and go to state 46
    boolean-literal                shift and go to state 49

state 118

    (28) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .
    (33) expression -> expression . PLUS expression
    (34) expression -> expression . MINUS expression
    (35) expression -> expression . TIMES expression
    (36) expression -> expression . DIV expression
    (37) expression -> expression . EQUAL expression
    (38) expression -> expression . LOWER_EQUAL expression
    (39) expression -> expression . LOWER expression
    (40) expression -> expression . POW expression
    (41) expression -> expression . AND expression
    (43) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    THEN            reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    DO              reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RPAR            reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RBRACE          reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    COMMA           reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    ELSE            reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    IN              reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    PLUS            shift and go to state 59
    MINUS           shift and go to state 60
    TIMES           shift and go to state 61
    DIV             shift and go to state 62
    EQUAL           shift and go to state 63
    LOWER_EQUAL     shift and go to state 64
    LOWER           shift and go to state 65
    POW             shift and go to state 66
    AND             shift and go to state 67
    DOT             shift and go to state 68

  ! PLUS            [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! MINUS           [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! TIMES           [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DIV             [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! EQUAL           [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER           [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! POW             [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DOT             [ reduce using rule 28 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIV in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 104 resolved as shift
WARNING: shift/reduce conflict for POW in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for DOT in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIV in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 105 resolved as shift
WARNING: shift/reduce conflict for POW in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for DOT in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 114 resolved as shift
WARNING: shift/reduce conflict for POW in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 115 resolved as shift
WARNING: shift/reduce conflict for DIV in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 115 resolved as shift
WARNING: shift/reduce conflict for POW in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for DOT in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for DIV in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 118 resolved as shift
WARNING: shift/reduce conflict for POW in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for DOT in state 118 resolved as shift
