Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> program
Rule 2     program -> program class
Rule 3     program -> class
Rule 4     class -> field
Rule 5     class -> method
Rule 6     class -> CLASS error
Rule 7     class -> expression
Rule 8     class -> TYPE_IDENTIFIER
Rule 9     class -> block
Rule 10    class -> CLASS new_class_scope class-body
Rule 11    class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body
Rule 12    new_class_scope -> TYPE_IDENTIFIER
Rule 13    class-body -> LBRACE class-body-in RBRACE
Rule 14    class-body -> LBRACE class-body-in error
Rule 15    class-body-in -> class-body-in field
Rule 16    class-body-in -> class-body-in method
Rule 17    class-body-in -> <empty>
Rule 18    field -> OBJECT_IDENTIFIER COLON type SEMICOLON
Rule 19    field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
Rule 20    method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block
Rule 21    new_variables_scope -> <empty>
Rule 22    type -> TYPE_IDENTIFIER
Rule 23    type -> INT32
Rule 24    type -> BOOL
Rule 25    type -> STRING
Rule 26    type -> UNIT
Rule 27    formals -> formal
Rule 28    formals -> formals COMMA formal
Rule 29    formals -> <empty>
Rule 30    formal -> OBJECT_IDENTIFIER COLON type
Rule 31    block -> LBRACE new_variables_scope inblock RBRACE
Rule 32    inblock -> inblock SEMICOLON expression
Rule 33    inblock -> expression
Rule 34    inblock -> <empty>
Rule 35    inblock -> inblock error
Rule 36    expression -> IF expression THEN expression
Rule 37    expression -> IF expression THEN expression ELSE expression
Rule 38    expression -> WHILE expression DO expression
Rule 39    expression -> LET OBJECT_IDENTIFIER COLON type IN expression
Rule 40    expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
Rule 41    expression -> OBJECT_IDENTIFIER ASSIGN expression
Rule 42    expression -> NOT expression
Rule 43    expression -> MINUS expression
Rule 44    expression -> ISNULL expression
Rule 45    expression -> expression PLUS expression
Rule 46    expression -> expression MINUS expression
Rule 47    expression -> expression TIMES expression
Rule 48    expression -> expression DIV expression
Rule 49    expression -> expression EQUAL expression
Rule 50    expression -> expression LOWER_EQUAL expression
Rule 51    expression -> expression LOWER expression
Rule 52    expression -> expression POW expression
Rule 53    expression -> expression AND expression
Rule 54    expression -> OBJECT_IDENTIFIER LPAR args RPAR
Rule 55    expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR
Rule 56    expression -> NEW TYPE_IDENTIFIER
Rule 57    expression -> OBJECT_IDENTIFIER
Rule 58    expression -> SELF
Rule 59    expression -> literal
Rule 60    expression -> LPAR RPAR
Rule 61    expression -> LPAR expression RPAR
Rule 62    expression -> LPAR expression error
Rule 63    expression -> error expression RPAR
Rule 64    expression -> block
Rule 65    expression -> error
Rule 66    expression -> IF expression THEN expression SEMICOLON error
Rule 67    args -> args COMMA expression
Rule 68    args -> expression
Rule 69    args -> <empty>
Rule 70    literal -> INTEGER_LITERAL
Rule 71    literal -> string_literal
Rule 72    literal -> boolean-literal
Rule 73    boolean-literal -> TRUE
Rule 74    boolean-literal -> FALSE

Terminals, with rules where they appear

AND                  : 53
ASSIGN               : 19 40 41
BOOL                 : 24
CLASS                : 6 10 11
COLON                : 18 19 20 30 39 40
COMMA                : 28 67
DIV                  : 48
DO                   : 38
DOT                  : 55
ELSE                 : 37
EQUAL                : 49
EXTENDS              : 11
FALSE                : 74
IF                   : 36 37 66
IN                   : 39 40
INT32                : 23
INTEGER_LITERAL      : 70
ISNULL               : 44
LBRACE               : 13 14 31
LET                  : 39 40
LOWER                : 51
LOWER_EQUAL          : 50
LPAR                 : 20 54 55 60 61 62
MINUS                : 43 46
NEW                  : 56
NOT                  : 42
OBJECT_IDENTIFIER    : 18 19 20 30 39 40 41 54 55 57
PLUS                 : 45
POW                  : 52
RBRACE               : 13 31
RPAR                 : 20 54 55 60 61 63
SELF                 : 58
SEMICOLON            : 18 19 32 66
STRING               : 25
THEN                 : 36 37 66
TIMES                : 47
TRUE                 : 73
TYPE_IDENTIFIER      : 8 11 12 22 56
UNIT                 : 26
WHILE                : 38
error                : 6 14 35 62 63 65 66
string_literal       : 71

Nonterminals, with rules where they appear

args                 : 54 55 67
block                : 9 20 64
boolean-literal      : 72
class                : 2 3
class-body           : 10 11
class-body-in        : 13 14 15 16
expression           : 7 19 32 33 36 36 37 37 37 38 38 39 40 40 41 42 43 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 55 61 62 63 66 66 67 68
field                : 4 15
formal               : 27 28
formals              : 20 28
inblock              : 31 32 35
init                 : 0
literal              : 59
method               : 5 16
new_class_scope      : 10 11
new_variables_scope  : 20 31
program              : 1 2
type                 : 18 19 20 30 39 40

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . program
    (2) program -> . program class
    (3) program -> . class
    (4) class -> . field
    (5) class -> . method
    (6) class -> . CLASS error
    (7) class -> . expression
    (8) class -> . TYPE_IDENTIFIER
    (9) class -> . block
    (10) class -> . CLASS new_class_scope class-body
    (11) class -> . CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body
    (18) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (19) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (20) method -> . OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    CLASS           shift and go to state 6
    TYPE_IDENTIFIER shift and go to state 9
    OBJECT_IDENTIFIER shift and go to state 11
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    LBRACE          shift and go to state 22
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    init                           shift and go to state 1
    program                        shift and go to state 2
    class                          shift and go to state 3
    field                          shift and go to state 4
    method                         shift and go to state 5
    expression                     shift and go to state 8
    block                          shift and go to state 10
    literal                        shift and go to state 21
    boolean-literal                shift and go to state 25

state 1

    (0) S' -> init .



state 2

    (1) init -> program .
    (2) program -> program . class
    (4) class -> . field
    (5) class -> . method
    (6) class -> . CLASS error
    (7) class -> . expression
    (8) class -> . TYPE_IDENTIFIER
    (9) class -> . block
    (10) class -> . CLASS new_class_scope class-body
    (11) class -> . CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body
    (18) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (19) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (20) method -> . OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    $end            reduce using rule 1 (init -> program .)
    CLASS           shift and go to state 6
    TYPE_IDENTIFIER shift and go to state 9
    OBJECT_IDENTIFIER shift and go to state 11
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    LBRACE          shift and go to state 22
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    class                          shift and go to state 28
    field                          shift and go to state 4
    method                         shift and go to state 5
    expression                     shift and go to state 8
    block                          shift and go to state 10
    literal                        shift and go to state 21
    boolean-literal                shift and go to state 25

state 3

    (3) program -> class .

    CLASS           reduce using rule 3 (program -> class .)
    TYPE_IDENTIFIER reduce using rule 3 (program -> class .)
    OBJECT_IDENTIFIER reduce using rule 3 (program -> class .)
    IF              reduce using rule 3 (program -> class .)
    WHILE           reduce using rule 3 (program -> class .)
    LET             reduce using rule 3 (program -> class .)
    NOT             reduce using rule 3 (program -> class .)
    MINUS           reduce using rule 3 (program -> class .)
    ISNULL          reduce using rule 3 (program -> class .)
    NEW             reduce using rule 3 (program -> class .)
    SELF            reduce using rule 3 (program -> class .)
    LPAR            reduce using rule 3 (program -> class .)
    error           reduce using rule 3 (program -> class .)
    LBRACE          reduce using rule 3 (program -> class .)
    INTEGER_LITERAL reduce using rule 3 (program -> class .)
    string_literal  reduce using rule 3 (program -> class .)
    TRUE            reduce using rule 3 (program -> class .)
    FALSE           reduce using rule 3 (program -> class .)
    $end            reduce using rule 3 (program -> class .)


state 4

    (4) class -> field .

    CLASS           reduce using rule 4 (class -> field .)
    TYPE_IDENTIFIER reduce using rule 4 (class -> field .)
    OBJECT_IDENTIFIER reduce using rule 4 (class -> field .)
    IF              reduce using rule 4 (class -> field .)
    WHILE           reduce using rule 4 (class -> field .)
    LET             reduce using rule 4 (class -> field .)
    NOT             reduce using rule 4 (class -> field .)
    MINUS           reduce using rule 4 (class -> field .)
    ISNULL          reduce using rule 4 (class -> field .)
    NEW             reduce using rule 4 (class -> field .)
    SELF            reduce using rule 4 (class -> field .)
    LPAR            reduce using rule 4 (class -> field .)
    error           reduce using rule 4 (class -> field .)
    LBRACE          reduce using rule 4 (class -> field .)
    INTEGER_LITERAL reduce using rule 4 (class -> field .)
    string_literal  reduce using rule 4 (class -> field .)
    TRUE            reduce using rule 4 (class -> field .)
    FALSE           reduce using rule 4 (class -> field .)
    $end            reduce using rule 4 (class -> field .)


state 5

    (5) class -> method .

    CLASS           reduce using rule 5 (class -> method .)
    TYPE_IDENTIFIER reduce using rule 5 (class -> method .)
    OBJECT_IDENTIFIER reduce using rule 5 (class -> method .)
    IF              reduce using rule 5 (class -> method .)
    WHILE           reduce using rule 5 (class -> method .)
    LET             reduce using rule 5 (class -> method .)
    NOT             reduce using rule 5 (class -> method .)
    MINUS           reduce using rule 5 (class -> method .)
    ISNULL          reduce using rule 5 (class -> method .)
    NEW             reduce using rule 5 (class -> method .)
    SELF            reduce using rule 5 (class -> method .)
    LPAR            reduce using rule 5 (class -> method .)
    error           reduce using rule 5 (class -> method .)
    LBRACE          reduce using rule 5 (class -> method .)
    INTEGER_LITERAL reduce using rule 5 (class -> method .)
    string_literal  reduce using rule 5 (class -> method .)
    TRUE            reduce using rule 5 (class -> method .)
    FALSE           reduce using rule 5 (class -> method .)
    $end            reduce using rule 5 (class -> method .)


state 6

    (6) class -> CLASS . error
    (10) class -> CLASS . new_class_scope class-body
    (11) class -> CLASS . new_class_scope EXTENDS TYPE_IDENTIFIER class-body
    (12) new_class_scope -> . TYPE_IDENTIFIER

    error           shift and go to state 29
    TYPE_IDENTIFIER shift and go to state 31

    new_class_scope                shift and go to state 30

state 7

    (63) expression -> error . expression RPAR
    (65) expression -> error .
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for OBJECT_IDENTIFIER resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for ISNULL resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for SELF resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for INTEGER_LITERAL resolved as shift
  ! shift/reduce conflict for string_literal resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    PLUS            reduce using rule 65 (expression -> error .)
    TIMES           reduce using rule 65 (expression -> error .)
    DIV             reduce using rule 65 (expression -> error .)
    EQUAL           reduce using rule 65 (expression -> error .)
    LOWER_EQUAL     reduce using rule 65 (expression -> error .)
    LOWER           reduce using rule 65 (expression -> error .)
    POW             reduce using rule 65 (expression -> error .)
    AND             reduce using rule 65 (expression -> error .)
    DOT             reduce using rule 65 (expression -> error .)
    CLASS           reduce using rule 65 (expression -> error .)
    TYPE_IDENTIFIER reduce using rule 65 (expression -> error .)
    $end            reduce using rule 65 (expression -> error .)
    RPAR            reduce using rule 65 (expression -> error .)
    THEN            reduce using rule 65 (expression -> error .)
    DO              reduce using rule 65 (expression -> error .)
    COMMA           reduce using rule 65 (expression -> error .)
    RBRACE          reduce using rule 65 (expression -> error .)
    SEMICOLON       reduce using rule 65 (expression -> error .)
    ELSE            reduce using rule 65 (expression -> error .)
    IN              reduce using rule 65 (expression -> error .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! MINUS           [ reduce using rule 65 (expression -> error .) ]
  ! OBJECT_IDENTIFIER [ reduce using rule 65 (expression -> error .) ]
  ! IF              [ reduce using rule 65 (expression -> error .) ]
  ! WHILE           [ reduce using rule 65 (expression -> error .) ]
  ! LET             [ reduce using rule 65 (expression -> error .) ]
  ! NOT             [ reduce using rule 65 (expression -> error .) ]
  ! ISNULL          [ reduce using rule 65 (expression -> error .) ]
  ! NEW             [ reduce using rule 65 (expression -> error .) ]
  ! SELF            [ reduce using rule 65 (expression -> error .) ]
  ! LPAR            [ reduce using rule 65 (expression -> error .) ]
  ! error           [ reduce using rule 65 (expression -> error .) ]
  ! LBRACE          [ reduce using rule 65 (expression -> error .) ]
  ! INTEGER_LITERAL [ reduce using rule 65 (expression -> error .) ]
  ! string_literal  [ reduce using rule 65 (expression -> error .) ]
  ! TRUE            [ reduce using rule 65 (expression -> error .) ]
  ! FALSE           [ reduce using rule 65 (expression -> error .) ]

    expression                     shift and go to state 32
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 8

    (7) class -> expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for MINUS resolved as shift
    CLASS           reduce using rule 7 (class -> expression .)
    TYPE_IDENTIFIER reduce using rule 7 (class -> expression .)
    OBJECT_IDENTIFIER reduce using rule 7 (class -> expression .)
    IF              reduce using rule 7 (class -> expression .)
    WHILE           reduce using rule 7 (class -> expression .)
    LET             reduce using rule 7 (class -> expression .)
    NOT             reduce using rule 7 (class -> expression .)
    ISNULL          reduce using rule 7 (class -> expression .)
    NEW             reduce using rule 7 (class -> expression .)
    SELF            reduce using rule 7 (class -> expression .)
    LPAR            reduce using rule 7 (class -> expression .)
    error           reduce using rule 7 (class -> expression .)
    LBRACE          reduce using rule 7 (class -> expression .)
    INTEGER_LITERAL reduce using rule 7 (class -> expression .)
    string_literal  reduce using rule 7 (class -> expression .)
    TRUE            reduce using rule 7 (class -> expression .)
    FALSE           reduce using rule 7 (class -> expression .)
    $end            reduce using rule 7 (class -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! MINUS           [ reduce using rule 7 (class -> expression .) ]


state 9

    (8) class -> TYPE_IDENTIFIER .

    CLASS           reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    TYPE_IDENTIFIER reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    OBJECT_IDENTIFIER reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    IF              reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    WHILE           reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    LET             reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    NOT             reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    MINUS           reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    ISNULL          reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    NEW             reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    SELF            reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    LPAR            reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    error           reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    string_literal  reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    TRUE            reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    FALSE           reduce using rule 8 (class -> TYPE_IDENTIFIER .)
    $end            reduce using rule 8 (class -> TYPE_IDENTIFIER .)


state 10

    (9) class -> block .
    (64) expression -> block .

  ! reduce/reduce conflict for MINUS resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for CLASS resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for TYPE_IDENTIFIER resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for OBJECT_IDENTIFIER resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for IF resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for WHILE resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for LET resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for NOT resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for ISNULL resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for NEW resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for SELF resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for LPAR resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for error resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for LBRACE resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for INTEGER_LITERAL resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for string_literal resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for TRUE resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for FALSE resolved using rule 9 (class -> block .)
  ! reduce/reduce conflict for $end resolved using rule 9 (class -> block .)
    CLASS           reduce using rule 9 (class -> block .)
    TYPE_IDENTIFIER reduce using rule 9 (class -> block .)
    OBJECT_IDENTIFIER reduce using rule 9 (class -> block .)
    IF              reduce using rule 9 (class -> block .)
    WHILE           reduce using rule 9 (class -> block .)
    LET             reduce using rule 9 (class -> block .)
    NOT             reduce using rule 9 (class -> block .)
    MINUS           reduce using rule 9 (class -> block .)
    ISNULL          reduce using rule 9 (class -> block .)
    NEW             reduce using rule 9 (class -> block .)
    SELF            reduce using rule 9 (class -> block .)
    LPAR            reduce using rule 9 (class -> block .)
    error           reduce using rule 9 (class -> block .)
    LBRACE          reduce using rule 9 (class -> block .)
    INTEGER_LITERAL reduce using rule 9 (class -> block .)
    string_literal  reduce using rule 9 (class -> block .)
    TRUE            reduce using rule 9 (class -> block .)
    FALSE           reduce using rule 9 (class -> block .)
    $end            reduce using rule 9 (class -> block .)
    PLUS            reduce using rule 64 (expression -> block .)
    TIMES           reduce using rule 64 (expression -> block .)
    DIV             reduce using rule 64 (expression -> block .)
    EQUAL           reduce using rule 64 (expression -> block .)
    LOWER_EQUAL     reduce using rule 64 (expression -> block .)
    LOWER           reduce using rule 64 (expression -> block .)
    POW             reduce using rule 64 (expression -> block .)
    AND             reduce using rule 64 (expression -> block .)
    DOT             reduce using rule 64 (expression -> block .)

  ! MINUS           [ reduce using rule 64 (expression -> block .) ]
  ! CLASS           [ reduce using rule 64 (expression -> block .) ]
  ! TYPE_IDENTIFIER [ reduce using rule 64 (expression -> block .) ]
  ! OBJECT_IDENTIFIER [ reduce using rule 64 (expression -> block .) ]
  ! IF              [ reduce using rule 64 (expression -> block .) ]
  ! WHILE           [ reduce using rule 64 (expression -> block .) ]
  ! LET             [ reduce using rule 64 (expression -> block .) ]
  ! NOT             [ reduce using rule 64 (expression -> block .) ]
  ! ISNULL          [ reduce using rule 64 (expression -> block .) ]
  ! NEW             [ reduce using rule 64 (expression -> block .) ]
  ! SELF            [ reduce using rule 64 (expression -> block .) ]
  ! LPAR            [ reduce using rule 64 (expression -> block .) ]
  ! error           [ reduce using rule 64 (expression -> block .) ]
  ! LBRACE          [ reduce using rule 64 (expression -> block .) ]
  ! INTEGER_LITERAL [ reduce using rule 64 (expression -> block .) ]
  ! string_literal  [ reduce using rule 64 (expression -> block .) ]
  ! TRUE            [ reduce using rule 64 (expression -> block .) ]
  ! FALSE           [ reduce using rule 64 (expression -> block .) ]
  ! $end            [ reduce using rule 64 (expression -> block .) ]


state 11

    (18) field -> OBJECT_IDENTIFIER . COLON type SEMICOLON
    (19) field -> OBJECT_IDENTIFIER . COLON type ASSIGN expression SEMICOLON
    (20) method -> OBJECT_IDENTIFIER . new_variables_scope LPAR formals RPAR COLON type block
    (41) expression -> OBJECT_IDENTIFIER . ASSIGN expression
    (54) expression -> OBJECT_IDENTIFIER . LPAR args RPAR
    (57) expression -> OBJECT_IDENTIFIER .
    (21) new_variables_scope -> .

  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
    COLON           shift and go to state 45
    ASSIGN          shift and go to state 46
    LPAR            shift and go to state 48
    PLUS            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    MINUS           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TIMES           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    DIV             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    EQUAL           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LOWER           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    POW             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    AND             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    DOT             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    CLASS           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TYPE_IDENTIFIER reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    OBJECT_IDENTIFIER reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    IF              reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    WHILE           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LET             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    NOT             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    ISNULL          reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    NEW             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    SELF            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    error           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LBRACE          reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    string_literal  reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TRUE            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    FALSE           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    $end            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)

  ! LPAR            [ reduce using rule 57 (expression -> OBJECT_IDENTIFIER .) ]
  ! LPAR            [ reduce using rule 21 (new_variables_scope -> .) ]

    new_variables_scope            shift and go to state 47

state 12

    (60) expression -> LPAR . RPAR
    (61) expression -> LPAR . expression RPAR
    (62) expression -> LPAR . expression error
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    RPAR            shift and go to state 49
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 50
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 13

    (36) expression -> IF . expression THEN expression
    (37) expression -> IF . expression THEN expression ELSE expression
    (66) expression -> IF . expression THEN expression SEMICOLON error
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 51
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 14

    (38) expression -> WHILE . expression DO expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 52
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 15

    (39) expression -> LET . OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> LET . OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression

    OBJECT_IDENTIFIER shift and go to state 53


state 16

    (42) expression -> NOT . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 54
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 17

    (43) expression -> MINUS . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 55
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 18

    (44) expression -> ISNULL . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 56
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 19

    (56) expression -> NEW . TYPE_IDENTIFIER

    TYPE_IDENTIFIER shift and go to state 57


state 20

    (58) expression -> SELF .

    PLUS            reduce using rule 58 (expression -> SELF .)
    MINUS           reduce using rule 58 (expression -> SELF .)
    TIMES           reduce using rule 58 (expression -> SELF .)
    DIV             reduce using rule 58 (expression -> SELF .)
    EQUAL           reduce using rule 58 (expression -> SELF .)
    LOWER_EQUAL     reduce using rule 58 (expression -> SELF .)
    LOWER           reduce using rule 58 (expression -> SELF .)
    POW             reduce using rule 58 (expression -> SELF .)
    AND             reduce using rule 58 (expression -> SELF .)
    DOT             reduce using rule 58 (expression -> SELF .)
    CLASS           reduce using rule 58 (expression -> SELF .)
    TYPE_IDENTIFIER reduce using rule 58 (expression -> SELF .)
    OBJECT_IDENTIFIER reduce using rule 58 (expression -> SELF .)
    IF              reduce using rule 58 (expression -> SELF .)
    WHILE           reduce using rule 58 (expression -> SELF .)
    LET             reduce using rule 58 (expression -> SELF .)
    NOT             reduce using rule 58 (expression -> SELF .)
    ISNULL          reduce using rule 58 (expression -> SELF .)
    NEW             reduce using rule 58 (expression -> SELF .)
    SELF            reduce using rule 58 (expression -> SELF .)
    LPAR            reduce using rule 58 (expression -> SELF .)
    error           reduce using rule 58 (expression -> SELF .)
    LBRACE          reduce using rule 58 (expression -> SELF .)
    INTEGER_LITERAL reduce using rule 58 (expression -> SELF .)
    string_literal  reduce using rule 58 (expression -> SELF .)
    TRUE            reduce using rule 58 (expression -> SELF .)
    FALSE           reduce using rule 58 (expression -> SELF .)
    $end            reduce using rule 58 (expression -> SELF .)
    RPAR            reduce using rule 58 (expression -> SELF .)
    THEN            reduce using rule 58 (expression -> SELF .)
    DO              reduce using rule 58 (expression -> SELF .)
    COMMA           reduce using rule 58 (expression -> SELF .)
    RBRACE          reduce using rule 58 (expression -> SELF .)
    SEMICOLON       reduce using rule 58 (expression -> SELF .)
    ELSE            reduce using rule 58 (expression -> SELF .)
    IN              reduce using rule 58 (expression -> SELF .)


state 21

    (59) expression -> literal .

    PLUS            reduce using rule 59 (expression -> literal .)
    MINUS           reduce using rule 59 (expression -> literal .)
    TIMES           reduce using rule 59 (expression -> literal .)
    DIV             reduce using rule 59 (expression -> literal .)
    EQUAL           reduce using rule 59 (expression -> literal .)
    LOWER_EQUAL     reduce using rule 59 (expression -> literal .)
    LOWER           reduce using rule 59 (expression -> literal .)
    POW             reduce using rule 59 (expression -> literal .)
    AND             reduce using rule 59 (expression -> literal .)
    DOT             reduce using rule 59 (expression -> literal .)
    CLASS           reduce using rule 59 (expression -> literal .)
    TYPE_IDENTIFIER reduce using rule 59 (expression -> literal .)
    OBJECT_IDENTIFIER reduce using rule 59 (expression -> literal .)
    IF              reduce using rule 59 (expression -> literal .)
    WHILE           reduce using rule 59 (expression -> literal .)
    LET             reduce using rule 59 (expression -> literal .)
    NOT             reduce using rule 59 (expression -> literal .)
    ISNULL          reduce using rule 59 (expression -> literal .)
    NEW             reduce using rule 59 (expression -> literal .)
    SELF            reduce using rule 59 (expression -> literal .)
    LPAR            reduce using rule 59 (expression -> literal .)
    error           reduce using rule 59 (expression -> literal .)
    LBRACE          reduce using rule 59 (expression -> literal .)
    INTEGER_LITERAL reduce using rule 59 (expression -> literal .)
    string_literal  reduce using rule 59 (expression -> literal .)
    TRUE            reduce using rule 59 (expression -> literal .)
    FALSE           reduce using rule 59 (expression -> literal .)
    $end            reduce using rule 59 (expression -> literal .)
    RPAR            reduce using rule 59 (expression -> literal .)
    THEN            reduce using rule 59 (expression -> literal .)
    DO              reduce using rule 59 (expression -> literal .)
    COMMA           reduce using rule 59 (expression -> literal .)
    RBRACE          reduce using rule 59 (expression -> literal .)
    SEMICOLON       reduce using rule 59 (expression -> literal .)
    ELSE            reduce using rule 59 (expression -> literal .)
    IN              reduce using rule 59 (expression -> literal .)


state 22

    (31) block -> LBRACE . new_variables_scope inblock RBRACE
    (21) new_variables_scope -> .

    IF              reduce using rule 21 (new_variables_scope -> .)
    WHILE           reduce using rule 21 (new_variables_scope -> .)
    LET             reduce using rule 21 (new_variables_scope -> .)
    OBJECT_IDENTIFIER reduce using rule 21 (new_variables_scope -> .)
    NOT             reduce using rule 21 (new_variables_scope -> .)
    MINUS           reduce using rule 21 (new_variables_scope -> .)
    ISNULL          reduce using rule 21 (new_variables_scope -> .)
    NEW             reduce using rule 21 (new_variables_scope -> .)
    SELF            reduce using rule 21 (new_variables_scope -> .)
    LPAR            reduce using rule 21 (new_variables_scope -> .)
    error           reduce using rule 21 (new_variables_scope -> .)
    INTEGER_LITERAL reduce using rule 21 (new_variables_scope -> .)
    string_literal  reduce using rule 21 (new_variables_scope -> .)
    LBRACE          reduce using rule 21 (new_variables_scope -> .)
    TRUE            reduce using rule 21 (new_variables_scope -> .)
    FALSE           reduce using rule 21 (new_variables_scope -> .)
    RBRACE          reduce using rule 21 (new_variables_scope -> .)
    SEMICOLON       reduce using rule 21 (new_variables_scope -> .)

    new_variables_scope            shift and go to state 58

state 23

    (70) literal -> INTEGER_LITERAL .

    PLUS            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    MINUS           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    TIMES           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    DIV             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    LOWER_EQUAL     reduce using rule 70 (literal -> INTEGER_LITERAL .)
    LOWER           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    POW             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    AND             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    DOT             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    CLASS           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    TYPE_IDENTIFIER reduce using rule 70 (literal -> INTEGER_LITERAL .)
    OBJECT_IDENTIFIER reduce using rule 70 (literal -> INTEGER_LITERAL .)
    IF              reduce using rule 70 (literal -> INTEGER_LITERAL .)
    WHILE           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    LET             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    NOT             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    ISNULL          reduce using rule 70 (literal -> INTEGER_LITERAL .)
    NEW             reduce using rule 70 (literal -> INTEGER_LITERAL .)
    SELF            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    LPAR            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    error           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    LBRACE          reduce using rule 70 (literal -> INTEGER_LITERAL .)
    INTEGER_LITERAL reduce using rule 70 (literal -> INTEGER_LITERAL .)
    string_literal  reduce using rule 70 (literal -> INTEGER_LITERAL .)
    TRUE            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    FALSE           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    $end            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    RPAR            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    THEN            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    DO              reduce using rule 70 (literal -> INTEGER_LITERAL .)
    COMMA           reduce using rule 70 (literal -> INTEGER_LITERAL .)
    RBRACE          reduce using rule 70 (literal -> INTEGER_LITERAL .)
    SEMICOLON       reduce using rule 70 (literal -> INTEGER_LITERAL .)
    ELSE            reduce using rule 70 (literal -> INTEGER_LITERAL .)
    IN              reduce using rule 70 (literal -> INTEGER_LITERAL .)


state 24

    (71) literal -> string_literal .

    PLUS            reduce using rule 71 (literal -> string_literal .)
    MINUS           reduce using rule 71 (literal -> string_literal .)
    TIMES           reduce using rule 71 (literal -> string_literal .)
    DIV             reduce using rule 71 (literal -> string_literal .)
    EQUAL           reduce using rule 71 (literal -> string_literal .)
    LOWER_EQUAL     reduce using rule 71 (literal -> string_literal .)
    LOWER           reduce using rule 71 (literal -> string_literal .)
    POW             reduce using rule 71 (literal -> string_literal .)
    AND             reduce using rule 71 (literal -> string_literal .)
    DOT             reduce using rule 71 (literal -> string_literal .)
    CLASS           reduce using rule 71 (literal -> string_literal .)
    TYPE_IDENTIFIER reduce using rule 71 (literal -> string_literal .)
    OBJECT_IDENTIFIER reduce using rule 71 (literal -> string_literal .)
    IF              reduce using rule 71 (literal -> string_literal .)
    WHILE           reduce using rule 71 (literal -> string_literal .)
    LET             reduce using rule 71 (literal -> string_literal .)
    NOT             reduce using rule 71 (literal -> string_literal .)
    ISNULL          reduce using rule 71 (literal -> string_literal .)
    NEW             reduce using rule 71 (literal -> string_literal .)
    SELF            reduce using rule 71 (literal -> string_literal .)
    LPAR            reduce using rule 71 (literal -> string_literal .)
    error           reduce using rule 71 (literal -> string_literal .)
    LBRACE          reduce using rule 71 (literal -> string_literal .)
    INTEGER_LITERAL reduce using rule 71 (literal -> string_literal .)
    string_literal  reduce using rule 71 (literal -> string_literal .)
    TRUE            reduce using rule 71 (literal -> string_literal .)
    FALSE           reduce using rule 71 (literal -> string_literal .)
    $end            reduce using rule 71 (literal -> string_literal .)
    RPAR            reduce using rule 71 (literal -> string_literal .)
    THEN            reduce using rule 71 (literal -> string_literal .)
    DO              reduce using rule 71 (literal -> string_literal .)
    COMMA           reduce using rule 71 (literal -> string_literal .)
    RBRACE          reduce using rule 71 (literal -> string_literal .)
    SEMICOLON       reduce using rule 71 (literal -> string_literal .)
    ELSE            reduce using rule 71 (literal -> string_literal .)
    IN              reduce using rule 71 (literal -> string_literal .)


state 25

    (72) literal -> boolean-literal .

    PLUS            reduce using rule 72 (literal -> boolean-literal .)
    MINUS           reduce using rule 72 (literal -> boolean-literal .)
    TIMES           reduce using rule 72 (literal -> boolean-literal .)
    DIV             reduce using rule 72 (literal -> boolean-literal .)
    EQUAL           reduce using rule 72 (literal -> boolean-literal .)
    LOWER_EQUAL     reduce using rule 72 (literal -> boolean-literal .)
    LOWER           reduce using rule 72 (literal -> boolean-literal .)
    POW             reduce using rule 72 (literal -> boolean-literal .)
    AND             reduce using rule 72 (literal -> boolean-literal .)
    DOT             reduce using rule 72 (literal -> boolean-literal .)
    CLASS           reduce using rule 72 (literal -> boolean-literal .)
    TYPE_IDENTIFIER reduce using rule 72 (literal -> boolean-literal .)
    OBJECT_IDENTIFIER reduce using rule 72 (literal -> boolean-literal .)
    IF              reduce using rule 72 (literal -> boolean-literal .)
    WHILE           reduce using rule 72 (literal -> boolean-literal .)
    LET             reduce using rule 72 (literal -> boolean-literal .)
    NOT             reduce using rule 72 (literal -> boolean-literal .)
    ISNULL          reduce using rule 72 (literal -> boolean-literal .)
    NEW             reduce using rule 72 (literal -> boolean-literal .)
    SELF            reduce using rule 72 (literal -> boolean-literal .)
    LPAR            reduce using rule 72 (literal -> boolean-literal .)
    error           reduce using rule 72 (literal -> boolean-literal .)
    LBRACE          reduce using rule 72 (literal -> boolean-literal .)
    INTEGER_LITERAL reduce using rule 72 (literal -> boolean-literal .)
    string_literal  reduce using rule 72 (literal -> boolean-literal .)
    TRUE            reduce using rule 72 (literal -> boolean-literal .)
    FALSE           reduce using rule 72 (literal -> boolean-literal .)
    $end            reduce using rule 72 (literal -> boolean-literal .)
    RPAR            reduce using rule 72 (literal -> boolean-literal .)
    THEN            reduce using rule 72 (literal -> boolean-literal .)
    DO              reduce using rule 72 (literal -> boolean-literal .)
    COMMA           reduce using rule 72 (literal -> boolean-literal .)
    RBRACE          reduce using rule 72 (literal -> boolean-literal .)
    SEMICOLON       reduce using rule 72 (literal -> boolean-literal .)
    ELSE            reduce using rule 72 (literal -> boolean-literal .)
    IN              reduce using rule 72 (literal -> boolean-literal .)


state 26

    (73) boolean-literal -> TRUE .

    PLUS            reduce using rule 73 (boolean-literal -> TRUE .)
    MINUS           reduce using rule 73 (boolean-literal -> TRUE .)
    TIMES           reduce using rule 73 (boolean-literal -> TRUE .)
    DIV             reduce using rule 73 (boolean-literal -> TRUE .)
    EQUAL           reduce using rule 73 (boolean-literal -> TRUE .)
    LOWER_EQUAL     reduce using rule 73 (boolean-literal -> TRUE .)
    LOWER           reduce using rule 73 (boolean-literal -> TRUE .)
    POW             reduce using rule 73 (boolean-literal -> TRUE .)
    AND             reduce using rule 73 (boolean-literal -> TRUE .)
    DOT             reduce using rule 73 (boolean-literal -> TRUE .)
    CLASS           reduce using rule 73 (boolean-literal -> TRUE .)
    TYPE_IDENTIFIER reduce using rule 73 (boolean-literal -> TRUE .)
    OBJECT_IDENTIFIER reduce using rule 73 (boolean-literal -> TRUE .)
    IF              reduce using rule 73 (boolean-literal -> TRUE .)
    WHILE           reduce using rule 73 (boolean-literal -> TRUE .)
    LET             reduce using rule 73 (boolean-literal -> TRUE .)
    NOT             reduce using rule 73 (boolean-literal -> TRUE .)
    ISNULL          reduce using rule 73 (boolean-literal -> TRUE .)
    NEW             reduce using rule 73 (boolean-literal -> TRUE .)
    SELF            reduce using rule 73 (boolean-literal -> TRUE .)
    LPAR            reduce using rule 73 (boolean-literal -> TRUE .)
    error           reduce using rule 73 (boolean-literal -> TRUE .)
    LBRACE          reduce using rule 73 (boolean-literal -> TRUE .)
    INTEGER_LITERAL reduce using rule 73 (boolean-literal -> TRUE .)
    string_literal  reduce using rule 73 (boolean-literal -> TRUE .)
    TRUE            reduce using rule 73 (boolean-literal -> TRUE .)
    FALSE           reduce using rule 73 (boolean-literal -> TRUE .)
    $end            reduce using rule 73 (boolean-literal -> TRUE .)
    RPAR            reduce using rule 73 (boolean-literal -> TRUE .)
    THEN            reduce using rule 73 (boolean-literal -> TRUE .)
    DO              reduce using rule 73 (boolean-literal -> TRUE .)
    COMMA           reduce using rule 73 (boolean-literal -> TRUE .)
    RBRACE          reduce using rule 73 (boolean-literal -> TRUE .)
    SEMICOLON       reduce using rule 73 (boolean-literal -> TRUE .)
    ELSE            reduce using rule 73 (boolean-literal -> TRUE .)
    IN              reduce using rule 73 (boolean-literal -> TRUE .)


state 27

    (74) boolean-literal -> FALSE .

    PLUS            reduce using rule 74 (boolean-literal -> FALSE .)
    MINUS           reduce using rule 74 (boolean-literal -> FALSE .)
    TIMES           reduce using rule 74 (boolean-literal -> FALSE .)
    DIV             reduce using rule 74 (boolean-literal -> FALSE .)
    EQUAL           reduce using rule 74 (boolean-literal -> FALSE .)
    LOWER_EQUAL     reduce using rule 74 (boolean-literal -> FALSE .)
    LOWER           reduce using rule 74 (boolean-literal -> FALSE .)
    POW             reduce using rule 74 (boolean-literal -> FALSE .)
    AND             reduce using rule 74 (boolean-literal -> FALSE .)
    DOT             reduce using rule 74 (boolean-literal -> FALSE .)
    CLASS           reduce using rule 74 (boolean-literal -> FALSE .)
    TYPE_IDENTIFIER reduce using rule 74 (boolean-literal -> FALSE .)
    OBJECT_IDENTIFIER reduce using rule 74 (boolean-literal -> FALSE .)
    IF              reduce using rule 74 (boolean-literal -> FALSE .)
    WHILE           reduce using rule 74 (boolean-literal -> FALSE .)
    LET             reduce using rule 74 (boolean-literal -> FALSE .)
    NOT             reduce using rule 74 (boolean-literal -> FALSE .)
    ISNULL          reduce using rule 74 (boolean-literal -> FALSE .)
    NEW             reduce using rule 74 (boolean-literal -> FALSE .)
    SELF            reduce using rule 74 (boolean-literal -> FALSE .)
    LPAR            reduce using rule 74 (boolean-literal -> FALSE .)
    error           reduce using rule 74 (boolean-literal -> FALSE .)
    LBRACE          reduce using rule 74 (boolean-literal -> FALSE .)
    INTEGER_LITERAL reduce using rule 74 (boolean-literal -> FALSE .)
    string_literal  reduce using rule 74 (boolean-literal -> FALSE .)
    TRUE            reduce using rule 74 (boolean-literal -> FALSE .)
    FALSE           reduce using rule 74 (boolean-literal -> FALSE .)
    $end            reduce using rule 74 (boolean-literal -> FALSE .)
    RPAR            reduce using rule 74 (boolean-literal -> FALSE .)
    THEN            reduce using rule 74 (boolean-literal -> FALSE .)
    DO              reduce using rule 74 (boolean-literal -> FALSE .)
    COMMA           reduce using rule 74 (boolean-literal -> FALSE .)
    RBRACE          reduce using rule 74 (boolean-literal -> FALSE .)
    SEMICOLON       reduce using rule 74 (boolean-literal -> FALSE .)
    ELSE            reduce using rule 74 (boolean-literal -> FALSE .)
    IN              reduce using rule 74 (boolean-literal -> FALSE .)


state 28

    (2) program -> program class .

    CLASS           reduce using rule 2 (program -> program class .)
    TYPE_IDENTIFIER reduce using rule 2 (program -> program class .)
    OBJECT_IDENTIFIER reduce using rule 2 (program -> program class .)
    IF              reduce using rule 2 (program -> program class .)
    WHILE           reduce using rule 2 (program -> program class .)
    LET             reduce using rule 2 (program -> program class .)
    NOT             reduce using rule 2 (program -> program class .)
    MINUS           reduce using rule 2 (program -> program class .)
    ISNULL          reduce using rule 2 (program -> program class .)
    NEW             reduce using rule 2 (program -> program class .)
    SELF            reduce using rule 2 (program -> program class .)
    LPAR            reduce using rule 2 (program -> program class .)
    error           reduce using rule 2 (program -> program class .)
    LBRACE          reduce using rule 2 (program -> program class .)
    INTEGER_LITERAL reduce using rule 2 (program -> program class .)
    string_literal  reduce using rule 2 (program -> program class .)
    TRUE            reduce using rule 2 (program -> program class .)
    FALSE           reduce using rule 2 (program -> program class .)
    $end            reduce using rule 2 (program -> program class .)


state 29

    (6) class -> CLASS error .

    CLASS           reduce using rule 6 (class -> CLASS error .)
    TYPE_IDENTIFIER reduce using rule 6 (class -> CLASS error .)
    OBJECT_IDENTIFIER reduce using rule 6 (class -> CLASS error .)
    IF              reduce using rule 6 (class -> CLASS error .)
    WHILE           reduce using rule 6 (class -> CLASS error .)
    LET             reduce using rule 6 (class -> CLASS error .)
    NOT             reduce using rule 6 (class -> CLASS error .)
    MINUS           reduce using rule 6 (class -> CLASS error .)
    ISNULL          reduce using rule 6 (class -> CLASS error .)
    NEW             reduce using rule 6 (class -> CLASS error .)
    SELF            reduce using rule 6 (class -> CLASS error .)
    LPAR            reduce using rule 6 (class -> CLASS error .)
    error           reduce using rule 6 (class -> CLASS error .)
    LBRACE          reduce using rule 6 (class -> CLASS error .)
    INTEGER_LITERAL reduce using rule 6 (class -> CLASS error .)
    string_literal  reduce using rule 6 (class -> CLASS error .)
    TRUE            reduce using rule 6 (class -> CLASS error .)
    FALSE           reduce using rule 6 (class -> CLASS error .)
    $end            reduce using rule 6 (class -> CLASS error .)


state 30

    (10) class -> CLASS new_class_scope . class-body
    (11) class -> CLASS new_class_scope . EXTENDS TYPE_IDENTIFIER class-body
    (13) class-body -> . LBRACE class-body-in RBRACE
    (14) class-body -> . LBRACE class-body-in error

    EXTENDS         shift and go to state 60
    LBRACE          shift and go to state 61

    class-body                     shift and go to state 59

state 31

    (12) new_class_scope -> TYPE_IDENTIFIER .

    EXTENDS         reduce using rule 12 (new_class_scope -> TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 12 (new_class_scope -> TYPE_IDENTIFIER .)


state 32

    (63) expression -> error expression . RPAR
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            shift and go to state 62
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 33

    (41) expression -> OBJECT_IDENTIFIER . ASSIGN expression
    (54) expression -> OBJECT_IDENTIFIER . LPAR args RPAR
    (57) expression -> OBJECT_IDENTIFIER .

  ! shift/reduce conflict for LPAR resolved as shift
    ASSIGN          shift and go to state 46
    LPAR            shift and go to state 48
    RPAR            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    PLUS            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    MINUS           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TIMES           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    DIV             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    EQUAL           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LOWER           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    POW             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    AND             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    DOT             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    error           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    THEN            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    DO              reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    CLASS           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TYPE_IDENTIFIER reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    OBJECT_IDENTIFIER reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    IF              reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    WHILE           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LET             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    NOT             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    ISNULL          reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    NEW             reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    SELF            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    LBRACE          reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    string_literal  reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    TRUE            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    FALSE           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    $end            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    COMMA           reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    RBRACE          reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    SEMICOLON       reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    ELSE            reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)
    IN              reduce using rule 57 (expression -> OBJECT_IDENTIFIER .)

  ! LPAR            [ reduce using rule 57 (expression -> OBJECT_IDENTIFIER .) ]


state 34

    (64) expression -> block .

    RPAR            reduce using rule 64 (expression -> block .)
    PLUS            reduce using rule 64 (expression -> block .)
    MINUS           reduce using rule 64 (expression -> block .)
    TIMES           reduce using rule 64 (expression -> block .)
    DIV             reduce using rule 64 (expression -> block .)
    EQUAL           reduce using rule 64 (expression -> block .)
    LOWER_EQUAL     reduce using rule 64 (expression -> block .)
    LOWER           reduce using rule 64 (expression -> block .)
    POW             reduce using rule 64 (expression -> block .)
    AND             reduce using rule 64 (expression -> block .)
    DOT             reduce using rule 64 (expression -> block .)
    error           reduce using rule 64 (expression -> block .)
    THEN            reduce using rule 64 (expression -> block .)
    DO              reduce using rule 64 (expression -> block .)
    CLASS           reduce using rule 64 (expression -> block .)
    TYPE_IDENTIFIER reduce using rule 64 (expression -> block .)
    OBJECT_IDENTIFIER reduce using rule 64 (expression -> block .)
    IF              reduce using rule 64 (expression -> block .)
    WHILE           reduce using rule 64 (expression -> block .)
    LET             reduce using rule 64 (expression -> block .)
    NOT             reduce using rule 64 (expression -> block .)
    ISNULL          reduce using rule 64 (expression -> block .)
    NEW             reduce using rule 64 (expression -> block .)
    SELF            reduce using rule 64 (expression -> block .)
    LPAR            reduce using rule 64 (expression -> block .)
    LBRACE          reduce using rule 64 (expression -> block .)
    INTEGER_LITERAL reduce using rule 64 (expression -> block .)
    string_literal  reduce using rule 64 (expression -> block .)
    TRUE            reduce using rule 64 (expression -> block .)
    FALSE           reduce using rule 64 (expression -> block .)
    $end            reduce using rule 64 (expression -> block .)
    COMMA           reduce using rule 64 (expression -> block .)
    RBRACE          reduce using rule 64 (expression -> block .)
    SEMICOLON       reduce using rule 64 (expression -> block .)
    ELSE            reduce using rule 64 (expression -> block .)
    IN              reduce using rule 64 (expression -> block .)


state 35

    (45) expression -> expression PLUS . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 63
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 36

    (46) expression -> expression MINUS . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 64
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 37

    (47) expression -> expression TIMES . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 65
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 38

    (48) expression -> expression DIV . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 66
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 39

    (49) expression -> expression EQUAL . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 67
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 40

    (50) expression -> expression LOWER_EQUAL . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 68
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 41

    (51) expression -> expression LOWER . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 69
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 42

    (52) expression -> expression POW . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 70
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 43

    (53) expression -> expression AND . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 71
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 44

    (55) expression -> expression DOT . OBJECT_IDENTIFIER LPAR args RPAR

    OBJECT_IDENTIFIER shift and go to state 72


state 45

    (18) field -> OBJECT_IDENTIFIER COLON . type SEMICOLON
    (19) field -> OBJECT_IDENTIFIER COLON . type ASSIGN expression SEMICOLON
    (22) type -> . TYPE_IDENTIFIER
    (23) type -> . INT32
    (24) type -> . BOOL
    (25) type -> . STRING
    (26) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 74
    INT32           shift and go to state 75
    BOOL            shift and go to state 76
    STRING          shift and go to state 77
    UNIT            shift and go to state 78

    type                           shift and go to state 73

state 46

    (41) expression -> OBJECT_IDENTIFIER ASSIGN . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 79
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 47

    (20) method -> OBJECT_IDENTIFIER new_variables_scope . LPAR formals RPAR COLON type block

    LPAR            shift and go to state 80


state 48

    (54) expression -> OBJECT_IDENTIFIER LPAR . args RPAR
    (67) args -> . args COMMA expression
    (68) args -> . expression
    (69) args -> .
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    RPAR            reduce using rule 69 (args -> .)
    COMMA           reduce using rule 69 (args -> .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    args                           shift and go to state 81
    expression                     shift and go to state 82
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 49

    (60) expression -> LPAR RPAR .

    PLUS            reduce using rule 60 (expression -> LPAR RPAR .)
    MINUS           reduce using rule 60 (expression -> LPAR RPAR .)
    TIMES           reduce using rule 60 (expression -> LPAR RPAR .)
    DIV             reduce using rule 60 (expression -> LPAR RPAR .)
    EQUAL           reduce using rule 60 (expression -> LPAR RPAR .)
    LOWER_EQUAL     reduce using rule 60 (expression -> LPAR RPAR .)
    LOWER           reduce using rule 60 (expression -> LPAR RPAR .)
    POW             reduce using rule 60 (expression -> LPAR RPAR .)
    AND             reduce using rule 60 (expression -> LPAR RPAR .)
    DOT             reduce using rule 60 (expression -> LPAR RPAR .)
    CLASS           reduce using rule 60 (expression -> LPAR RPAR .)
    TYPE_IDENTIFIER reduce using rule 60 (expression -> LPAR RPAR .)
    OBJECT_IDENTIFIER reduce using rule 60 (expression -> LPAR RPAR .)
    IF              reduce using rule 60 (expression -> LPAR RPAR .)
    WHILE           reduce using rule 60 (expression -> LPAR RPAR .)
    LET             reduce using rule 60 (expression -> LPAR RPAR .)
    NOT             reduce using rule 60 (expression -> LPAR RPAR .)
    ISNULL          reduce using rule 60 (expression -> LPAR RPAR .)
    NEW             reduce using rule 60 (expression -> LPAR RPAR .)
    SELF            reduce using rule 60 (expression -> LPAR RPAR .)
    LPAR            reduce using rule 60 (expression -> LPAR RPAR .)
    error           reduce using rule 60 (expression -> LPAR RPAR .)
    LBRACE          reduce using rule 60 (expression -> LPAR RPAR .)
    INTEGER_LITERAL reduce using rule 60 (expression -> LPAR RPAR .)
    string_literal  reduce using rule 60 (expression -> LPAR RPAR .)
    TRUE            reduce using rule 60 (expression -> LPAR RPAR .)
    FALSE           reduce using rule 60 (expression -> LPAR RPAR .)
    $end            reduce using rule 60 (expression -> LPAR RPAR .)
    RPAR            reduce using rule 60 (expression -> LPAR RPAR .)
    THEN            reduce using rule 60 (expression -> LPAR RPAR .)
    DO              reduce using rule 60 (expression -> LPAR RPAR .)
    COMMA           reduce using rule 60 (expression -> LPAR RPAR .)
    RBRACE          reduce using rule 60 (expression -> LPAR RPAR .)
    SEMICOLON       reduce using rule 60 (expression -> LPAR RPAR .)
    ELSE            reduce using rule 60 (expression -> LPAR RPAR .)
    IN              reduce using rule 60 (expression -> LPAR RPAR .)


state 50

    (61) expression -> LPAR expression . RPAR
    (62) expression -> LPAR expression . error
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            shift and go to state 83
    error           shift and go to state 84
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 51

    (36) expression -> IF expression . THEN expression
    (37) expression -> IF expression . THEN expression ELSE expression
    (66) expression -> IF expression . THEN expression SEMICOLON error
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    THEN            shift and go to state 85
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 52

    (38) expression -> WHILE expression . DO expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    DO              shift and go to state 86
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 53

    (39) expression -> LET OBJECT_IDENTIFIER . COLON type IN expression
    (40) expression -> LET OBJECT_IDENTIFIER . COLON type ASSIGN expression IN expression

    COLON           shift and go to state 87


state 54

    (42) expression -> NOT expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    AND             reduce using rule 42 (expression -> NOT expression .)
    CLASS           reduce using rule 42 (expression -> NOT expression .)
    TYPE_IDENTIFIER reduce using rule 42 (expression -> NOT expression .)
    OBJECT_IDENTIFIER reduce using rule 42 (expression -> NOT expression .)
    IF              reduce using rule 42 (expression -> NOT expression .)
    WHILE           reduce using rule 42 (expression -> NOT expression .)
    LET             reduce using rule 42 (expression -> NOT expression .)
    NOT             reduce using rule 42 (expression -> NOT expression .)
    ISNULL          reduce using rule 42 (expression -> NOT expression .)
    NEW             reduce using rule 42 (expression -> NOT expression .)
    SELF            reduce using rule 42 (expression -> NOT expression .)
    LPAR            reduce using rule 42 (expression -> NOT expression .)
    error           reduce using rule 42 (expression -> NOT expression .)
    LBRACE          reduce using rule 42 (expression -> NOT expression .)
    INTEGER_LITERAL reduce using rule 42 (expression -> NOT expression .)
    string_literal  reduce using rule 42 (expression -> NOT expression .)
    TRUE            reduce using rule 42 (expression -> NOT expression .)
    FALSE           reduce using rule 42 (expression -> NOT expression .)
    $end            reduce using rule 42 (expression -> NOT expression .)
    RPAR            reduce using rule 42 (expression -> NOT expression .)
    THEN            reduce using rule 42 (expression -> NOT expression .)
    DO              reduce using rule 42 (expression -> NOT expression .)
    COMMA           reduce using rule 42 (expression -> NOT expression .)
    RBRACE          reduce using rule 42 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 42 (expression -> NOT expression .)
    ELSE            reduce using rule 42 (expression -> NOT expression .)
    IN              reduce using rule 42 (expression -> NOT expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 42 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 42 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 42 (expression -> NOT expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 42 (expression -> NOT expression .) ]
  ! LOWER           [ reduce using rule 42 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 42 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 42 (expression -> NOT expression .) ]
  ! AND             [ shift and go to state 43 ]


state 55

    (43) expression -> MINUS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 43 (expression -> MINUS expression .)
    MINUS           reduce using rule 43 (expression -> MINUS expression .)
    TIMES           reduce using rule 43 (expression -> MINUS expression .)
    DIV             reduce using rule 43 (expression -> MINUS expression .)
    EQUAL           reduce using rule 43 (expression -> MINUS expression .)
    LOWER_EQUAL     reduce using rule 43 (expression -> MINUS expression .)
    LOWER           reduce using rule 43 (expression -> MINUS expression .)
    AND             reduce using rule 43 (expression -> MINUS expression .)
    CLASS           reduce using rule 43 (expression -> MINUS expression .)
    TYPE_IDENTIFIER reduce using rule 43 (expression -> MINUS expression .)
    OBJECT_IDENTIFIER reduce using rule 43 (expression -> MINUS expression .)
    IF              reduce using rule 43 (expression -> MINUS expression .)
    WHILE           reduce using rule 43 (expression -> MINUS expression .)
    LET             reduce using rule 43 (expression -> MINUS expression .)
    NOT             reduce using rule 43 (expression -> MINUS expression .)
    ISNULL          reduce using rule 43 (expression -> MINUS expression .)
    NEW             reduce using rule 43 (expression -> MINUS expression .)
    SELF            reduce using rule 43 (expression -> MINUS expression .)
    LPAR            reduce using rule 43 (expression -> MINUS expression .)
    error           reduce using rule 43 (expression -> MINUS expression .)
    LBRACE          reduce using rule 43 (expression -> MINUS expression .)
    INTEGER_LITERAL reduce using rule 43 (expression -> MINUS expression .)
    string_literal  reduce using rule 43 (expression -> MINUS expression .)
    TRUE            reduce using rule 43 (expression -> MINUS expression .)
    FALSE           reduce using rule 43 (expression -> MINUS expression .)
    $end            reduce using rule 43 (expression -> MINUS expression .)
    RPAR            reduce using rule 43 (expression -> MINUS expression .)
    THEN            reduce using rule 43 (expression -> MINUS expression .)
    DO              reduce using rule 43 (expression -> MINUS expression .)
    COMMA           reduce using rule 43 (expression -> MINUS expression .)
    RBRACE          reduce using rule 43 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 43 (expression -> MINUS expression .)
    ELSE            reduce using rule 43 (expression -> MINUS expression .)
    IN              reduce using rule 43 (expression -> MINUS expression .)
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! POW             [ reduce using rule 43 (expression -> MINUS expression .) ]
  ! DOT             [ reduce using rule 43 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 56

    (44) expression -> ISNULL expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 44 (expression -> ISNULL expression .)
    MINUS           reduce using rule 44 (expression -> ISNULL expression .)
    TIMES           reduce using rule 44 (expression -> ISNULL expression .)
    DIV             reduce using rule 44 (expression -> ISNULL expression .)
    EQUAL           reduce using rule 44 (expression -> ISNULL expression .)
    LOWER_EQUAL     reduce using rule 44 (expression -> ISNULL expression .)
    LOWER           reduce using rule 44 (expression -> ISNULL expression .)
    AND             reduce using rule 44 (expression -> ISNULL expression .)
    CLASS           reduce using rule 44 (expression -> ISNULL expression .)
    TYPE_IDENTIFIER reduce using rule 44 (expression -> ISNULL expression .)
    OBJECT_IDENTIFIER reduce using rule 44 (expression -> ISNULL expression .)
    IF              reduce using rule 44 (expression -> ISNULL expression .)
    WHILE           reduce using rule 44 (expression -> ISNULL expression .)
    LET             reduce using rule 44 (expression -> ISNULL expression .)
    NOT             reduce using rule 44 (expression -> ISNULL expression .)
    ISNULL          reduce using rule 44 (expression -> ISNULL expression .)
    NEW             reduce using rule 44 (expression -> ISNULL expression .)
    SELF            reduce using rule 44 (expression -> ISNULL expression .)
    LPAR            reduce using rule 44 (expression -> ISNULL expression .)
    error           reduce using rule 44 (expression -> ISNULL expression .)
    LBRACE          reduce using rule 44 (expression -> ISNULL expression .)
    INTEGER_LITERAL reduce using rule 44 (expression -> ISNULL expression .)
    string_literal  reduce using rule 44 (expression -> ISNULL expression .)
    TRUE            reduce using rule 44 (expression -> ISNULL expression .)
    FALSE           reduce using rule 44 (expression -> ISNULL expression .)
    $end            reduce using rule 44 (expression -> ISNULL expression .)
    RPAR            reduce using rule 44 (expression -> ISNULL expression .)
    THEN            reduce using rule 44 (expression -> ISNULL expression .)
    DO              reduce using rule 44 (expression -> ISNULL expression .)
    COMMA           reduce using rule 44 (expression -> ISNULL expression .)
    RBRACE          reduce using rule 44 (expression -> ISNULL expression .)
    SEMICOLON       reduce using rule 44 (expression -> ISNULL expression .)
    ELSE            reduce using rule 44 (expression -> ISNULL expression .)
    IN              reduce using rule 44 (expression -> ISNULL expression .)
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! POW             [ reduce using rule 44 (expression -> ISNULL expression .) ]
  ! DOT             [ reduce using rule 44 (expression -> ISNULL expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 57

    (56) expression -> NEW TYPE_IDENTIFIER .

    PLUS            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    MINUS           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    TIMES           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    DIV             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    EQUAL           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    POW             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    AND             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    DOT             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    CLASS           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    TYPE_IDENTIFIER reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    OBJECT_IDENTIFIER reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    IF              reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    WHILE           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    LET             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    NOT             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    ISNULL          reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    NEW             reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    SELF            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    LPAR            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    error           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    INTEGER_LITERAL reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    string_literal  reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    TRUE            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    FALSE           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    $end            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    RPAR            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    THEN            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    DO              reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    COMMA           reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    RBRACE          reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    SEMICOLON       reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    ELSE            reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)
    IN              reduce using rule 56 (expression -> NEW TYPE_IDENTIFIER .)


state 58

    (31) block -> LBRACE new_variables_scope . inblock RBRACE
    (32) inblock -> . inblock SEMICOLON expression
    (33) inblock -> . expression
    (34) inblock -> .
    (35) inblock -> . inblock error
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

  ! shift/reduce conflict for error resolved as shift
    RBRACE          reduce using rule 34 (inblock -> .)
    SEMICOLON       reduce using rule 34 (inblock -> .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

  ! error           [ reduce using rule 34 (inblock -> .) ]

    inblock                        shift and go to state 88
    expression                     shift and go to state 89
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 59

    (10) class -> CLASS new_class_scope class-body .

    CLASS           reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    TYPE_IDENTIFIER reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    OBJECT_IDENTIFIER reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    IF              reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    WHILE           reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    LET             reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    NOT             reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    MINUS           reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    ISNULL          reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    NEW             reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    SELF            reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    LPAR            reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    error           reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    LBRACE          reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    INTEGER_LITERAL reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    string_literal  reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    TRUE            reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    FALSE           reduce using rule 10 (class -> CLASS new_class_scope class-body .)
    $end            reduce using rule 10 (class -> CLASS new_class_scope class-body .)


state 60

    (11) class -> CLASS new_class_scope EXTENDS . TYPE_IDENTIFIER class-body

    TYPE_IDENTIFIER shift and go to state 90


state 61

    (13) class-body -> LBRACE . class-body-in RBRACE
    (14) class-body -> LBRACE . class-body-in error
    (15) class-body-in -> . class-body-in field
    (16) class-body-in -> . class-body-in method
    (17) class-body-in -> .

    RBRACE          reduce using rule 17 (class-body-in -> .)
    error           reduce using rule 17 (class-body-in -> .)
    OBJECT_IDENTIFIER reduce using rule 17 (class-body-in -> .)

    class-body-in                  shift and go to state 91

state 62

    (63) expression -> error expression RPAR .

    PLUS            reduce using rule 63 (expression -> error expression RPAR .)
    MINUS           reduce using rule 63 (expression -> error expression RPAR .)
    TIMES           reduce using rule 63 (expression -> error expression RPAR .)
    DIV             reduce using rule 63 (expression -> error expression RPAR .)
    EQUAL           reduce using rule 63 (expression -> error expression RPAR .)
    LOWER_EQUAL     reduce using rule 63 (expression -> error expression RPAR .)
    LOWER           reduce using rule 63 (expression -> error expression RPAR .)
    POW             reduce using rule 63 (expression -> error expression RPAR .)
    AND             reduce using rule 63 (expression -> error expression RPAR .)
    DOT             reduce using rule 63 (expression -> error expression RPAR .)
    CLASS           reduce using rule 63 (expression -> error expression RPAR .)
    TYPE_IDENTIFIER reduce using rule 63 (expression -> error expression RPAR .)
    OBJECT_IDENTIFIER reduce using rule 63 (expression -> error expression RPAR .)
    IF              reduce using rule 63 (expression -> error expression RPAR .)
    WHILE           reduce using rule 63 (expression -> error expression RPAR .)
    LET             reduce using rule 63 (expression -> error expression RPAR .)
    NOT             reduce using rule 63 (expression -> error expression RPAR .)
    ISNULL          reduce using rule 63 (expression -> error expression RPAR .)
    NEW             reduce using rule 63 (expression -> error expression RPAR .)
    SELF            reduce using rule 63 (expression -> error expression RPAR .)
    LPAR            reduce using rule 63 (expression -> error expression RPAR .)
    error           reduce using rule 63 (expression -> error expression RPAR .)
    LBRACE          reduce using rule 63 (expression -> error expression RPAR .)
    INTEGER_LITERAL reduce using rule 63 (expression -> error expression RPAR .)
    string_literal  reduce using rule 63 (expression -> error expression RPAR .)
    TRUE            reduce using rule 63 (expression -> error expression RPAR .)
    FALSE           reduce using rule 63 (expression -> error expression RPAR .)
    $end            reduce using rule 63 (expression -> error expression RPAR .)
    RPAR            reduce using rule 63 (expression -> error expression RPAR .)
    THEN            reduce using rule 63 (expression -> error expression RPAR .)
    DO              reduce using rule 63 (expression -> error expression RPAR .)
    COMMA           reduce using rule 63 (expression -> error expression RPAR .)
    RBRACE          reduce using rule 63 (expression -> error expression RPAR .)
    SEMICOLON       reduce using rule 63 (expression -> error expression RPAR .)
    ELSE            reduce using rule 63 (expression -> error expression RPAR .)
    IN              reduce using rule 63 (expression -> error expression RPAR .)


state 63

    (45) expression -> expression PLUS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 45 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 45 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 45 (expression -> expression PLUS expression .)
    LOWER_EQUAL     reduce using rule 45 (expression -> expression PLUS expression .)
    LOWER           reduce using rule 45 (expression -> expression PLUS expression .)
    AND             reduce using rule 45 (expression -> expression PLUS expression .)
    CLASS           reduce using rule 45 (expression -> expression PLUS expression .)
    TYPE_IDENTIFIER reduce using rule 45 (expression -> expression PLUS expression .)
    OBJECT_IDENTIFIER reduce using rule 45 (expression -> expression PLUS expression .)
    IF              reduce using rule 45 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 45 (expression -> expression PLUS expression .)
    LET             reduce using rule 45 (expression -> expression PLUS expression .)
    NOT             reduce using rule 45 (expression -> expression PLUS expression .)
    ISNULL          reduce using rule 45 (expression -> expression PLUS expression .)
    NEW             reduce using rule 45 (expression -> expression PLUS expression .)
    SELF            reduce using rule 45 (expression -> expression PLUS expression .)
    LPAR            reduce using rule 45 (expression -> expression PLUS expression .)
    error           reduce using rule 45 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 45 (expression -> expression PLUS expression .)
    INTEGER_LITERAL reduce using rule 45 (expression -> expression PLUS expression .)
    string_literal  reduce using rule 45 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 45 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 45 (expression -> expression PLUS expression .)
    $end            reduce using rule 45 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 45 (expression -> expression PLUS expression .)
    THEN            reduce using rule 45 (expression -> expression PLUS expression .)
    DO              reduce using rule 45 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 45 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 45 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 45 (expression -> expression PLUS expression .)
    IN              reduce using rule 45 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! TIMES           [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 45 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 64

    (46) expression -> expression MINUS expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 46 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 46 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 46 (expression -> expression MINUS expression .)
    LOWER_EQUAL     reduce using rule 46 (expression -> expression MINUS expression .)
    LOWER           reduce using rule 46 (expression -> expression MINUS expression .)
    AND             reduce using rule 46 (expression -> expression MINUS expression .)
    CLASS           reduce using rule 46 (expression -> expression MINUS expression .)
    TYPE_IDENTIFIER reduce using rule 46 (expression -> expression MINUS expression .)
    OBJECT_IDENTIFIER reduce using rule 46 (expression -> expression MINUS expression .)
    IF              reduce using rule 46 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 46 (expression -> expression MINUS expression .)
    LET             reduce using rule 46 (expression -> expression MINUS expression .)
    NOT             reduce using rule 46 (expression -> expression MINUS expression .)
    ISNULL          reduce using rule 46 (expression -> expression MINUS expression .)
    NEW             reduce using rule 46 (expression -> expression MINUS expression .)
    SELF            reduce using rule 46 (expression -> expression MINUS expression .)
    LPAR            reduce using rule 46 (expression -> expression MINUS expression .)
    error           reduce using rule 46 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 46 (expression -> expression MINUS expression .)
    INTEGER_LITERAL reduce using rule 46 (expression -> expression MINUS expression .)
    string_literal  reduce using rule 46 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 46 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 46 (expression -> expression MINUS expression .)
    $end            reduce using rule 46 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 46 (expression -> expression MINUS expression .)
    THEN            reduce using rule 46 (expression -> expression MINUS expression .)
    DO              reduce using rule 46 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 46 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 46 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 46 (expression -> expression MINUS expression .)
    IN              reduce using rule 46 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! TIMES           [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 46 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 65

    (47) expression -> expression TIMES expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 47 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 47 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 47 (expression -> expression TIMES expression .)
    DIV             reduce using rule 47 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 47 (expression -> expression TIMES expression .)
    LOWER_EQUAL     reduce using rule 47 (expression -> expression TIMES expression .)
    LOWER           reduce using rule 47 (expression -> expression TIMES expression .)
    AND             reduce using rule 47 (expression -> expression TIMES expression .)
    CLASS           reduce using rule 47 (expression -> expression TIMES expression .)
    TYPE_IDENTIFIER reduce using rule 47 (expression -> expression TIMES expression .)
    OBJECT_IDENTIFIER reduce using rule 47 (expression -> expression TIMES expression .)
    IF              reduce using rule 47 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 47 (expression -> expression TIMES expression .)
    LET             reduce using rule 47 (expression -> expression TIMES expression .)
    NOT             reduce using rule 47 (expression -> expression TIMES expression .)
    ISNULL          reduce using rule 47 (expression -> expression TIMES expression .)
    NEW             reduce using rule 47 (expression -> expression TIMES expression .)
    SELF            reduce using rule 47 (expression -> expression TIMES expression .)
    LPAR            reduce using rule 47 (expression -> expression TIMES expression .)
    error           reduce using rule 47 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 47 (expression -> expression TIMES expression .)
    INTEGER_LITERAL reduce using rule 47 (expression -> expression TIMES expression .)
    string_literal  reduce using rule 47 (expression -> expression TIMES expression .)
    TRUE            reduce using rule 47 (expression -> expression TIMES expression .)
    FALSE           reduce using rule 47 (expression -> expression TIMES expression .)
    $end            reduce using rule 47 (expression -> expression TIMES expression .)
    RPAR            reduce using rule 47 (expression -> expression TIMES expression .)
    THEN            reduce using rule 47 (expression -> expression TIMES expression .)
    DO              reduce using rule 47 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 47 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 47 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 47 (expression -> expression TIMES expression .)
    IN              reduce using rule 47 (expression -> expression TIMES expression .)
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! POW             [ reduce using rule 47 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 47 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 66

    (48) expression -> expression DIV expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 48 (expression -> expression DIV expression .)
    MINUS           reduce using rule 48 (expression -> expression DIV expression .)
    TIMES           reduce using rule 48 (expression -> expression DIV expression .)
    DIV             reduce using rule 48 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 48 (expression -> expression DIV expression .)
    LOWER_EQUAL     reduce using rule 48 (expression -> expression DIV expression .)
    LOWER           reduce using rule 48 (expression -> expression DIV expression .)
    AND             reduce using rule 48 (expression -> expression DIV expression .)
    CLASS           reduce using rule 48 (expression -> expression DIV expression .)
    TYPE_IDENTIFIER reduce using rule 48 (expression -> expression DIV expression .)
    OBJECT_IDENTIFIER reduce using rule 48 (expression -> expression DIV expression .)
    IF              reduce using rule 48 (expression -> expression DIV expression .)
    WHILE           reduce using rule 48 (expression -> expression DIV expression .)
    LET             reduce using rule 48 (expression -> expression DIV expression .)
    NOT             reduce using rule 48 (expression -> expression DIV expression .)
    ISNULL          reduce using rule 48 (expression -> expression DIV expression .)
    NEW             reduce using rule 48 (expression -> expression DIV expression .)
    SELF            reduce using rule 48 (expression -> expression DIV expression .)
    LPAR            reduce using rule 48 (expression -> expression DIV expression .)
    error           reduce using rule 48 (expression -> expression DIV expression .)
    LBRACE          reduce using rule 48 (expression -> expression DIV expression .)
    INTEGER_LITERAL reduce using rule 48 (expression -> expression DIV expression .)
    string_literal  reduce using rule 48 (expression -> expression DIV expression .)
    TRUE            reduce using rule 48 (expression -> expression DIV expression .)
    FALSE           reduce using rule 48 (expression -> expression DIV expression .)
    $end            reduce using rule 48 (expression -> expression DIV expression .)
    RPAR            reduce using rule 48 (expression -> expression DIV expression .)
    THEN            reduce using rule 48 (expression -> expression DIV expression .)
    DO              reduce using rule 48 (expression -> expression DIV expression .)
    COMMA           reduce using rule 48 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 48 (expression -> expression DIV expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression DIV expression .)
    ELSE            reduce using rule 48 (expression -> expression DIV expression .)
    IN              reduce using rule 48 (expression -> expression DIV expression .)
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! POW             [ reduce using rule 48 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 48 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 67

    (49) expression -> expression EQUAL expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    EQUAL           reduce using rule 49 (expression -> expression EQUAL expression .)
    LOWER_EQUAL     reduce using rule 49 (expression -> expression EQUAL expression .)
    LOWER           reduce using rule 49 (expression -> expression EQUAL expression .)
    AND             reduce using rule 49 (expression -> expression EQUAL expression .)
    CLASS           reduce using rule 49 (expression -> expression EQUAL expression .)
    TYPE_IDENTIFIER reduce using rule 49 (expression -> expression EQUAL expression .)
    OBJECT_IDENTIFIER reduce using rule 49 (expression -> expression EQUAL expression .)
    IF              reduce using rule 49 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 49 (expression -> expression EQUAL expression .)
    LET             reduce using rule 49 (expression -> expression EQUAL expression .)
    NOT             reduce using rule 49 (expression -> expression EQUAL expression .)
    ISNULL          reduce using rule 49 (expression -> expression EQUAL expression .)
    NEW             reduce using rule 49 (expression -> expression EQUAL expression .)
    SELF            reduce using rule 49 (expression -> expression EQUAL expression .)
    LPAR            reduce using rule 49 (expression -> expression EQUAL expression .)
    error           reduce using rule 49 (expression -> expression EQUAL expression .)
    LBRACE          reduce using rule 49 (expression -> expression EQUAL expression .)
    INTEGER_LITERAL reduce using rule 49 (expression -> expression EQUAL expression .)
    string_literal  reduce using rule 49 (expression -> expression EQUAL expression .)
    TRUE            reduce using rule 49 (expression -> expression EQUAL expression .)
    FALSE           reduce using rule 49 (expression -> expression EQUAL expression .)
    $end            reduce using rule 49 (expression -> expression EQUAL expression .)
    RPAR            reduce using rule 49 (expression -> expression EQUAL expression .)
    THEN            reduce using rule 49 (expression -> expression EQUAL expression .)
    DO              reduce using rule 49 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 49 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 49 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 49 (expression -> expression EQUAL expression .)
    IN              reduce using rule 49 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! DOT             [ reduce using rule 49 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 68

    (50) expression -> expression LOWER_EQUAL expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    EQUAL           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    LOWER_EQUAL     reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    LOWER           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    AND             reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    CLASS           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    TYPE_IDENTIFIER reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    OBJECT_IDENTIFIER reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    IF              reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    WHILE           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    LET             reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    NOT             reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    ISNULL          reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    NEW             reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    SELF            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    LPAR            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    error           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    LBRACE          reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    INTEGER_LITERAL reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    string_literal  reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    TRUE            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    FALSE           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    $end            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    RPAR            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    THEN            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    DO              reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    COMMA           reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    RBRACE          reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    ELSE            reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    IN              reduce using rule 50 (expression -> expression LOWER_EQUAL expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! DIV             [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! POW             [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! DOT             [ reduce using rule 50 (expression -> expression LOWER_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 69

    (51) expression -> expression LOWER expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    EQUAL           reduce using rule 51 (expression -> expression LOWER expression .)
    LOWER_EQUAL     reduce using rule 51 (expression -> expression LOWER expression .)
    LOWER           reduce using rule 51 (expression -> expression LOWER expression .)
    AND             reduce using rule 51 (expression -> expression LOWER expression .)
    CLASS           reduce using rule 51 (expression -> expression LOWER expression .)
    TYPE_IDENTIFIER reduce using rule 51 (expression -> expression LOWER expression .)
    OBJECT_IDENTIFIER reduce using rule 51 (expression -> expression LOWER expression .)
    IF              reduce using rule 51 (expression -> expression LOWER expression .)
    WHILE           reduce using rule 51 (expression -> expression LOWER expression .)
    LET             reduce using rule 51 (expression -> expression LOWER expression .)
    NOT             reduce using rule 51 (expression -> expression LOWER expression .)
    ISNULL          reduce using rule 51 (expression -> expression LOWER expression .)
    NEW             reduce using rule 51 (expression -> expression LOWER expression .)
    SELF            reduce using rule 51 (expression -> expression LOWER expression .)
    LPAR            reduce using rule 51 (expression -> expression LOWER expression .)
    error           reduce using rule 51 (expression -> expression LOWER expression .)
    LBRACE          reduce using rule 51 (expression -> expression LOWER expression .)
    INTEGER_LITERAL reduce using rule 51 (expression -> expression LOWER expression .)
    string_literal  reduce using rule 51 (expression -> expression LOWER expression .)
    TRUE            reduce using rule 51 (expression -> expression LOWER expression .)
    FALSE           reduce using rule 51 (expression -> expression LOWER expression .)
    $end            reduce using rule 51 (expression -> expression LOWER expression .)
    RPAR            reduce using rule 51 (expression -> expression LOWER expression .)
    THEN            reduce using rule 51 (expression -> expression LOWER expression .)
    DO              reduce using rule 51 (expression -> expression LOWER expression .)
    COMMA           reduce using rule 51 (expression -> expression LOWER expression .)
    RBRACE          reduce using rule 51 (expression -> expression LOWER expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression LOWER expression .)
    ELSE            reduce using rule 51 (expression -> expression LOWER expression .)
    IN              reduce using rule 51 (expression -> expression LOWER expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! DIV             [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! POW             [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! DOT             [ reduce using rule 51 (expression -> expression LOWER expression .) ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 70

    (52) expression -> expression POW expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    PLUS            reduce using rule 52 (expression -> expression POW expression .)
    MINUS           reduce using rule 52 (expression -> expression POW expression .)
    TIMES           reduce using rule 52 (expression -> expression POW expression .)
    DIV             reduce using rule 52 (expression -> expression POW expression .)
    EQUAL           reduce using rule 52 (expression -> expression POW expression .)
    LOWER_EQUAL     reduce using rule 52 (expression -> expression POW expression .)
    LOWER           reduce using rule 52 (expression -> expression POW expression .)
    AND             reduce using rule 52 (expression -> expression POW expression .)
    CLASS           reduce using rule 52 (expression -> expression POW expression .)
    TYPE_IDENTIFIER reduce using rule 52 (expression -> expression POW expression .)
    OBJECT_IDENTIFIER reduce using rule 52 (expression -> expression POW expression .)
    IF              reduce using rule 52 (expression -> expression POW expression .)
    WHILE           reduce using rule 52 (expression -> expression POW expression .)
    LET             reduce using rule 52 (expression -> expression POW expression .)
    NOT             reduce using rule 52 (expression -> expression POW expression .)
    ISNULL          reduce using rule 52 (expression -> expression POW expression .)
    NEW             reduce using rule 52 (expression -> expression POW expression .)
    SELF            reduce using rule 52 (expression -> expression POW expression .)
    LPAR            reduce using rule 52 (expression -> expression POW expression .)
    error           reduce using rule 52 (expression -> expression POW expression .)
    LBRACE          reduce using rule 52 (expression -> expression POW expression .)
    INTEGER_LITERAL reduce using rule 52 (expression -> expression POW expression .)
    string_literal  reduce using rule 52 (expression -> expression POW expression .)
    TRUE            reduce using rule 52 (expression -> expression POW expression .)
    FALSE           reduce using rule 52 (expression -> expression POW expression .)
    $end            reduce using rule 52 (expression -> expression POW expression .)
    RPAR            reduce using rule 52 (expression -> expression POW expression .)
    THEN            reduce using rule 52 (expression -> expression POW expression .)
    DO              reduce using rule 52 (expression -> expression POW expression .)
    COMMA           reduce using rule 52 (expression -> expression POW expression .)
    RBRACE          reduce using rule 52 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression POW expression .)
    ELSE            reduce using rule 52 (expression -> expression POW expression .)
    IN              reduce using rule 52 (expression -> expression POW expression .)
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! POW             [ reduce using rule 52 (expression -> expression POW expression .) ]
  ! DOT             [ reduce using rule 52 (expression -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 35 ]
  ! MINUS           [ shift and go to state 36 ]
  ! TIMES           [ shift and go to state 37 ]
  ! DIV             [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 39 ]
  ! LOWER_EQUAL     [ shift and go to state 40 ]
  ! LOWER           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 43 ]


state 71

    (53) expression -> expression AND expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    AND             reduce using rule 53 (expression -> expression AND expression .)
    CLASS           reduce using rule 53 (expression -> expression AND expression .)
    TYPE_IDENTIFIER reduce using rule 53 (expression -> expression AND expression .)
    OBJECT_IDENTIFIER reduce using rule 53 (expression -> expression AND expression .)
    IF              reduce using rule 53 (expression -> expression AND expression .)
    WHILE           reduce using rule 53 (expression -> expression AND expression .)
    LET             reduce using rule 53 (expression -> expression AND expression .)
    NOT             reduce using rule 53 (expression -> expression AND expression .)
    ISNULL          reduce using rule 53 (expression -> expression AND expression .)
    NEW             reduce using rule 53 (expression -> expression AND expression .)
    SELF            reduce using rule 53 (expression -> expression AND expression .)
    LPAR            reduce using rule 53 (expression -> expression AND expression .)
    error           reduce using rule 53 (expression -> expression AND expression .)
    LBRACE          reduce using rule 53 (expression -> expression AND expression .)
    INTEGER_LITERAL reduce using rule 53 (expression -> expression AND expression .)
    string_literal  reduce using rule 53 (expression -> expression AND expression .)
    TRUE            reduce using rule 53 (expression -> expression AND expression .)
    FALSE           reduce using rule 53 (expression -> expression AND expression .)
    $end            reduce using rule 53 (expression -> expression AND expression .)
    RPAR            reduce using rule 53 (expression -> expression AND expression .)
    THEN            reduce using rule 53 (expression -> expression AND expression .)
    DO              reduce using rule 53 (expression -> expression AND expression .)
    COMMA           reduce using rule 53 (expression -> expression AND expression .)
    RBRACE          reduce using rule 53 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression AND expression .)
    ELSE            reduce using rule 53 (expression -> expression AND expression .)
    IN              reduce using rule 53 (expression -> expression AND expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! LOWER           [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 43 ]


state 72

    (55) expression -> expression DOT OBJECT_IDENTIFIER . LPAR args RPAR

    LPAR            shift and go to state 92


state 73

    (18) field -> OBJECT_IDENTIFIER COLON type . SEMICOLON
    (19) field -> OBJECT_IDENTIFIER COLON type . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 93
    ASSIGN          shift and go to state 94


state 74

    (22) type -> TYPE_IDENTIFIER .

    SEMICOLON       reduce using rule 22 (type -> TYPE_IDENTIFIER .)
    ASSIGN          reduce using rule 22 (type -> TYPE_IDENTIFIER .)
    IN              reduce using rule 22 (type -> TYPE_IDENTIFIER .)
    RPAR            reduce using rule 22 (type -> TYPE_IDENTIFIER .)
    COMMA           reduce using rule 22 (type -> TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 22 (type -> TYPE_IDENTIFIER .)


state 75

    (23) type -> INT32 .

    SEMICOLON       reduce using rule 23 (type -> INT32 .)
    ASSIGN          reduce using rule 23 (type -> INT32 .)
    IN              reduce using rule 23 (type -> INT32 .)
    RPAR            reduce using rule 23 (type -> INT32 .)
    COMMA           reduce using rule 23 (type -> INT32 .)
    LBRACE          reduce using rule 23 (type -> INT32 .)


state 76

    (24) type -> BOOL .

    SEMICOLON       reduce using rule 24 (type -> BOOL .)
    ASSIGN          reduce using rule 24 (type -> BOOL .)
    IN              reduce using rule 24 (type -> BOOL .)
    RPAR            reduce using rule 24 (type -> BOOL .)
    COMMA           reduce using rule 24 (type -> BOOL .)
    LBRACE          reduce using rule 24 (type -> BOOL .)


state 77

    (25) type -> STRING .

    SEMICOLON       reduce using rule 25 (type -> STRING .)
    ASSIGN          reduce using rule 25 (type -> STRING .)
    IN              reduce using rule 25 (type -> STRING .)
    RPAR            reduce using rule 25 (type -> STRING .)
    COMMA           reduce using rule 25 (type -> STRING .)
    LBRACE          reduce using rule 25 (type -> STRING .)


state 78

    (26) type -> UNIT .

    SEMICOLON       reduce using rule 26 (type -> UNIT .)
    ASSIGN          reduce using rule 26 (type -> UNIT .)
    IN              reduce using rule 26 (type -> UNIT .)
    RPAR            reduce using rule 26 (type -> UNIT .)
    COMMA           reduce using rule 26 (type -> UNIT .)
    LBRACE          reduce using rule 26 (type -> UNIT .)


state 79

    (41) expression -> OBJECT_IDENTIFIER ASSIGN expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    CLASS           reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    TYPE_IDENTIFIER reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    OBJECT_IDENTIFIER reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    WHILE           reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    LET             reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    NOT             reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    ISNULL          reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    NEW             reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    SELF            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    LPAR            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    error           reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    LBRACE          reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    INTEGER_LITERAL reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    string_literal  reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    TRUE            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    FALSE           reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RPAR            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    DO              reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DIV             [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! EQUAL           [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER           [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! POW             [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! AND             [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DOT             [ reduce using rule 41 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]


state 80

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR . formals RPAR COLON type block
    (27) formals -> . formal
    (28) formals -> . formals COMMA formal
    (29) formals -> .
    (30) formal -> . OBJECT_IDENTIFIER COLON type

    RPAR            reduce using rule 29 (formals -> .)
    COMMA           reduce using rule 29 (formals -> .)
    OBJECT_IDENTIFIER shift and go to state 95

    formals                        shift and go to state 96
    formal                         shift and go to state 97

state 81

    (54) expression -> OBJECT_IDENTIFIER LPAR args . RPAR
    (67) args -> args . COMMA expression

    RPAR            shift and go to state 98
    COMMA           shift and go to state 99


state 82

    (68) args -> expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            reduce using rule 68 (args -> expression .)
    COMMA           reduce using rule 68 (args -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 83

    (61) expression -> LPAR expression RPAR .

    PLUS            reduce using rule 61 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 61 (expression -> LPAR expression RPAR .)
    TIMES           reduce using rule 61 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 61 (expression -> LPAR expression RPAR .)
    EQUAL           reduce using rule 61 (expression -> LPAR expression RPAR .)
    LOWER_EQUAL     reduce using rule 61 (expression -> LPAR expression RPAR .)
    LOWER           reduce using rule 61 (expression -> LPAR expression RPAR .)
    POW             reduce using rule 61 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 61 (expression -> LPAR expression RPAR .)
    DOT             reduce using rule 61 (expression -> LPAR expression RPAR .)
    CLASS           reduce using rule 61 (expression -> LPAR expression RPAR .)
    TYPE_IDENTIFIER reduce using rule 61 (expression -> LPAR expression RPAR .)
    OBJECT_IDENTIFIER reduce using rule 61 (expression -> LPAR expression RPAR .)
    IF              reduce using rule 61 (expression -> LPAR expression RPAR .)
    WHILE           reduce using rule 61 (expression -> LPAR expression RPAR .)
    LET             reduce using rule 61 (expression -> LPAR expression RPAR .)
    NOT             reduce using rule 61 (expression -> LPAR expression RPAR .)
    ISNULL          reduce using rule 61 (expression -> LPAR expression RPAR .)
    NEW             reduce using rule 61 (expression -> LPAR expression RPAR .)
    SELF            reduce using rule 61 (expression -> LPAR expression RPAR .)
    LPAR            reduce using rule 61 (expression -> LPAR expression RPAR .)
    error           reduce using rule 61 (expression -> LPAR expression RPAR .)
    LBRACE          reduce using rule 61 (expression -> LPAR expression RPAR .)
    INTEGER_LITERAL reduce using rule 61 (expression -> LPAR expression RPAR .)
    string_literal  reduce using rule 61 (expression -> LPAR expression RPAR .)
    TRUE            reduce using rule 61 (expression -> LPAR expression RPAR .)
    FALSE           reduce using rule 61 (expression -> LPAR expression RPAR .)
    $end            reduce using rule 61 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 61 (expression -> LPAR expression RPAR .)
    THEN            reduce using rule 61 (expression -> LPAR expression RPAR .)
    DO              reduce using rule 61 (expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 61 (expression -> LPAR expression RPAR .)
    RBRACE          reduce using rule 61 (expression -> LPAR expression RPAR .)
    SEMICOLON       reduce using rule 61 (expression -> LPAR expression RPAR .)
    ELSE            reduce using rule 61 (expression -> LPAR expression RPAR .)
    IN              reduce using rule 61 (expression -> LPAR expression RPAR .)


state 84

    (62) expression -> LPAR expression error .

    PLUS            reduce using rule 62 (expression -> LPAR expression error .)
    MINUS           reduce using rule 62 (expression -> LPAR expression error .)
    TIMES           reduce using rule 62 (expression -> LPAR expression error .)
    DIV             reduce using rule 62 (expression -> LPAR expression error .)
    EQUAL           reduce using rule 62 (expression -> LPAR expression error .)
    LOWER_EQUAL     reduce using rule 62 (expression -> LPAR expression error .)
    LOWER           reduce using rule 62 (expression -> LPAR expression error .)
    POW             reduce using rule 62 (expression -> LPAR expression error .)
    AND             reduce using rule 62 (expression -> LPAR expression error .)
    DOT             reduce using rule 62 (expression -> LPAR expression error .)
    CLASS           reduce using rule 62 (expression -> LPAR expression error .)
    TYPE_IDENTIFIER reduce using rule 62 (expression -> LPAR expression error .)
    OBJECT_IDENTIFIER reduce using rule 62 (expression -> LPAR expression error .)
    IF              reduce using rule 62 (expression -> LPAR expression error .)
    WHILE           reduce using rule 62 (expression -> LPAR expression error .)
    LET             reduce using rule 62 (expression -> LPAR expression error .)
    NOT             reduce using rule 62 (expression -> LPAR expression error .)
    ISNULL          reduce using rule 62 (expression -> LPAR expression error .)
    NEW             reduce using rule 62 (expression -> LPAR expression error .)
    SELF            reduce using rule 62 (expression -> LPAR expression error .)
    LPAR            reduce using rule 62 (expression -> LPAR expression error .)
    error           reduce using rule 62 (expression -> LPAR expression error .)
    LBRACE          reduce using rule 62 (expression -> LPAR expression error .)
    INTEGER_LITERAL reduce using rule 62 (expression -> LPAR expression error .)
    string_literal  reduce using rule 62 (expression -> LPAR expression error .)
    TRUE            reduce using rule 62 (expression -> LPAR expression error .)
    FALSE           reduce using rule 62 (expression -> LPAR expression error .)
    $end            reduce using rule 62 (expression -> LPAR expression error .)
    RPAR            reduce using rule 62 (expression -> LPAR expression error .)
    THEN            reduce using rule 62 (expression -> LPAR expression error .)
    DO              reduce using rule 62 (expression -> LPAR expression error .)
    COMMA           reduce using rule 62 (expression -> LPAR expression error .)
    RBRACE          reduce using rule 62 (expression -> LPAR expression error .)
    SEMICOLON       reduce using rule 62 (expression -> LPAR expression error .)
    ELSE            reduce using rule 62 (expression -> LPAR expression error .)
    IN              reduce using rule 62 (expression -> LPAR expression error .)


state 85

    (36) expression -> IF expression THEN . expression
    (37) expression -> IF expression THEN . expression ELSE expression
    (66) expression -> IF expression THEN . expression SEMICOLON error
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 100
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 86

    (38) expression -> WHILE expression DO . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 101
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 87

    (39) expression -> LET OBJECT_IDENTIFIER COLON . type IN expression
    (40) expression -> LET OBJECT_IDENTIFIER COLON . type ASSIGN expression IN expression
    (22) type -> . TYPE_IDENTIFIER
    (23) type -> . INT32
    (24) type -> . BOOL
    (25) type -> . STRING
    (26) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 74
    INT32           shift and go to state 75
    BOOL            shift and go to state 76
    STRING          shift and go to state 77
    UNIT            shift and go to state 78

    type                           shift and go to state 102

state 88

    (31) block -> LBRACE new_variables_scope inblock . RBRACE
    (32) inblock -> inblock . SEMICOLON expression
    (35) inblock -> inblock . error

    RBRACE          shift and go to state 103
    SEMICOLON       shift and go to state 104
    error           shift and go to state 105


state 89

    (33) inblock -> expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 33 (inblock -> expression .)
    SEMICOLON       reduce using rule 33 (inblock -> expression .)
    error           reduce using rule 33 (inblock -> expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 90

    (11) class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER . class-body
    (13) class-body -> . LBRACE class-body-in RBRACE
    (14) class-body -> . LBRACE class-body-in error

    LBRACE          shift and go to state 61

    class-body                     shift and go to state 106

state 91

    (13) class-body -> LBRACE class-body-in . RBRACE
    (14) class-body -> LBRACE class-body-in . error
    (15) class-body-in -> class-body-in . field
    (16) class-body-in -> class-body-in . method
    (18) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (19) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (20) method -> . OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block

    RBRACE          shift and go to state 107
    error           shift and go to state 108
    OBJECT_IDENTIFIER shift and go to state 111

    field                          shift and go to state 109
    method                         shift and go to state 110

state 92

    (55) expression -> expression DOT OBJECT_IDENTIFIER LPAR . args RPAR
    (67) args -> . args COMMA expression
    (68) args -> . expression
    (69) args -> .
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    RPAR            reduce using rule 69 (args -> .)
    COMMA           reduce using rule 69 (args -> .)
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 82
    args                           shift and go to state 112
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 93

    (18) field -> OBJECT_IDENTIFIER COLON type SEMICOLON .

    CLASS           reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    TYPE_IDENTIFIER reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    OBJECT_IDENTIFIER reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    IF              reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    WHILE           reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    LET             reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    NOT             reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    MINUS           reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    ISNULL          reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    NEW             reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    SELF            reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    LPAR            reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    error           reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    LBRACE          reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    INTEGER_LITERAL reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    string_literal  reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    TRUE            reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    FALSE           reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    $end            reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    RBRACE          reduce using rule 18 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)


state 94

    (19) field -> OBJECT_IDENTIFIER COLON type ASSIGN . expression SEMICOLON
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 113
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 95

    (30) formal -> OBJECT_IDENTIFIER . COLON type

    COLON           shift and go to state 114


state 96

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals . RPAR COLON type block
    (28) formals -> formals . COMMA formal

    RPAR            shift and go to state 115
    COMMA           shift and go to state 116


state 97

    (27) formals -> formal .

    RPAR            reduce using rule 27 (formals -> formal .)
    COMMA           reduce using rule 27 (formals -> formal .)


state 98

    (54) expression -> OBJECT_IDENTIFIER LPAR args RPAR .

    PLUS            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    CLASS           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    TYPE_IDENTIFIER reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    OBJECT_IDENTIFIER reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    IF              reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    WHILE           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LET             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    NOT             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    ISNULL          reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    NEW             reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    SELF            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LPAR            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    error           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LBRACE          reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    INTEGER_LITERAL reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    string_literal  reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    TRUE            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    FALSE           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    $end            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    SEMICOLON       reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 54 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)


state 99

    (67) args -> args COMMA . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 117
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 100

    (36) expression -> IF expression THEN expression .
    (37) expression -> IF expression THEN expression . ELSE expression
    (66) expression -> IF expression THEN expression . SEMICOLON error
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CLASS           reduce using rule 36 (expression -> IF expression THEN expression .)
    TYPE_IDENTIFIER reduce using rule 36 (expression -> IF expression THEN expression .)
    OBJECT_IDENTIFIER reduce using rule 36 (expression -> IF expression THEN expression .)
    IF              reduce using rule 36 (expression -> IF expression THEN expression .)
    WHILE           reduce using rule 36 (expression -> IF expression THEN expression .)
    LET             reduce using rule 36 (expression -> IF expression THEN expression .)
    NOT             reduce using rule 36 (expression -> IF expression THEN expression .)
    ISNULL          reduce using rule 36 (expression -> IF expression THEN expression .)
    NEW             reduce using rule 36 (expression -> IF expression THEN expression .)
    SELF            reduce using rule 36 (expression -> IF expression THEN expression .)
    LPAR            reduce using rule 36 (expression -> IF expression THEN expression .)
    error           reduce using rule 36 (expression -> IF expression THEN expression .)
    LBRACE          reduce using rule 36 (expression -> IF expression THEN expression .)
    INTEGER_LITERAL reduce using rule 36 (expression -> IF expression THEN expression .)
    string_literal  reduce using rule 36 (expression -> IF expression THEN expression .)
    TRUE            reduce using rule 36 (expression -> IF expression THEN expression .)
    FALSE           reduce using rule 36 (expression -> IF expression THEN expression .)
    $end            reduce using rule 36 (expression -> IF expression THEN expression .)
    RPAR            reduce using rule 36 (expression -> IF expression THEN expression .)
    THEN            reduce using rule 36 (expression -> IF expression THEN expression .)
    DO              reduce using rule 36 (expression -> IF expression THEN expression .)
    COMMA           reduce using rule 36 (expression -> IF expression THEN expression .)
    RBRACE          reduce using rule 36 (expression -> IF expression THEN expression .)
    IN              reduce using rule 36 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 118
    SEMICOLON       shift and go to state 119
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! EQUAL           [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! LOWER           [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! POW             [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! DOT             [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! SEMICOLON       [ reduce using rule 36 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 36 (expression -> IF expression THEN expression .) ]


state 101

    (38) expression -> WHILE expression DO expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CLASS           reduce using rule 38 (expression -> WHILE expression DO expression .)
    TYPE_IDENTIFIER reduce using rule 38 (expression -> WHILE expression DO expression .)
    OBJECT_IDENTIFIER reduce using rule 38 (expression -> WHILE expression DO expression .)
    IF              reduce using rule 38 (expression -> WHILE expression DO expression .)
    WHILE           reduce using rule 38 (expression -> WHILE expression DO expression .)
    LET             reduce using rule 38 (expression -> WHILE expression DO expression .)
    NOT             reduce using rule 38 (expression -> WHILE expression DO expression .)
    ISNULL          reduce using rule 38 (expression -> WHILE expression DO expression .)
    NEW             reduce using rule 38 (expression -> WHILE expression DO expression .)
    SELF            reduce using rule 38 (expression -> WHILE expression DO expression .)
    LPAR            reduce using rule 38 (expression -> WHILE expression DO expression .)
    error           reduce using rule 38 (expression -> WHILE expression DO expression .)
    LBRACE          reduce using rule 38 (expression -> WHILE expression DO expression .)
    INTEGER_LITERAL reduce using rule 38 (expression -> WHILE expression DO expression .)
    string_literal  reduce using rule 38 (expression -> WHILE expression DO expression .)
    TRUE            reduce using rule 38 (expression -> WHILE expression DO expression .)
    FALSE           reduce using rule 38 (expression -> WHILE expression DO expression .)
    $end            reduce using rule 38 (expression -> WHILE expression DO expression .)
    RPAR            reduce using rule 38 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 38 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 38 (expression -> WHILE expression DO expression .)
    COMMA           reduce using rule 38 (expression -> WHILE expression DO expression .)
    RBRACE          reduce using rule 38 (expression -> WHILE expression DO expression .)
    SEMICOLON       reduce using rule 38 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 38 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 38 (expression -> WHILE expression DO expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! DIV             [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! EQUAL           [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! LOWER           [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! POW             [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]
  ! DOT             [ reduce using rule 38 (expression -> WHILE expression DO expression .) ]


state 102

    (39) expression -> LET OBJECT_IDENTIFIER COLON type . IN expression
    (40) expression -> LET OBJECT_IDENTIFIER COLON type . ASSIGN expression IN expression

    IN              shift and go to state 120
    ASSIGN          shift and go to state 121


state 103

    (31) block -> LBRACE new_variables_scope inblock RBRACE .

    CLASS           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    TYPE_IDENTIFIER reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    OBJECT_IDENTIFIER reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    IF              reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    WHILE           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    LET             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    NOT             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    MINUS           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    ISNULL          reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    NEW             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    SELF            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    LPAR            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    error           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    LBRACE          reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    INTEGER_LITERAL reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    string_literal  reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    TRUE            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    FALSE           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    $end            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    PLUS            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    TIMES           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    DIV             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    EQUAL           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    LOWER_EQUAL     reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    LOWER           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    POW             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    AND             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    DOT             reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    RPAR            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    THEN            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    DO              reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    COMMA           reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    RBRACE          reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    SEMICOLON       reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    ELSE            reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)
    IN              reduce using rule 31 (block -> LBRACE new_variables_scope inblock RBRACE .)


state 104

    (32) inblock -> inblock SEMICOLON . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 122
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 105

    (35) inblock -> inblock error .

    RBRACE          reduce using rule 35 (inblock -> inblock error .)
    SEMICOLON       reduce using rule 35 (inblock -> inblock error .)
    error           reduce using rule 35 (inblock -> inblock error .)


state 106

    (11) class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .

    CLASS           reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    TYPE_IDENTIFIER reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    OBJECT_IDENTIFIER reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    IF              reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    WHILE           reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    LET             reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    NOT             reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    MINUS           reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    ISNULL          reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    NEW             reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    SELF            reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    LPAR            reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    error           reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    LBRACE          reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    INTEGER_LITERAL reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    string_literal  reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    TRUE            reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    FALSE           reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)
    $end            reduce using rule 11 (class -> CLASS new_class_scope EXTENDS TYPE_IDENTIFIER class-body .)


state 107

    (13) class-body -> LBRACE class-body-in RBRACE .

    CLASS           reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    TYPE_IDENTIFIER reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    OBJECT_IDENTIFIER reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    IF              reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    WHILE           reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    LET             reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    NOT             reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    MINUS           reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    ISNULL          reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    NEW             reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    SELF            reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    LPAR            reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    error           reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    LBRACE          reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    INTEGER_LITERAL reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    string_literal  reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    TRUE            reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    FALSE           reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)
    $end            reduce using rule 13 (class-body -> LBRACE class-body-in RBRACE .)


state 108

    (14) class-body -> LBRACE class-body-in error .

    CLASS           reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    TYPE_IDENTIFIER reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    OBJECT_IDENTIFIER reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    IF              reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    WHILE           reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    LET             reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    NOT             reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    MINUS           reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    ISNULL          reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    NEW             reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    SELF            reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    LPAR            reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    error           reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    LBRACE          reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    INTEGER_LITERAL reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    string_literal  reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    TRUE            reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    FALSE           reduce using rule 14 (class-body -> LBRACE class-body-in error .)
    $end            reduce using rule 14 (class-body -> LBRACE class-body-in error .)


state 109

    (15) class-body-in -> class-body-in field .

    RBRACE          reduce using rule 15 (class-body-in -> class-body-in field .)
    error           reduce using rule 15 (class-body-in -> class-body-in field .)
    OBJECT_IDENTIFIER reduce using rule 15 (class-body-in -> class-body-in field .)


state 110

    (16) class-body-in -> class-body-in method .

    RBRACE          reduce using rule 16 (class-body-in -> class-body-in method .)
    error           reduce using rule 16 (class-body-in -> class-body-in method .)
    OBJECT_IDENTIFIER reduce using rule 16 (class-body-in -> class-body-in method .)


state 111

    (18) field -> OBJECT_IDENTIFIER . COLON type SEMICOLON
    (19) field -> OBJECT_IDENTIFIER . COLON type ASSIGN expression SEMICOLON
    (20) method -> OBJECT_IDENTIFIER . new_variables_scope LPAR formals RPAR COLON type block
    (21) new_variables_scope -> .

    COLON           shift and go to state 45
    LPAR            reduce using rule 21 (new_variables_scope -> .)

    new_variables_scope            shift and go to state 47

state 112

    (55) expression -> expression DOT OBJECT_IDENTIFIER LPAR args . RPAR
    (67) args -> args . COMMA expression

    RPAR            shift and go to state 123
    COMMA           shift and go to state 99


state 113

    (19) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression . SEMICOLON
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       shift and go to state 124
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 114

    (30) formal -> OBJECT_IDENTIFIER COLON . type
    (22) type -> . TYPE_IDENTIFIER
    (23) type -> . INT32
    (24) type -> . BOOL
    (25) type -> . STRING
    (26) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 74
    INT32           shift and go to state 75
    BOOL            shift and go to state 76
    STRING          shift and go to state 77
    UNIT            shift and go to state 78

    type                           shift and go to state 125

state 115

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR . COLON type block

    COLON           shift and go to state 126


state 116

    (28) formals -> formals COMMA . formal
    (30) formal -> . OBJECT_IDENTIFIER COLON type

    OBJECT_IDENTIFIER shift and go to state 95

    formal                         shift and go to state 127

state 117

    (67) args -> args COMMA expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            reduce using rule 67 (args -> args COMMA expression .)
    COMMA           reduce using rule 67 (args -> args COMMA expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 118

    (37) expression -> IF expression THEN expression ELSE . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 128
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 119

    (66) expression -> IF expression THEN expression SEMICOLON . error

    error           shift and go to state 129


state 120

    (39) expression -> LET OBJECT_IDENTIFIER COLON type IN . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 130
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 121

    (40) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN . expression IN expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 131
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 122

    (32) inblock -> inblock SEMICOLON expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 32 (inblock -> inblock SEMICOLON expression .)
    SEMICOLON       reduce using rule 32 (inblock -> inblock SEMICOLON expression .)
    error           reduce using rule 32 (inblock -> inblock SEMICOLON expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 123

    (55) expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .

    PLUS            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    CLASS           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    TYPE_IDENTIFIER reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    OBJECT_IDENTIFIER reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    IF              reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    WHILE           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LET             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    NOT             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    ISNULL          reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    NEW             reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    SELF            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LPAR            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    error           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LBRACE          reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    INTEGER_LITERAL reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    string_literal  reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    TRUE            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    FALSE           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    $end            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    SEMICOLON       reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 55 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)


state 124

    (19) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    TYPE_IDENTIFIER reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    OBJECT_IDENTIFIER reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    IF              reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    LET             reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    ISNULL          reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    NEW             reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    SELF            reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    LPAR            reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    error           reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    INTEGER_LITERAL reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    string_literal  reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    $end            reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 19 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)


state 125

    (30) formal -> OBJECT_IDENTIFIER COLON type .

    RPAR            reduce using rule 30 (formal -> OBJECT_IDENTIFIER COLON type .)
    COMMA           reduce using rule 30 (formal -> OBJECT_IDENTIFIER COLON type .)


state 126

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON . type block
    (22) type -> . TYPE_IDENTIFIER
    (23) type -> . INT32
    (24) type -> . BOOL
    (25) type -> . STRING
    (26) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 74
    INT32           shift and go to state 75
    BOOL            shift and go to state 76
    STRING          shift and go to state 77
    UNIT            shift and go to state 78

    type                           shift and go to state 132

state 127

    (28) formals -> formals COMMA formal .

    RPAR            reduce using rule 28 (formals -> formals COMMA formal .)
    COMMA           reduce using rule 28 (formals -> formals COMMA formal .)


state 128

    (37) expression -> IF expression THEN expression ELSE expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CLASS           reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    TYPE_IDENTIFIER reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    OBJECT_IDENTIFIER reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    IF              reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    WHILE           reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    LET             reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    NOT             reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    ISNULL          reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    NEW             reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    SELF            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    LPAR            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    error           reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    LBRACE          reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    INTEGER_LITERAL reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    string_literal  reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    TRUE            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    FALSE           reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    $end            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    RPAR            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    COMMA           reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    RBRACE          reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    SEMICOLON       reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DIV             [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQUAL           [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER           [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! POW             [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DOT             [ reduce using rule 37 (expression -> IF expression THEN expression ELSE expression .) ]


state 129

    (66) expression -> IF expression THEN expression SEMICOLON error .

    PLUS            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    MINUS           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    TIMES           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    DIV             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    EQUAL           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    LOWER_EQUAL     reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    LOWER           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    POW             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    AND             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    DOT             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    CLASS           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    TYPE_IDENTIFIER reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    OBJECT_IDENTIFIER reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    IF              reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    WHILE           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    LET             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    NOT             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    ISNULL          reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    NEW             reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    SELF            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    LPAR            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    error           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    LBRACE          reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    INTEGER_LITERAL reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    string_literal  reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    TRUE            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    FALSE           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    $end            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    RPAR            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    THEN            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    DO              reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    COMMA           reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    RBRACE          reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    SEMICOLON       reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    ELSE            reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)
    IN              reduce using rule 66 (expression -> IF expression THEN expression SEMICOLON error .)


state 130

    (39) expression -> LET OBJECT_IDENTIFIER COLON type IN expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CLASS           reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    TYPE_IDENTIFIER reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    OBJECT_IDENTIFIER reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    IF              reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    WHILE           reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    LET             reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    NOT             reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    ISNULL          reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    NEW             reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    SELF            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    LPAR            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    error           reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    LBRACE          reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    INTEGER_LITERAL reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    string_literal  reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    TRUE            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    FALSE           reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    $end            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RPAR            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    THEN            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    DO              reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    COMMA           reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RBRACE          reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    SEMICOLON       reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    ELSE            reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    IN              reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! EQUAL           [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER           [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! POW             [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! AND             [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DOT             [ reduce using rule 39 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]


state 131

    (40) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression . IN expression
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    IN              shift and go to state 133
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44


state 132

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type . block
    (31) block -> . LBRACE new_variables_scope inblock RBRACE

    LBRACE          shift and go to state 22

    block                          shift and go to state 134

state 133

    (40) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN . expression
    (36) expression -> . IF expression THEN expression
    (37) expression -> . IF expression THEN expression ELSE expression
    (38) expression -> . WHILE expression DO expression
    (39) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (40) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (41) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (42) expression -> . NOT expression
    (43) expression -> . MINUS expression
    (44) expression -> . ISNULL expression
    (45) expression -> . expression PLUS expression
    (46) expression -> . expression MINUS expression
    (47) expression -> . expression TIMES expression
    (48) expression -> . expression DIV expression
    (49) expression -> . expression EQUAL expression
    (50) expression -> . expression LOWER_EQUAL expression
    (51) expression -> . expression LOWER expression
    (52) expression -> . expression POW expression
    (53) expression -> . expression AND expression
    (54) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (55) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (56) expression -> . NEW TYPE_IDENTIFIER
    (57) expression -> . OBJECT_IDENTIFIER
    (58) expression -> . SELF
    (59) expression -> . literal
    (60) expression -> . LPAR RPAR
    (61) expression -> . LPAR expression RPAR
    (62) expression -> . LPAR expression error
    (63) expression -> . error expression RPAR
    (64) expression -> . block
    (65) expression -> . error
    (66) expression -> . IF expression THEN expression SEMICOLON error
    (70) literal -> . INTEGER_LITERAL
    (71) literal -> . string_literal
    (72) literal -> . boolean-literal
    (31) block -> . LBRACE new_variables_scope inblock RBRACE
    (73) boolean-literal -> . TRUE
    (74) boolean-literal -> . FALSE

    IF              shift and go to state 13
    WHILE           shift and go to state 14
    LET             shift and go to state 15
    OBJECT_IDENTIFIER shift and go to state 33
    NOT             shift and go to state 16
    MINUS           shift and go to state 17
    ISNULL          shift and go to state 18
    NEW             shift and go to state 19
    SELF            shift and go to state 20
    LPAR            shift and go to state 12
    error           shift and go to state 7
    INTEGER_LITERAL shift and go to state 23
    string_literal  shift and go to state 24
    LBRACE          shift and go to state 22
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27

    expression                     shift and go to state 135
    literal                        shift and go to state 21
    block                          shift and go to state 34
    boolean-literal                shift and go to state 25

state 134

    (20) method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .

    CLASS           reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    TYPE_IDENTIFIER reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    OBJECT_IDENTIFIER reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    IF              reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    WHILE           reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    LET             reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    NOT             reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    MINUS           reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    ISNULL          reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    NEW             reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    SELF            reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    LPAR            reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    error           reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    LBRACE          reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    INTEGER_LITERAL reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    string_literal  reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    TRUE            reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    FALSE           reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    $end            reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)
    RBRACE          reduce using rule 20 (method -> OBJECT_IDENTIFIER new_variables_scope LPAR formals RPAR COLON type block .)


state 135

    (40) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .
    (45) expression -> expression . PLUS expression
    (46) expression -> expression . MINUS expression
    (47) expression -> expression . TIMES expression
    (48) expression -> expression . DIV expression
    (49) expression -> expression . EQUAL expression
    (50) expression -> expression . LOWER_EQUAL expression
    (51) expression -> expression . LOWER expression
    (52) expression -> expression . POW expression
    (53) expression -> expression . AND expression
    (55) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    CLASS           reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    TYPE_IDENTIFIER reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    OBJECT_IDENTIFIER reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    IF              reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    WHILE           reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    LET             reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    NOT             reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    ISNULL          reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    NEW             reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    SELF            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    LPAR            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    error           reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    LBRACE          reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    INTEGER_LITERAL reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    string_literal  reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    TRUE            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    FALSE           reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    $end            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RPAR            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    THEN            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    DO              reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    COMMA           reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RBRACE          reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    SEMICOLON       reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    ELSE            reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    IN              reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36
    TIMES           shift and go to state 37
    DIV             shift and go to state 38
    EQUAL           shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    POW             shift and go to state 42
    AND             shift and go to state 43
    DOT             shift and go to state 44

  ! PLUS            [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! EQUAL           [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER           [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! POW             [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DOT             [ reduce using rule 40 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 7 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 7 resolved as shift
WARNING: shift/reduce conflict for LET in state 7 resolved as shift
WARNING: shift/reduce conflict for OBJECT_IDENTIFIER in state 7 resolved as shift
WARNING: shift/reduce conflict for NOT in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 7 resolved as shift
WARNING: shift/reduce conflict for ISNULL in state 7 resolved as shift
WARNING: shift/reduce conflict for NEW in state 7 resolved as shift
WARNING: shift/reduce conflict for SELF in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 7 resolved as shift
WARNING: shift/reduce conflict for error in state 7 resolved as shift
WARNING: shift/reduce conflict for INTEGER_LITERAL in state 7 resolved as shift
WARNING: shift/reduce conflict for string_literal in state 7 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 7 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 7 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 7 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 8 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 11 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 11 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 33 resolved as shift
WARNING: shift/reduce conflict for error in state 58 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIV in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 100 resolved as shift
WARNING: shift/reduce conflict for POW in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for DOT in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIV in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 101 resolved as shift
WARNING: shift/reduce conflict for POW in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for DOT in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 128 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 128 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 128 resolved as shift
WARNING: shift/reduce conflict for DIV in state 128 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 128 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 128 resolved as shift
WARNING: shift/reduce conflict for POW in state 128 resolved as shift
WARNING: shift/reduce conflict for AND in state 128 resolved as shift
WARNING: shift/reduce conflict for DOT in state 128 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 130 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 130 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 130 resolved as shift
WARNING: shift/reduce conflict for DIV in state 130 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 130 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 130 resolved as shift
WARNING: shift/reduce conflict for POW in state 130 resolved as shift
WARNING: shift/reduce conflict for AND in state 130 resolved as shift
WARNING: shift/reduce conflict for DOT in state 130 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 135 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 135 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 135 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 135 resolved as shift
WARNING: shift/reduce conflict for POW in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for DOT in state 135 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (class -> block)
WARNING: rejected rule (expression -> block) in state 10
