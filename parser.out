Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTS
    INTEGER_ERROR
    Lexicalerror
    SPACES

Grammar

Rule 0     S' -> init
Rule 1     init -> program
Rule 2     program -> class program
Rule 3     program -> class
Rule 4     program -> field
Rule 5     program -> method
Rule 6     class -> CLASS TYPE_IDENTIFIER class-body
Rule 7     class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body
Rule 8     class -> CLASS error
Rule 9     class-body -> LBRACE class-body-in RBRACE
Rule 10    class-body-in -> field class-body-in
Rule 11    class-body-in -> method class-body-in
Rule 12    class-body-in -> <empty>
Rule 13    field -> OBJECT_IDENTIFIER COLON type SEMICOLON
Rule 14    field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
Rule 15    method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block
Rule 16    type -> TYPE_IDENTIFIER
Rule 17    type -> INT32
Rule 18    type -> BOOL
Rule 19    type -> STRING
Rule 20    type -> UNIT
Rule 21    formals -> formal
Rule 22    formals -> formal COMMA formals
Rule 23    formals -> <empty>
Rule 24    formal -> OBJECT_IDENTIFIER COLON type
Rule 25    block -> LBRACE inblock RBRACE
Rule 26    block -> LBRACE inblock error
Rule 27    inblock -> inblock SEMICOLON expression
Rule 28    inblock -> expression
Rule 29    inblock -> inblock error
Rule 30    expression -> IF expression THEN expression
Rule 31    expression -> IF expression THEN expression ELSE expression
Rule 32    expression -> WHILE expression DO expression
Rule 33    expression -> LET OBJECT_IDENTIFIER COLON type IN expression
Rule 34    expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
Rule 35    expression -> OBJECT_IDENTIFIER ASSIGN expression
Rule 36    expression -> NOT expression
Rule 37    expression -> MINUS expression
Rule 38    expression -> ISNULL expression
Rule 39    expression -> expression PLUS expression
Rule 40    expression -> expression MINUS expression
Rule 41    expression -> expression TIMES expression
Rule 42    expression -> expression DIV expression
Rule 43    expression -> expression EQUAL expression
Rule 44    expression -> expression LOWER_EQUAL expression
Rule 45    expression -> expression LOWER expression
Rule 46    expression -> expression POW expression
Rule 47    expression -> expression AND expression
Rule 48    expression -> OBJECT_IDENTIFIER LPAR args RPAR
Rule 49    expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR
Rule 50    expression -> NEW TYPE_IDENTIFIER
Rule 51    expression -> OBJECT_IDENTIFIER
Rule 52    expression -> SELF
Rule 53    expression -> literal
Rule 54    expression -> LPAR RPAR
Rule 55    expression -> LPAR expression RPAR
Rule 56    expression -> LPAR expression error
Rule 57    expression -> error expression RPAR
Rule 58    expression -> block
Rule 59    expression -> error
Rule 60    expression -> IF expression THEN expression SEMICOLON error
Rule 61    args -> expression COMMA args
Rule 62    args -> expression
Rule 63    args -> <empty>
Rule 64    literal -> INTEGER_LITERAL
Rule 65    literal -> string_literal
Rule 66    literal -> boolean-literal
Rule 67    boolean-literal -> TRUE
Rule 68    boolean-literal -> FALSE

Terminals, with rules where they appear

AND                  : 47
ASSIGN               : 14 34 35
BOOL                 : 18
CLASS                : 6 7 8
COLON                : 13 14 15 24 33 34
COMMA                : 22 61
COMMENTS             : 
DIV                  : 42
DO                   : 32
DOT                  : 49
ELSE                 : 31
EQUAL                : 43
EXTENDS              : 7
FALSE                : 68
IF                   : 30 31 60
IN                   : 33 34
INT32                : 17
INTEGER_ERROR        : 
INTEGER_LITERAL      : 64
ISNULL               : 38
LBRACE               : 9 25 26
LET                  : 33 34
LOWER                : 45
LOWER_EQUAL          : 44
LPAR                 : 15 48 49 54 55 56
Lexicalerror         : 
MINUS                : 37 40
NEW                  : 50
NOT                  : 36
OBJECT_IDENTIFIER    : 13 14 15 24 33 34 35 48 49 51
PLUS                 : 39
POW                  : 46
RBRACE               : 9 25
RPAR                 : 15 48 49 54 55 57
SELF                 : 52
SEMICOLON            : 13 14 27 60
SPACES               : 
STRING               : 19
THEN                 : 30 31 60
TIMES                : 41
TRUE                 : 67
TYPE_IDENTIFIER      : 6 7 7 16 50
UNIT                 : 20
WHILE                : 32
error                : 8 26 29 56 57 59 60
string_literal       : 65

Nonterminals, with rules where they appear

args                 : 48 49 61
block                : 15 58
boolean-literal      : 66
class                : 2 3
class-body           : 6 7
class-body-in        : 9 10 11
expression           : 14 27 28 30 30 31 31 31 32 32 33 34 34 35 36 37 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 49 55 56 57 60 60 61 62
field                : 4 10
formal               : 21 22
formals              : 15 22
inblock              : 25 26 27 29
init                 : 0
literal              : 53
method               : 5 11
program              : 1 2
type                 : 13 14 15 24 33 34

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . program
    (2) program -> . class program
    (3) program -> . class
    (4) program -> . field
    (5) program -> . method
    (6) class -> . CLASS TYPE_IDENTIFIER class-body
    (7) class -> . CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body
    (8) class -> . CLASS error
    (13) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (14) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (15) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    CLASS           shift and go to state 6
    OBJECT_IDENTIFIER shift and go to state 7

    init                           shift and go to state 1
    program                        shift and go to state 2
    class                          shift and go to state 3
    field                          shift and go to state 4
    method                         shift and go to state 5

state 1

    (0) S' -> init .



state 2

    (1) init -> program .

    $end            reduce using rule 1 (init -> program .)


state 3

    (2) program -> class . program
    (3) program -> class .
    (2) program -> . class program
    (3) program -> . class
    (4) program -> . field
    (5) program -> . method
    (6) class -> . CLASS TYPE_IDENTIFIER class-body
    (7) class -> . CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body
    (8) class -> . CLASS error
    (13) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (14) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (15) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    $end            reduce using rule 3 (program -> class .)
    CLASS           shift and go to state 6
    OBJECT_IDENTIFIER shift and go to state 7

    class                          shift and go to state 3
    program                        shift and go to state 8
    field                          shift and go to state 4
    method                         shift and go to state 5

state 4

    (4) program -> field .

    $end            reduce using rule 4 (program -> field .)


state 5

    (5) program -> method .

    $end            reduce using rule 5 (program -> method .)


state 6

    (6) class -> CLASS . TYPE_IDENTIFIER class-body
    (7) class -> CLASS . TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body
    (8) class -> CLASS . error

    TYPE_IDENTIFIER shift and go to state 9
    error           shift and go to state 10


state 7

    (13) field -> OBJECT_IDENTIFIER . COLON type SEMICOLON
    (14) field -> OBJECT_IDENTIFIER . COLON type ASSIGN expression SEMICOLON
    (15) method -> OBJECT_IDENTIFIER . LPAR formals RPAR COLON type block

    COLON           shift and go to state 11
    LPAR            shift and go to state 12


state 8

    (2) program -> class program .

    $end            reduce using rule 2 (program -> class program .)


state 9

    (6) class -> CLASS TYPE_IDENTIFIER . class-body
    (7) class -> CLASS TYPE_IDENTIFIER . EXTENDS TYPE_IDENTIFIER class-body
    (9) class-body -> . LBRACE class-body-in RBRACE

    EXTENDS         shift and go to state 14
    LBRACE          shift and go to state 15

    class-body                     shift and go to state 13

state 10

    (8) class -> CLASS error .

    CLASS           reduce using rule 8 (class -> CLASS error .)
    OBJECT_IDENTIFIER reduce using rule 8 (class -> CLASS error .)
    $end            reduce using rule 8 (class -> CLASS error .)


state 11

    (13) field -> OBJECT_IDENTIFIER COLON . type SEMICOLON
    (14) field -> OBJECT_IDENTIFIER COLON . type ASSIGN expression SEMICOLON
    (16) type -> . TYPE_IDENTIFIER
    (17) type -> . INT32
    (18) type -> . BOOL
    (19) type -> . STRING
    (20) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 17
    INT32           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    UNIT            shift and go to state 21

    type                           shift and go to state 16

state 12

    (15) method -> OBJECT_IDENTIFIER LPAR . formals RPAR COLON type block
    (21) formals -> . formal
    (22) formals -> . formal COMMA formals
    (23) formals -> .
    (24) formal -> . OBJECT_IDENTIFIER COLON type

    RPAR            reduce using rule 23 (formals -> .)
    OBJECT_IDENTIFIER shift and go to state 22

    formals                        shift and go to state 23
    formal                         shift and go to state 24

state 13

    (6) class -> CLASS TYPE_IDENTIFIER class-body .

    CLASS           reduce using rule 6 (class -> CLASS TYPE_IDENTIFIER class-body .)
    OBJECT_IDENTIFIER reduce using rule 6 (class -> CLASS TYPE_IDENTIFIER class-body .)
    $end            reduce using rule 6 (class -> CLASS TYPE_IDENTIFIER class-body .)


state 14

    (7) class -> CLASS TYPE_IDENTIFIER EXTENDS . TYPE_IDENTIFIER class-body

    TYPE_IDENTIFIER shift and go to state 25


state 15

    (9) class-body -> LBRACE . class-body-in RBRACE
    (10) class-body-in -> . field class-body-in
    (11) class-body-in -> . method class-body-in
    (12) class-body-in -> .
    (13) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (14) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (15) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 12 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 7

    class-body-in                  shift and go to state 26
    field                          shift and go to state 27
    method                         shift and go to state 28

state 16

    (13) field -> OBJECT_IDENTIFIER COLON type . SEMICOLON
    (14) field -> OBJECT_IDENTIFIER COLON type . ASSIGN expression SEMICOLON

    SEMICOLON       shift and go to state 29
    ASSIGN          shift and go to state 30


state 17

    (16) type -> TYPE_IDENTIFIER .

    SEMICOLON       reduce using rule 16 (type -> TYPE_IDENTIFIER .)
    ASSIGN          reduce using rule 16 (type -> TYPE_IDENTIFIER .)
    COMMA           reduce using rule 16 (type -> TYPE_IDENTIFIER .)
    RPAR            reduce using rule 16 (type -> TYPE_IDENTIFIER .)
    LBRACE          reduce using rule 16 (type -> TYPE_IDENTIFIER .)
    IN              reduce using rule 16 (type -> TYPE_IDENTIFIER .)


state 18

    (17) type -> INT32 .

    SEMICOLON       reduce using rule 17 (type -> INT32 .)
    ASSIGN          reduce using rule 17 (type -> INT32 .)
    COMMA           reduce using rule 17 (type -> INT32 .)
    RPAR            reduce using rule 17 (type -> INT32 .)
    LBRACE          reduce using rule 17 (type -> INT32 .)
    IN              reduce using rule 17 (type -> INT32 .)


state 19

    (18) type -> BOOL .

    SEMICOLON       reduce using rule 18 (type -> BOOL .)
    ASSIGN          reduce using rule 18 (type -> BOOL .)
    COMMA           reduce using rule 18 (type -> BOOL .)
    RPAR            reduce using rule 18 (type -> BOOL .)
    LBRACE          reduce using rule 18 (type -> BOOL .)
    IN              reduce using rule 18 (type -> BOOL .)


state 20

    (19) type -> STRING .

    SEMICOLON       reduce using rule 19 (type -> STRING .)
    ASSIGN          reduce using rule 19 (type -> STRING .)
    COMMA           reduce using rule 19 (type -> STRING .)
    RPAR            reduce using rule 19 (type -> STRING .)
    LBRACE          reduce using rule 19 (type -> STRING .)
    IN              reduce using rule 19 (type -> STRING .)


state 21

    (20) type -> UNIT .

    SEMICOLON       reduce using rule 20 (type -> UNIT .)
    ASSIGN          reduce using rule 20 (type -> UNIT .)
    COMMA           reduce using rule 20 (type -> UNIT .)
    RPAR            reduce using rule 20 (type -> UNIT .)
    LBRACE          reduce using rule 20 (type -> UNIT .)
    IN              reduce using rule 20 (type -> UNIT .)


state 22

    (24) formal -> OBJECT_IDENTIFIER . COLON type

    COLON           shift and go to state 31


state 23

    (15) method -> OBJECT_IDENTIFIER LPAR formals . RPAR COLON type block

    RPAR            shift and go to state 32


state 24

    (21) formals -> formal .
    (22) formals -> formal . COMMA formals

    RPAR            reduce using rule 21 (formals -> formal .)
    COMMA           shift and go to state 33


state 25

    (7) class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER . class-body
    (9) class-body -> . LBRACE class-body-in RBRACE

    LBRACE          shift and go to state 15

    class-body                     shift and go to state 34

state 26

    (9) class-body -> LBRACE class-body-in . RBRACE

    RBRACE          shift and go to state 35


state 27

    (10) class-body-in -> field . class-body-in
    (10) class-body-in -> . field class-body-in
    (11) class-body-in -> . method class-body-in
    (12) class-body-in -> .
    (13) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (14) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (15) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 12 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 7

    field                          shift and go to state 27
    class-body-in                  shift and go to state 36
    method                         shift and go to state 28

state 28

    (11) class-body-in -> method . class-body-in
    (10) class-body-in -> . field class-body-in
    (11) class-body-in -> . method class-body-in
    (12) class-body-in -> .
    (13) field -> . OBJECT_IDENTIFIER COLON type SEMICOLON
    (14) field -> . OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON
    (15) method -> . OBJECT_IDENTIFIER LPAR formals RPAR COLON type block

    RBRACE          reduce using rule 12 (class-body-in -> .)
    OBJECT_IDENTIFIER shift and go to state 7

    method                         shift and go to state 28
    class-body-in                  shift and go to state 37
    field                          shift and go to state 27

state 29

    (13) field -> OBJECT_IDENTIFIER COLON type SEMICOLON .

    $end            reduce using rule 13 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    OBJECT_IDENTIFIER reduce using rule 13 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)
    RBRACE          reduce using rule 13 (field -> OBJECT_IDENTIFIER COLON type SEMICOLON .)


state 30

    (14) field -> OBJECT_IDENTIFIER COLON type ASSIGN . expression SEMICOLON
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 39
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 31

    (24) formal -> OBJECT_IDENTIFIER COLON . type
    (16) type -> . TYPE_IDENTIFIER
    (17) type -> . INT32
    (18) type -> . BOOL
    (19) type -> . STRING
    (20) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 17
    INT32           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    UNIT            shift and go to state 21

    type                           shift and go to state 58

state 32

    (15) method -> OBJECT_IDENTIFIER LPAR formals RPAR . COLON type block

    COLON           shift and go to state 59


state 33

    (22) formals -> formal COMMA . formals
    (21) formals -> . formal
    (22) formals -> . formal COMMA formals
    (23) formals -> .
    (24) formal -> . OBJECT_IDENTIFIER COLON type

    RPAR            reduce using rule 23 (formals -> .)
    OBJECT_IDENTIFIER shift and go to state 22

    formal                         shift and go to state 24
    formals                        shift and go to state 60

state 34

    (7) class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .

    CLASS           reduce using rule 7 (class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .)
    OBJECT_IDENTIFIER reduce using rule 7 (class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .)
    $end            reduce using rule 7 (class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body .)


state 35

    (9) class-body -> LBRACE class-body-in RBRACE .

    CLASS           reduce using rule 9 (class-body -> LBRACE class-body-in RBRACE .)
    OBJECT_IDENTIFIER reduce using rule 9 (class-body -> LBRACE class-body-in RBRACE .)
    $end            reduce using rule 9 (class-body -> LBRACE class-body-in RBRACE .)


state 36

    (10) class-body-in -> field class-body-in .

    RBRACE          reduce using rule 10 (class-body-in -> field class-body-in .)


state 37

    (11) class-body-in -> method class-body-in .

    RBRACE          reduce using rule 11 (class-body-in -> method class-body-in .)


state 38

    (35) expression -> OBJECT_IDENTIFIER . ASSIGN expression
    (48) expression -> OBJECT_IDENTIFIER . LPAR args RPAR
    (51) expression -> OBJECT_IDENTIFIER .

    ASSIGN          shift and go to state 61
    LPAR            shift and go to state 62
    SEMICOLON       reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    PLUS            reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    MINUS           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    TIMES           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    DIV             reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    EQUAL           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    LOWER           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    POW             reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    AND             reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    DOT             reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    THEN            reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    DO              reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    RPAR            reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    error           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    RBRACE          reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    COMMA           reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    ELSE            reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)
    IN              reduce using rule 51 (expression -> OBJECT_IDENTIFIER .)


state 39

    (14) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression . SEMICOLON
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 40

    (30) expression -> IF . expression THEN expression
    (31) expression -> IF . expression THEN expression ELSE expression
    (60) expression -> IF . expression THEN expression SEMICOLON error
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 74
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 41

    (32) expression -> WHILE . expression DO expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 75
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 42

    (33) expression -> LET . OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> LET . OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression

    OBJECT_IDENTIFIER shift and go to state 76


state 43

    (36) expression -> NOT . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 77
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 44

    (37) expression -> MINUS . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 78
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 45

    (38) expression -> ISNULL . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 79
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 46

    (54) expression -> LPAR . RPAR
    (55) expression -> LPAR . expression RPAR
    (56) expression -> LPAR . expression error
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    RPAR            shift and go to state 80
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 81
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 47

    (50) expression -> NEW . TYPE_IDENTIFIER

    TYPE_IDENTIFIER shift and go to state 82


state 48

    (52) expression -> SELF .

    SEMICOLON       reduce using rule 52 (expression -> SELF .)
    PLUS            reduce using rule 52 (expression -> SELF .)
    MINUS           reduce using rule 52 (expression -> SELF .)
    TIMES           reduce using rule 52 (expression -> SELF .)
    DIV             reduce using rule 52 (expression -> SELF .)
    EQUAL           reduce using rule 52 (expression -> SELF .)
    LOWER_EQUAL     reduce using rule 52 (expression -> SELF .)
    LOWER           reduce using rule 52 (expression -> SELF .)
    POW             reduce using rule 52 (expression -> SELF .)
    AND             reduce using rule 52 (expression -> SELF .)
    DOT             reduce using rule 52 (expression -> SELF .)
    THEN            reduce using rule 52 (expression -> SELF .)
    DO              reduce using rule 52 (expression -> SELF .)
    RPAR            reduce using rule 52 (expression -> SELF .)
    error           reduce using rule 52 (expression -> SELF .)
    RBRACE          reduce using rule 52 (expression -> SELF .)
    COMMA           reduce using rule 52 (expression -> SELF .)
    ELSE            reduce using rule 52 (expression -> SELF .)
    IN              reduce using rule 52 (expression -> SELF .)


state 49

    (53) expression -> literal .

    SEMICOLON       reduce using rule 53 (expression -> literal .)
    PLUS            reduce using rule 53 (expression -> literal .)
    MINUS           reduce using rule 53 (expression -> literal .)
    TIMES           reduce using rule 53 (expression -> literal .)
    DIV             reduce using rule 53 (expression -> literal .)
    EQUAL           reduce using rule 53 (expression -> literal .)
    LOWER_EQUAL     reduce using rule 53 (expression -> literal .)
    LOWER           reduce using rule 53 (expression -> literal .)
    POW             reduce using rule 53 (expression -> literal .)
    AND             reduce using rule 53 (expression -> literal .)
    DOT             reduce using rule 53 (expression -> literal .)
    THEN            reduce using rule 53 (expression -> literal .)
    DO              reduce using rule 53 (expression -> literal .)
    RPAR            reduce using rule 53 (expression -> literal .)
    error           reduce using rule 53 (expression -> literal .)
    RBRACE          reduce using rule 53 (expression -> literal .)
    COMMA           reduce using rule 53 (expression -> literal .)
    ELSE            reduce using rule 53 (expression -> literal .)
    IN              reduce using rule 53 (expression -> literal .)


state 50

    (57) expression -> error . expression RPAR
    (59) expression -> error .
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for error resolved as shift
    SEMICOLON       reduce using rule 59 (expression -> error .)
    PLUS            reduce using rule 59 (expression -> error .)
    TIMES           reduce using rule 59 (expression -> error .)
    DIV             reduce using rule 59 (expression -> error .)
    EQUAL           reduce using rule 59 (expression -> error .)
    LOWER_EQUAL     reduce using rule 59 (expression -> error .)
    LOWER           reduce using rule 59 (expression -> error .)
    POW             reduce using rule 59 (expression -> error .)
    AND             reduce using rule 59 (expression -> error .)
    DOT             reduce using rule 59 (expression -> error .)
    THEN            reduce using rule 59 (expression -> error .)
    DO              reduce using rule 59 (expression -> error .)
    RPAR            reduce using rule 59 (expression -> error .)
    RBRACE          reduce using rule 59 (expression -> error .)
    COMMA           reduce using rule 59 (expression -> error .)
    ELSE            reduce using rule 59 (expression -> error .)
    IN              reduce using rule 59 (expression -> error .)
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

  ! MINUS           [ reduce using rule 59 (expression -> error .) ]
  ! error           [ reduce using rule 59 (expression -> error .) ]

    expression                     shift and go to state 83
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 51

    (58) expression -> block .

    SEMICOLON       reduce using rule 58 (expression -> block .)
    PLUS            reduce using rule 58 (expression -> block .)
    MINUS           reduce using rule 58 (expression -> block .)
    TIMES           reduce using rule 58 (expression -> block .)
    DIV             reduce using rule 58 (expression -> block .)
    EQUAL           reduce using rule 58 (expression -> block .)
    LOWER_EQUAL     reduce using rule 58 (expression -> block .)
    LOWER           reduce using rule 58 (expression -> block .)
    POW             reduce using rule 58 (expression -> block .)
    AND             reduce using rule 58 (expression -> block .)
    DOT             reduce using rule 58 (expression -> block .)
    THEN            reduce using rule 58 (expression -> block .)
    DO              reduce using rule 58 (expression -> block .)
    RPAR            reduce using rule 58 (expression -> block .)
    error           reduce using rule 58 (expression -> block .)
    RBRACE          reduce using rule 58 (expression -> block .)
    COMMA           reduce using rule 58 (expression -> block .)
    ELSE            reduce using rule 58 (expression -> block .)
    IN              reduce using rule 58 (expression -> block .)


state 52

    (64) literal -> INTEGER_LITERAL .

    SEMICOLON       reduce using rule 64 (literal -> INTEGER_LITERAL .)
    PLUS            reduce using rule 64 (literal -> INTEGER_LITERAL .)
    MINUS           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    TIMES           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    DIV             reduce using rule 64 (literal -> INTEGER_LITERAL .)
    EQUAL           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    LOWER_EQUAL     reduce using rule 64 (literal -> INTEGER_LITERAL .)
    LOWER           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    POW             reduce using rule 64 (literal -> INTEGER_LITERAL .)
    AND             reduce using rule 64 (literal -> INTEGER_LITERAL .)
    DOT             reduce using rule 64 (literal -> INTEGER_LITERAL .)
    THEN            reduce using rule 64 (literal -> INTEGER_LITERAL .)
    DO              reduce using rule 64 (literal -> INTEGER_LITERAL .)
    RPAR            reduce using rule 64 (literal -> INTEGER_LITERAL .)
    error           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    RBRACE          reduce using rule 64 (literal -> INTEGER_LITERAL .)
    COMMA           reduce using rule 64 (literal -> INTEGER_LITERAL .)
    ELSE            reduce using rule 64 (literal -> INTEGER_LITERAL .)
    IN              reduce using rule 64 (literal -> INTEGER_LITERAL .)


state 53

    (65) literal -> string_literal .

    SEMICOLON       reduce using rule 65 (literal -> string_literal .)
    PLUS            reduce using rule 65 (literal -> string_literal .)
    MINUS           reduce using rule 65 (literal -> string_literal .)
    TIMES           reduce using rule 65 (literal -> string_literal .)
    DIV             reduce using rule 65 (literal -> string_literal .)
    EQUAL           reduce using rule 65 (literal -> string_literal .)
    LOWER_EQUAL     reduce using rule 65 (literal -> string_literal .)
    LOWER           reduce using rule 65 (literal -> string_literal .)
    POW             reduce using rule 65 (literal -> string_literal .)
    AND             reduce using rule 65 (literal -> string_literal .)
    DOT             reduce using rule 65 (literal -> string_literal .)
    THEN            reduce using rule 65 (literal -> string_literal .)
    DO              reduce using rule 65 (literal -> string_literal .)
    RPAR            reduce using rule 65 (literal -> string_literal .)
    error           reduce using rule 65 (literal -> string_literal .)
    RBRACE          reduce using rule 65 (literal -> string_literal .)
    COMMA           reduce using rule 65 (literal -> string_literal .)
    ELSE            reduce using rule 65 (literal -> string_literal .)
    IN              reduce using rule 65 (literal -> string_literal .)


state 54

    (66) literal -> boolean-literal .

    SEMICOLON       reduce using rule 66 (literal -> boolean-literal .)
    PLUS            reduce using rule 66 (literal -> boolean-literal .)
    MINUS           reduce using rule 66 (literal -> boolean-literal .)
    TIMES           reduce using rule 66 (literal -> boolean-literal .)
    DIV             reduce using rule 66 (literal -> boolean-literal .)
    EQUAL           reduce using rule 66 (literal -> boolean-literal .)
    LOWER_EQUAL     reduce using rule 66 (literal -> boolean-literal .)
    LOWER           reduce using rule 66 (literal -> boolean-literal .)
    POW             reduce using rule 66 (literal -> boolean-literal .)
    AND             reduce using rule 66 (literal -> boolean-literal .)
    DOT             reduce using rule 66 (literal -> boolean-literal .)
    THEN            reduce using rule 66 (literal -> boolean-literal .)
    DO              reduce using rule 66 (literal -> boolean-literal .)
    RPAR            reduce using rule 66 (literal -> boolean-literal .)
    error           reduce using rule 66 (literal -> boolean-literal .)
    RBRACE          reduce using rule 66 (literal -> boolean-literal .)
    COMMA           reduce using rule 66 (literal -> boolean-literal .)
    ELSE            reduce using rule 66 (literal -> boolean-literal .)
    IN              reduce using rule 66 (literal -> boolean-literal .)


state 55

    (25) block -> LBRACE . inblock RBRACE
    (26) block -> LBRACE . inblock error
    (27) inblock -> . inblock SEMICOLON expression
    (28) inblock -> . expression
    (29) inblock -> . inblock error
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    inblock                        shift and go to state 84
    expression                     shift and go to state 85
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 56

    (67) boolean-literal -> TRUE .

    SEMICOLON       reduce using rule 67 (boolean-literal -> TRUE .)
    PLUS            reduce using rule 67 (boolean-literal -> TRUE .)
    MINUS           reduce using rule 67 (boolean-literal -> TRUE .)
    TIMES           reduce using rule 67 (boolean-literal -> TRUE .)
    DIV             reduce using rule 67 (boolean-literal -> TRUE .)
    EQUAL           reduce using rule 67 (boolean-literal -> TRUE .)
    LOWER_EQUAL     reduce using rule 67 (boolean-literal -> TRUE .)
    LOWER           reduce using rule 67 (boolean-literal -> TRUE .)
    POW             reduce using rule 67 (boolean-literal -> TRUE .)
    AND             reduce using rule 67 (boolean-literal -> TRUE .)
    DOT             reduce using rule 67 (boolean-literal -> TRUE .)
    THEN            reduce using rule 67 (boolean-literal -> TRUE .)
    DO              reduce using rule 67 (boolean-literal -> TRUE .)
    RPAR            reduce using rule 67 (boolean-literal -> TRUE .)
    error           reduce using rule 67 (boolean-literal -> TRUE .)
    RBRACE          reduce using rule 67 (boolean-literal -> TRUE .)
    COMMA           reduce using rule 67 (boolean-literal -> TRUE .)
    ELSE            reduce using rule 67 (boolean-literal -> TRUE .)
    IN              reduce using rule 67 (boolean-literal -> TRUE .)


state 57

    (68) boolean-literal -> FALSE .

    SEMICOLON       reduce using rule 68 (boolean-literal -> FALSE .)
    PLUS            reduce using rule 68 (boolean-literal -> FALSE .)
    MINUS           reduce using rule 68 (boolean-literal -> FALSE .)
    TIMES           reduce using rule 68 (boolean-literal -> FALSE .)
    DIV             reduce using rule 68 (boolean-literal -> FALSE .)
    EQUAL           reduce using rule 68 (boolean-literal -> FALSE .)
    LOWER_EQUAL     reduce using rule 68 (boolean-literal -> FALSE .)
    LOWER           reduce using rule 68 (boolean-literal -> FALSE .)
    POW             reduce using rule 68 (boolean-literal -> FALSE .)
    AND             reduce using rule 68 (boolean-literal -> FALSE .)
    DOT             reduce using rule 68 (boolean-literal -> FALSE .)
    THEN            reduce using rule 68 (boolean-literal -> FALSE .)
    DO              reduce using rule 68 (boolean-literal -> FALSE .)
    RPAR            reduce using rule 68 (boolean-literal -> FALSE .)
    error           reduce using rule 68 (boolean-literal -> FALSE .)
    RBRACE          reduce using rule 68 (boolean-literal -> FALSE .)
    COMMA           reduce using rule 68 (boolean-literal -> FALSE .)
    ELSE            reduce using rule 68 (boolean-literal -> FALSE .)
    IN              reduce using rule 68 (boolean-literal -> FALSE .)


state 58

    (24) formal -> OBJECT_IDENTIFIER COLON type .

    COMMA           reduce using rule 24 (formal -> OBJECT_IDENTIFIER COLON type .)
    RPAR            reduce using rule 24 (formal -> OBJECT_IDENTIFIER COLON type .)


state 59

    (15) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON . type block
    (16) type -> . TYPE_IDENTIFIER
    (17) type -> . INT32
    (18) type -> . BOOL
    (19) type -> . STRING
    (20) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 17
    INT32           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    UNIT            shift and go to state 21

    type                           shift and go to state 86

state 60

    (22) formals -> formal COMMA formals .

    RPAR            reduce using rule 22 (formals -> formal COMMA formals .)


state 61

    (35) expression -> OBJECT_IDENTIFIER ASSIGN . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 87
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 62

    (48) expression -> OBJECT_IDENTIFIER LPAR . args RPAR
    (61) args -> . expression COMMA args
    (62) args -> . expression
    (63) args -> .
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    RPAR            reduce using rule 63 (args -> .)
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    args                           shift and go to state 88
    expression                     shift and go to state 89
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 63

    (14) field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .

    $end            reduce using rule 14 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    OBJECT_IDENTIFIER reduce using rule 14 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 14 (field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON .)


state 64

    (39) expression -> expression PLUS . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 90
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 65

    (40) expression -> expression MINUS . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 91
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 66

    (41) expression -> expression TIMES . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 92
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 67

    (42) expression -> expression DIV . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 93
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 68

    (43) expression -> expression EQUAL . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 94
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 69

    (44) expression -> expression LOWER_EQUAL . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 95
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 70

    (45) expression -> expression LOWER . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 96
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 71

    (46) expression -> expression POW . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 97
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 72

    (47) expression -> expression AND . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 98
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 73

    (49) expression -> expression DOT . OBJECT_IDENTIFIER LPAR args RPAR

    OBJECT_IDENTIFIER shift and go to state 99


state 74

    (30) expression -> IF expression . THEN expression
    (31) expression -> IF expression . THEN expression ELSE expression
    (60) expression -> IF expression . THEN expression SEMICOLON error
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    THEN            shift and go to state 100
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 75

    (32) expression -> WHILE expression . DO expression
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    DO              shift and go to state 101
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 76

    (33) expression -> LET OBJECT_IDENTIFIER . COLON type IN expression
    (34) expression -> LET OBJECT_IDENTIFIER . COLON type ASSIGN expression IN expression

    COLON           shift and go to state 102


state 77

    (36) expression -> NOT expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 36 (expression -> NOT expression .)
    AND             reduce using rule 36 (expression -> NOT expression .)
    THEN            reduce using rule 36 (expression -> NOT expression .)
    DO              reduce using rule 36 (expression -> NOT expression .)
    RPAR            reduce using rule 36 (expression -> NOT expression .)
    error           reduce using rule 36 (expression -> NOT expression .)
    RBRACE          reduce using rule 36 (expression -> NOT expression .)
    COMMA           reduce using rule 36 (expression -> NOT expression .)
    ELSE            reduce using rule 36 (expression -> NOT expression .)
    IN              reduce using rule 36 (expression -> NOT expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 36 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! DIV             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 36 (expression -> NOT expression .) ]
  ! LOWER           [ reduce using rule 36 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! DOT             [ reduce using rule 36 (expression -> NOT expression .) ]
  ! AND             [ shift and go to state 72 ]


state 78

    (37) expression -> MINUS expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 37 (expression -> MINUS expression .)
    PLUS            reduce using rule 37 (expression -> MINUS expression .)
    MINUS           reduce using rule 37 (expression -> MINUS expression .)
    TIMES           reduce using rule 37 (expression -> MINUS expression .)
    DIV             reduce using rule 37 (expression -> MINUS expression .)
    EQUAL           reduce using rule 37 (expression -> MINUS expression .)
    LOWER_EQUAL     reduce using rule 37 (expression -> MINUS expression .)
    LOWER           reduce using rule 37 (expression -> MINUS expression .)
    AND             reduce using rule 37 (expression -> MINUS expression .)
    THEN            reduce using rule 37 (expression -> MINUS expression .)
    DO              reduce using rule 37 (expression -> MINUS expression .)
    RPAR            reduce using rule 37 (expression -> MINUS expression .)
    error           reduce using rule 37 (expression -> MINUS expression .)
    RBRACE          reduce using rule 37 (expression -> MINUS expression .)
    COMMA           reduce using rule 37 (expression -> MINUS expression .)
    ELSE            reduce using rule 37 (expression -> MINUS expression .)
    IN              reduce using rule 37 (expression -> MINUS expression .)
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! POW             [ reduce using rule 37 (expression -> MINUS expression .) ]
  ! DOT             [ reduce using rule 37 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIV             [ shift and go to state 67 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 79

    (38) expression -> ISNULL expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 38 (expression -> ISNULL expression .)
    PLUS            reduce using rule 38 (expression -> ISNULL expression .)
    MINUS           reduce using rule 38 (expression -> ISNULL expression .)
    TIMES           reduce using rule 38 (expression -> ISNULL expression .)
    DIV             reduce using rule 38 (expression -> ISNULL expression .)
    EQUAL           reduce using rule 38 (expression -> ISNULL expression .)
    LOWER_EQUAL     reduce using rule 38 (expression -> ISNULL expression .)
    LOWER           reduce using rule 38 (expression -> ISNULL expression .)
    AND             reduce using rule 38 (expression -> ISNULL expression .)
    THEN            reduce using rule 38 (expression -> ISNULL expression .)
    DO              reduce using rule 38 (expression -> ISNULL expression .)
    RPAR            reduce using rule 38 (expression -> ISNULL expression .)
    error           reduce using rule 38 (expression -> ISNULL expression .)
    RBRACE          reduce using rule 38 (expression -> ISNULL expression .)
    COMMA           reduce using rule 38 (expression -> ISNULL expression .)
    ELSE            reduce using rule 38 (expression -> ISNULL expression .)
    IN              reduce using rule 38 (expression -> ISNULL expression .)
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! POW             [ reduce using rule 38 (expression -> ISNULL expression .) ]
  ! DOT             [ reduce using rule 38 (expression -> ISNULL expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIV             [ shift and go to state 67 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 80

    (54) expression -> LPAR RPAR .

    SEMICOLON       reduce using rule 54 (expression -> LPAR RPAR .)
    PLUS            reduce using rule 54 (expression -> LPAR RPAR .)
    MINUS           reduce using rule 54 (expression -> LPAR RPAR .)
    TIMES           reduce using rule 54 (expression -> LPAR RPAR .)
    DIV             reduce using rule 54 (expression -> LPAR RPAR .)
    EQUAL           reduce using rule 54 (expression -> LPAR RPAR .)
    LOWER_EQUAL     reduce using rule 54 (expression -> LPAR RPAR .)
    LOWER           reduce using rule 54 (expression -> LPAR RPAR .)
    POW             reduce using rule 54 (expression -> LPAR RPAR .)
    AND             reduce using rule 54 (expression -> LPAR RPAR .)
    DOT             reduce using rule 54 (expression -> LPAR RPAR .)
    THEN            reduce using rule 54 (expression -> LPAR RPAR .)
    DO              reduce using rule 54 (expression -> LPAR RPAR .)
    RPAR            reduce using rule 54 (expression -> LPAR RPAR .)
    error           reduce using rule 54 (expression -> LPAR RPAR .)
    RBRACE          reduce using rule 54 (expression -> LPAR RPAR .)
    COMMA           reduce using rule 54 (expression -> LPAR RPAR .)
    ELSE            reduce using rule 54 (expression -> LPAR RPAR .)
    IN              reduce using rule 54 (expression -> LPAR RPAR .)


state 81

    (55) expression -> LPAR expression . RPAR
    (56) expression -> LPAR expression . error
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            shift and go to state 103
    error           shift and go to state 104
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 82

    (50) expression -> NEW TYPE_IDENTIFIER .

    SEMICOLON       reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    PLUS            reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    MINUS           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    TIMES           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    DIV             reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    EQUAL           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER_EQUAL     reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    LOWER           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    POW             reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    AND             reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    DOT             reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    THEN            reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    DO              reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    RPAR            reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    error           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    RBRACE          reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    COMMA           reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    ELSE            reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)
    IN              reduce using rule 50 (expression -> NEW TYPE_IDENTIFIER .)


state 83

    (57) expression -> error expression . RPAR
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RPAR            shift and go to state 105
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 84

    (25) block -> LBRACE inblock . RBRACE
    (26) block -> LBRACE inblock . error
    (27) inblock -> inblock . SEMICOLON expression
    (29) inblock -> inblock . error

    RBRACE          shift and go to state 106
    error           shift and go to state 107
    SEMICOLON       shift and go to state 108


state 85

    (28) inblock -> expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 28 (inblock -> expression .)
    error           reduce using rule 28 (inblock -> expression .)
    SEMICOLON       reduce using rule 28 (inblock -> expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 86

    (15) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type . block
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error

    LBRACE          shift and go to state 55

    block                          shift and go to state 109

state 87

    (35) expression -> OBJECT_IDENTIFIER ASSIGN expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    THEN            reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    DO              reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RPAR            reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    error           reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    RBRACE          reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    COMMA           reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    IN              reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DIV             [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! EQUAL           [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! LOWER           [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! POW             [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! AND             [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]
  ! DOT             [ reduce using rule 35 (expression -> OBJECT_IDENTIFIER ASSIGN expression .) ]


state 88

    (48) expression -> OBJECT_IDENTIFIER LPAR args . RPAR

    RPAR            shift and go to state 110


state 89

    (61) args -> expression . COMMA args
    (62) args -> expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    COMMA           shift and go to state 111
    RPAR            reduce using rule 62 (args -> expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 90

    (39) expression -> expression PLUS expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 39 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 39 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 39 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 39 (expression -> expression PLUS expression .)
    LOWER_EQUAL     reduce using rule 39 (expression -> expression PLUS expression .)
    LOWER           reduce using rule 39 (expression -> expression PLUS expression .)
    AND             reduce using rule 39 (expression -> expression PLUS expression .)
    THEN            reduce using rule 39 (expression -> expression PLUS expression .)
    DO              reduce using rule 39 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 39 (expression -> expression PLUS expression .)
    error           reduce using rule 39 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 39 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 39 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 39 (expression -> expression PLUS expression .)
    IN              reduce using rule 39 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! TIMES           [ reduce using rule 39 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 39 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 39 (expression -> expression PLUS expression .) ]
  ! DOT             [ reduce using rule 39 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 91

    (40) expression -> expression MINUS expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 40 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 40 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 40 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 40 (expression -> expression MINUS expression .)
    LOWER_EQUAL     reduce using rule 40 (expression -> expression MINUS expression .)
    LOWER           reduce using rule 40 (expression -> expression MINUS expression .)
    AND             reduce using rule 40 (expression -> expression MINUS expression .)
    THEN            reduce using rule 40 (expression -> expression MINUS expression .)
    DO              reduce using rule 40 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 40 (expression -> expression MINUS expression .)
    error           reduce using rule 40 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 40 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 40 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 40 (expression -> expression MINUS expression .)
    IN              reduce using rule 40 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! TIMES           [ reduce using rule 40 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 40 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 40 (expression -> expression MINUS expression .) ]
  ! DOT             [ reduce using rule 40 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 92

    (41) expression -> expression TIMES expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 41 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 41 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 41 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 41 (expression -> expression TIMES expression .)
    DIV             reduce using rule 41 (expression -> expression TIMES expression .)
    EQUAL           reduce using rule 41 (expression -> expression TIMES expression .)
    LOWER_EQUAL     reduce using rule 41 (expression -> expression TIMES expression .)
    LOWER           reduce using rule 41 (expression -> expression TIMES expression .)
    AND             reduce using rule 41 (expression -> expression TIMES expression .)
    THEN            reduce using rule 41 (expression -> expression TIMES expression .)
    DO              reduce using rule 41 (expression -> expression TIMES expression .)
    RPAR            reduce using rule 41 (expression -> expression TIMES expression .)
    error           reduce using rule 41 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 41 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 41 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 41 (expression -> expression TIMES expression .)
    IN              reduce using rule 41 (expression -> expression TIMES expression .)
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! POW             [ reduce using rule 41 (expression -> expression TIMES expression .) ]
  ! DOT             [ reduce using rule 41 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIV             [ shift and go to state 67 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 93

    (42) expression -> expression DIV expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 42 (expression -> expression DIV expression .)
    PLUS            reduce using rule 42 (expression -> expression DIV expression .)
    MINUS           reduce using rule 42 (expression -> expression DIV expression .)
    TIMES           reduce using rule 42 (expression -> expression DIV expression .)
    DIV             reduce using rule 42 (expression -> expression DIV expression .)
    EQUAL           reduce using rule 42 (expression -> expression DIV expression .)
    LOWER_EQUAL     reduce using rule 42 (expression -> expression DIV expression .)
    LOWER           reduce using rule 42 (expression -> expression DIV expression .)
    AND             reduce using rule 42 (expression -> expression DIV expression .)
    THEN            reduce using rule 42 (expression -> expression DIV expression .)
    DO              reduce using rule 42 (expression -> expression DIV expression .)
    RPAR            reduce using rule 42 (expression -> expression DIV expression .)
    error           reduce using rule 42 (expression -> expression DIV expression .)
    RBRACE          reduce using rule 42 (expression -> expression DIV expression .)
    COMMA           reduce using rule 42 (expression -> expression DIV expression .)
    ELSE            reduce using rule 42 (expression -> expression DIV expression .)
    IN              reduce using rule 42 (expression -> expression DIV expression .)
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! POW             [ reduce using rule 42 (expression -> expression DIV expression .) ]
  ! DOT             [ reduce using rule 42 (expression -> expression DIV expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIV             [ shift and go to state 67 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 94

    (43) expression -> expression EQUAL expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 43 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 43 (expression -> expression EQUAL expression .)
    LOWER_EQUAL     reduce using rule 43 (expression -> expression EQUAL expression .)
    LOWER           reduce using rule 43 (expression -> expression EQUAL expression .)
    AND             reduce using rule 43 (expression -> expression EQUAL expression .)
    THEN            reduce using rule 43 (expression -> expression EQUAL expression .)
    DO              reduce using rule 43 (expression -> expression EQUAL expression .)
    RPAR            reduce using rule 43 (expression -> expression EQUAL expression .)
    error           reduce using rule 43 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 43 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 43 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 43 (expression -> expression EQUAL expression .)
    IN              reduce using rule 43 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! DIV             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! DOT             [ reduce using rule 43 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 95

    (44) expression -> expression LOWER_EQUAL expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    EQUAL           reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    LOWER_EQUAL     reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    LOWER           reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    AND             reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    THEN            reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    DO              reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    RPAR            reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    error           reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    RBRACE          reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    COMMA           reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    ELSE            reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    IN              reduce using rule 44 (expression -> expression LOWER_EQUAL expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! TIMES           [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! DIV             [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! POW             [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! DOT             [ reduce using rule 44 (expression -> expression LOWER_EQUAL expression .) ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 96

    (45) expression -> expression LOWER expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 45 (expression -> expression LOWER expression .)
    EQUAL           reduce using rule 45 (expression -> expression LOWER expression .)
    LOWER_EQUAL     reduce using rule 45 (expression -> expression LOWER expression .)
    LOWER           reduce using rule 45 (expression -> expression LOWER expression .)
    AND             reduce using rule 45 (expression -> expression LOWER expression .)
    THEN            reduce using rule 45 (expression -> expression LOWER expression .)
    DO              reduce using rule 45 (expression -> expression LOWER expression .)
    RPAR            reduce using rule 45 (expression -> expression LOWER expression .)
    error           reduce using rule 45 (expression -> expression LOWER expression .)
    RBRACE          reduce using rule 45 (expression -> expression LOWER expression .)
    COMMA           reduce using rule 45 (expression -> expression LOWER expression .)
    ELSE            reduce using rule 45 (expression -> expression LOWER expression .)
    IN              reduce using rule 45 (expression -> expression LOWER expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! TIMES           [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! DIV             [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! POW             [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! DOT             [ reduce using rule 45 (expression -> expression LOWER expression .) ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 97

    (46) expression -> expression POW expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 46 (expression -> expression POW expression .)
    PLUS            reduce using rule 46 (expression -> expression POW expression .)
    MINUS           reduce using rule 46 (expression -> expression POW expression .)
    TIMES           reduce using rule 46 (expression -> expression POW expression .)
    DIV             reduce using rule 46 (expression -> expression POW expression .)
    EQUAL           reduce using rule 46 (expression -> expression POW expression .)
    LOWER_EQUAL     reduce using rule 46 (expression -> expression POW expression .)
    LOWER           reduce using rule 46 (expression -> expression POW expression .)
    AND             reduce using rule 46 (expression -> expression POW expression .)
    THEN            reduce using rule 46 (expression -> expression POW expression .)
    DO              reduce using rule 46 (expression -> expression POW expression .)
    RPAR            reduce using rule 46 (expression -> expression POW expression .)
    error           reduce using rule 46 (expression -> expression POW expression .)
    RBRACE          reduce using rule 46 (expression -> expression POW expression .)
    COMMA           reduce using rule 46 (expression -> expression POW expression .)
    ELSE            reduce using rule 46 (expression -> expression POW expression .)
    IN              reduce using rule 46 (expression -> expression POW expression .)
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! POW             [ reduce using rule 46 (expression -> expression POW expression .) ]
  ! DOT             [ reduce using rule 46 (expression -> expression POW expression .) ]
  ! PLUS            [ shift and go to state 64 ]
  ! MINUS           [ shift and go to state 65 ]
  ! TIMES           [ shift and go to state 66 ]
  ! DIV             [ shift and go to state 67 ]
  ! EQUAL           [ shift and go to state 68 ]
  ! LOWER_EQUAL     [ shift and go to state 69 ]
  ! LOWER           [ shift and go to state 70 ]
  ! AND             [ shift and go to state 72 ]


state 98

    (47) expression -> expression AND expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    SEMICOLON       reduce using rule 47 (expression -> expression AND expression .)
    AND             reduce using rule 47 (expression -> expression AND expression .)
    THEN            reduce using rule 47 (expression -> expression AND expression .)
    DO              reduce using rule 47 (expression -> expression AND expression .)
    RPAR            reduce using rule 47 (expression -> expression AND expression .)
    error           reduce using rule 47 (expression -> expression AND expression .)
    RBRACE          reduce using rule 47 (expression -> expression AND expression .)
    COMMA           reduce using rule 47 (expression -> expression AND expression .)
    ELSE            reduce using rule 47 (expression -> expression AND expression .)
    IN              reduce using rule 47 (expression -> expression AND expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! DIV             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! LOWER           [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! DOT             [ reduce using rule 47 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 72 ]


state 99

    (49) expression -> expression DOT OBJECT_IDENTIFIER . LPAR args RPAR

    LPAR            shift and go to state 112


state 100

    (30) expression -> IF expression THEN . expression
    (31) expression -> IF expression THEN . expression ELSE expression
    (60) expression -> IF expression THEN . expression SEMICOLON error
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 113
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 101

    (32) expression -> WHILE expression DO . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 114
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 102

    (33) expression -> LET OBJECT_IDENTIFIER COLON . type IN expression
    (34) expression -> LET OBJECT_IDENTIFIER COLON . type ASSIGN expression IN expression
    (16) type -> . TYPE_IDENTIFIER
    (17) type -> . INT32
    (18) type -> . BOOL
    (19) type -> . STRING
    (20) type -> . UNIT

    TYPE_IDENTIFIER shift and go to state 17
    INT32           shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    UNIT            shift and go to state 21

    type                           shift and go to state 115

state 103

    (55) expression -> LPAR expression RPAR .

    SEMICOLON       reduce using rule 55 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 55 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 55 (expression -> LPAR expression RPAR .)
    TIMES           reduce using rule 55 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 55 (expression -> LPAR expression RPAR .)
    EQUAL           reduce using rule 55 (expression -> LPAR expression RPAR .)
    LOWER_EQUAL     reduce using rule 55 (expression -> LPAR expression RPAR .)
    LOWER           reduce using rule 55 (expression -> LPAR expression RPAR .)
    POW             reduce using rule 55 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 55 (expression -> LPAR expression RPAR .)
    DOT             reduce using rule 55 (expression -> LPAR expression RPAR .)
    THEN            reduce using rule 55 (expression -> LPAR expression RPAR .)
    DO              reduce using rule 55 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 55 (expression -> LPAR expression RPAR .)
    error           reduce using rule 55 (expression -> LPAR expression RPAR .)
    RBRACE          reduce using rule 55 (expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 55 (expression -> LPAR expression RPAR .)
    ELSE            reduce using rule 55 (expression -> LPAR expression RPAR .)
    IN              reduce using rule 55 (expression -> LPAR expression RPAR .)


state 104

    (56) expression -> LPAR expression error .

    SEMICOLON       reduce using rule 56 (expression -> LPAR expression error .)
    PLUS            reduce using rule 56 (expression -> LPAR expression error .)
    MINUS           reduce using rule 56 (expression -> LPAR expression error .)
    TIMES           reduce using rule 56 (expression -> LPAR expression error .)
    DIV             reduce using rule 56 (expression -> LPAR expression error .)
    EQUAL           reduce using rule 56 (expression -> LPAR expression error .)
    LOWER_EQUAL     reduce using rule 56 (expression -> LPAR expression error .)
    LOWER           reduce using rule 56 (expression -> LPAR expression error .)
    POW             reduce using rule 56 (expression -> LPAR expression error .)
    AND             reduce using rule 56 (expression -> LPAR expression error .)
    DOT             reduce using rule 56 (expression -> LPAR expression error .)
    THEN            reduce using rule 56 (expression -> LPAR expression error .)
    DO              reduce using rule 56 (expression -> LPAR expression error .)
    RPAR            reduce using rule 56 (expression -> LPAR expression error .)
    error           reduce using rule 56 (expression -> LPAR expression error .)
    RBRACE          reduce using rule 56 (expression -> LPAR expression error .)
    COMMA           reduce using rule 56 (expression -> LPAR expression error .)
    ELSE            reduce using rule 56 (expression -> LPAR expression error .)
    IN              reduce using rule 56 (expression -> LPAR expression error .)


state 105

    (57) expression -> error expression RPAR .

    SEMICOLON       reduce using rule 57 (expression -> error expression RPAR .)
    PLUS            reduce using rule 57 (expression -> error expression RPAR .)
    MINUS           reduce using rule 57 (expression -> error expression RPAR .)
    TIMES           reduce using rule 57 (expression -> error expression RPAR .)
    DIV             reduce using rule 57 (expression -> error expression RPAR .)
    EQUAL           reduce using rule 57 (expression -> error expression RPAR .)
    LOWER_EQUAL     reduce using rule 57 (expression -> error expression RPAR .)
    LOWER           reduce using rule 57 (expression -> error expression RPAR .)
    POW             reduce using rule 57 (expression -> error expression RPAR .)
    AND             reduce using rule 57 (expression -> error expression RPAR .)
    DOT             reduce using rule 57 (expression -> error expression RPAR .)
    THEN            reduce using rule 57 (expression -> error expression RPAR .)
    DO              reduce using rule 57 (expression -> error expression RPAR .)
    RPAR            reduce using rule 57 (expression -> error expression RPAR .)
    error           reduce using rule 57 (expression -> error expression RPAR .)
    RBRACE          reduce using rule 57 (expression -> error expression RPAR .)
    COMMA           reduce using rule 57 (expression -> error expression RPAR .)
    ELSE            reduce using rule 57 (expression -> error expression RPAR .)
    IN              reduce using rule 57 (expression -> error expression RPAR .)


state 106

    (25) block -> LBRACE inblock RBRACE .

    SEMICOLON       reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    PLUS            reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    MINUS           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    TIMES           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    DIV             reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    EQUAL           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    LOWER_EQUAL     reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    LOWER           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    POW             reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    AND             reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    DOT             reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    THEN            reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    DO              reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    RPAR            reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    error           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    RBRACE          reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    COMMA           reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    ELSE            reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    IN              reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    $end            reduce using rule 25 (block -> LBRACE inblock RBRACE .)
    OBJECT_IDENTIFIER reduce using rule 25 (block -> LBRACE inblock RBRACE .)


state 107

    (26) block -> LBRACE inblock error .
    (29) inblock -> inblock error .

  ! reduce/reduce conflict for RBRACE resolved using rule 26 (block -> LBRACE inblock error .)
  ! reduce/reduce conflict for error resolved using rule 26 (block -> LBRACE inblock error .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 26 (block -> LBRACE inblock error .)
    SEMICOLON       reduce using rule 26 (block -> LBRACE inblock error .)
    PLUS            reduce using rule 26 (block -> LBRACE inblock error .)
    MINUS           reduce using rule 26 (block -> LBRACE inblock error .)
    TIMES           reduce using rule 26 (block -> LBRACE inblock error .)
    DIV             reduce using rule 26 (block -> LBRACE inblock error .)
    EQUAL           reduce using rule 26 (block -> LBRACE inblock error .)
    LOWER_EQUAL     reduce using rule 26 (block -> LBRACE inblock error .)
    LOWER           reduce using rule 26 (block -> LBRACE inblock error .)
    POW             reduce using rule 26 (block -> LBRACE inblock error .)
    AND             reduce using rule 26 (block -> LBRACE inblock error .)
    DOT             reduce using rule 26 (block -> LBRACE inblock error .)
    THEN            reduce using rule 26 (block -> LBRACE inblock error .)
    DO              reduce using rule 26 (block -> LBRACE inblock error .)
    RPAR            reduce using rule 26 (block -> LBRACE inblock error .)
    error           reduce using rule 26 (block -> LBRACE inblock error .)
    RBRACE          reduce using rule 26 (block -> LBRACE inblock error .)
    COMMA           reduce using rule 26 (block -> LBRACE inblock error .)
    ELSE            reduce using rule 26 (block -> LBRACE inblock error .)
    IN              reduce using rule 26 (block -> LBRACE inblock error .)
    $end            reduce using rule 26 (block -> LBRACE inblock error .)
    OBJECT_IDENTIFIER reduce using rule 26 (block -> LBRACE inblock error .)

  ! RBRACE          [ reduce using rule 29 (inblock -> inblock error .) ]
  ! error           [ reduce using rule 29 (inblock -> inblock error .) ]
  ! SEMICOLON       [ reduce using rule 29 (inblock -> inblock error .) ]


state 108

    (27) inblock -> inblock SEMICOLON . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 116
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 109

    (15) method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .

    $end            reduce using rule 15 (method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .)
    OBJECT_IDENTIFIER reduce using rule 15 (method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .)
    RBRACE          reduce using rule 15 (method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block .)


state 110

    (48) expression -> OBJECT_IDENTIFIER LPAR args RPAR .

    SEMICOLON       reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    PLUS            reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    error           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 48 (expression -> OBJECT_IDENTIFIER LPAR args RPAR .)


state 111

    (61) args -> expression COMMA . args
    (61) args -> . expression COMMA args
    (62) args -> . expression
    (63) args -> .
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    RPAR            reduce using rule 63 (args -> .)
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 89
    args                           shift and go to state 117
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 112

    (49) expression -> expression DOT OBJECT_IDENTIFIER LPAR . args RPAR
    (61) args -> . expression COMMA args
    (62) args -> . expression
    (63) args -> .
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    RPAR            reduce using rule 63 (args -> .)
    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 89
    args                           shift and go to state 118
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 113

    (30) expression -> IF expression THEN expression .
    (31) expression -> IF expression THEN expression . ELSE expression
    (60) expression -> IF expression THEN expression . SEMICOLON error
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    THEN            reduce using rule 30 (expression -> IF expression THEN expression .)
    DO              reduce using rule 30 (expression -> IF expression THEN expression .)
    RPAR            reduce using rule 30 (expression -> IF expression THEN expression .)
    error           reduce using rule 30 (expression -> IF expression THEN expression .)
    RBRACE          reduce using rule 30 (expression -> IF expression THEN expression .)
    COMMA           reduce using rule 30 (expression -> IF expression THEN expression .)
    IN              reduce using rule 30 (expression -> IF expression THEN expression .)
    ELSE            shift and go to state 119
    SEMICOLON       shift and go to state 120
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! SEMICOLON       [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! PLUS            [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! MINUS           [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! TIMES           [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! DIV             [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! EQUAL           [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! LOWER           [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! POW             [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! AND             [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! DOT             [ reduce using rule 30 (expression -> IF expression THEN expression .) ]
  ! ELSE            [ reduce using rule 30 (expression -> IF expression THEN expression .) ]


state 114

    (32) expression -> WHILE expression DO expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 32 (expression -> WHILE expression DO expression .)
    THEN            reduce using rule 32 (expression -> WHILE expression DO expression .)
    DO              reduce using rule 32 (expression -> WHILE expression DO expression .)
    RPAR            reduce using rule 32 (expression -> WHILE expression DO expression .)
    error           reduce using rule 32 (expression -> WHILE expression DO expression .)
    RBRACE          reduce using rule 32 (expression -> WHILE expression DO expression .)
    COMMA           reduce using rule 32 (expression -> WHILE expression DO expression .)
    ELSE            reduce using rule 32 (expression -> WHILE expression DO expression .)
    IN              reduce using rule 32 (expression -> WHILE expression DO expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! MINUS           [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! TIMES           [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! DIV             [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! EQUAL           [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! LOWER           [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! POW             [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! AND             [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]
  ! DOT             [ reduce using rule 32 (expression -> WHILE expression DO expression .) ]


state 115

    (33) expression -> LET OBJECT_IDENTIFIER COLON type . IN expression
    (34) expression -> LET OBJECT_IDENTIFIER COLON type . ASSIGN expression IN expression

    IN              shift and go to state 121
    ASSIGN          shift and go to state 122


state 116

    (27) inblock -> inblock SEMICOLON expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    RBRACE          reduce using rule 27 (inblock -> inblock SEMICOLON expression .)
    error           reduce using rule 27 (inblock -> inblock SEMICOLON expression .)
    SEMICOLON       reduce using rule 27 (inblock -> inblock SEMICOLON expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 117

    (61) args -> expression COMMA args .

    RPAR            reduce using rule 61 (args -> expression COMMA args .)


state 118

    (49) expression -> expression DOT OBJECT_IDENTIFIER LPAR args . RPAR

    RPAR            shift and go to state 123


state 119

    (31) expression -> IF expression THEN expression ELSE . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 124
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 120

    (60) expression -> IF expression THEN expression SEMICOLON . error

    error           shift and go to state 125


state 121

    (33) expression -> LET OBJECT_IDENTIFIER COLON type IN . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 126
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 122

    (34) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN . expression IN expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 127
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 123

    (49) expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .

    SEMICOLON       reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    PLUS            reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    MINUS           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    TIMES           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DIV             reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    EQUAL           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER_EQUAL     reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    LOWER           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    POW             reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    AND             reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DOT             reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    THEN            reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    DO              reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RPAR            reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    error           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    RBRACE          reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    COMMA           reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    ELSE            reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)
    IN              reduce using rule 49 (expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR .)


state 124

    (31) expression -> IF expression THEN expression ELSE expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    THEN            reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    DO              reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    RPAR            reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    error           reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    RBRACE          reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    COMMA           reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    ELSE            reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    IN              reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! MINUS           [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! TIMES           [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DIV             [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! EQUAL           [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! LOWER           [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! POW             [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! AND             [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]
  ! DOT             [ reduce using rule 31 (expression -> IF expression THEN expression ELSE expression .) ]


state 125

    (60) expression -> IF expression THEN expression SEMICOLON error .

    SEMICOLON       reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    PLUS            reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    MINUS           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    TIMES           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    DIV             reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    EQUAL           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    LOWER_EQUAL     reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    LOWER           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    POW             reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    AND             reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    DOT             reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    THEN            reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    DO              reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    RPAR            reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    error           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    RBRACE          reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    COMMA           reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    ELSE            reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)
    IN              reduce using rule 60 (expression -> IF expression THEN expression SEMICOLON error .)


state 126

    (33) expression -> LET OBJECT_IDENTIFIER COLON type IN expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    THEN            reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    DO              reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RPAR            reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    error           reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    RBRACE          reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    COMMA           reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    ELSE            reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    IN              reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! MINUS           [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! TIMES           [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DIV             [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! EQUAL           [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! LOWER           [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! POW             [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! AND             [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]
  ! DOT             [ reduce using rule 33 (expression -> LET OBJECT_IDENTIFIER COLON type IN expression .) ]


state 127

    (34) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression . IN expression
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

    IN              shift and go to state 128
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73


state 128

    (34) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN . expression
    (30) expression -> . IF expression THEN expression
    (31) expression -> . IF expression THEN expression ELSE expression
    (32) expression -> . WHILE expression DO expression
    (33) expression -> . LET OBJECT_IDENTIFIER COLON type IN expression
    (34) expression -> . LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression
    (35) expression -> . OBJECT_IDENTIFIER ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . ISNULL expression
    (39) expression -> . expression PLUS expression
    (40) expression -> . expression MINUS expression
    (41) expression -> . expression TIMES expression
    (42) expression -> . expression DIV expression
    (43) expression -> . expression EQUAL expression
    (44) expression -> . expression LOWER_EQUAL expression
    (45) expression -> . expression LOWER expression
    (46) expression -> . expression POW expression
    (47) expression -> . expression AND expression
    (48) expression -> . OBJECT_IDENTIFIER LPAR args RPAR
    (49) expression -> . expression DOT OBJECT_IDENTIFIER LPAR args RPAR
    (50) expression -> . NEW TYPE_IDENTIFIER
    (51) expression -> . OBJECT_IDENTIFIER
    (52) expression -> . SELF
    (53) expression -> . literal
    (54) expression -> . LPAR RPAR
    (55) expression -> . LPAR expression RPAR
    (56) expression -> . LPAR expression error
    (57) expression -> . error expression RPAR
    (58) expression -> . block
    (59) expression -> . error
    (60) expression -> . IF expression THEN expression SEMICOLON error
    (64) literal -> . INTEGER_LITERAL
    (65) literal -> . string_literal
    (66) literal -> . boolean-literal
    (25) block -> . LBRACE inblock RBRACE
    (26) block -> . LBRACE inblock error
    (67) boolean-literal -> . TRUE
    (68) boolean-literal -> . FALSE

    IF              shift and go to state 40
    WHILE           shift and go to state 41
    LET             shift and go to state 42
    OBJECT_IDENTIFIER shift and go to state 38
    NOT             shift and go to state 43
    MINUS           shift and go to state 44
    ISNULL          shift and go to state 45
    NEW             shift and go to state 47
    SELF            shift and go to state 48
    LPAR            shift and go to state 46
    error           shift and go to state 50
    INTEGER_LITERAL shift and go to state 52
    string_literal  shift and go to state 53
    LBRACE          shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 129
    literal                        shift and go to state 49
    block                          shift and go to state 51
    boolean-literal                shift and go to state 54

state 129

    (34) expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .
    (39) expression -> expression . PLUS expression
    (40) expression -> expression . MINUS expression
    (41) expression -> expression . TIMES expression
    (42) expression -> expression . DIV expression
    (43) expression -> expression . EQUAL expression
    (44) expression -> expression . LOWER_EQUAL expression
    (45) expression -> expression . LOWER expression
    (46) expression -> expression . POW expression
    (47) expression -> expression . AND expression
    (49) expression -> expression . DOT OBJECT_IDENTIFIER LPAR args RPAR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for LOWER_EQUAL resolved as shift
  ! shift/reduce conflict for LOWER resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for DOT resolved as shift
    SEMICOLON       reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    THEN            reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    DO              reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RPAR            reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    error           reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    RBRACE          reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    COMMA           reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    ELSE            reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    IN              reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    EQUAL           shift and go to state 68
    LOWER_EQUAL     shift and go to state 69
    LOWER           shift and go to state 70
    POW             shift and go to state 71
    AND             shift and go to state 72
    DOT             shift and go to state 73

  ! PLUS            [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! MINUS           [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! TIMES           [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DIV             [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! EQUAL           [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER_EQUAL     [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! LOWER           [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! POW             [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! AND             [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]
  ! DOT             [ reduce using rule 34 (expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for error in state 50 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 113 resolved as shift
WARNING: shift/reduce conflict for DIV in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 113 resolved as shift
WARNING: shift/reduce conflict for POW in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for DOT in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 114 resolved as shift
WARNING: shift/reduce conflict for DIV in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 114 resolved as shift
WARNING: shift/reduce conflict for POW in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 124 resolved as shift
WARNING: shift/reduce conflict for DIV in state 124 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 124 resolved as shift
WARNING: shift/reduce conflict for POW in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for DOT in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 126 resolved as shift
WARNING: shift/reduce conflict for DIV in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 126 resolved as shift
WARNING: shift/reduce conflict for POW in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for DOT in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 129 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 129 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 129 resolved as shift
WARNING: shift/reduce conflict for DIV in state 129 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for LOWER_EQUAL in state 129 resolved as shift
WARNING: shift/reduce conflict for LOWER in state 129 resolved as shift
WARNING: shift/reduce conflict for POW in state 129 resolved as shift
WARNING: shift/reduce conflict for AND in state 129 resolved as shift
WARNING: shift/reduce conflict for DOT in state 129 resolved as shift
WARNING: reduce/reduce conflict in state 107 resolved using rule (block -> LBRACE inblock error)
WARNING: rejected rule (inblock -> inblock error) in state 107
WARNING: Rule (inblock -> inblock error) is never reduced
