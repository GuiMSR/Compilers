
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'initrightASSIGNleftANDrightNOTnonassocLOWEREQUALLOWER_EQUALleftPLUSMINUSleftTIMESDIVrightISNULLUMINUSrightPOWleftDOTAND ASSIGN BOOL CLASS COLON COMMA COMMENTS DIV DO DOT ELSE EQUAL EXTENDS FALSE IF IN INT32 INTEGER_ERROR INTEGER_LITERAL ISNULL LBRACE LET LOWER LOWER_EQUAL LPAR Lexicalerror MINUS NEW NOT OBJECT_IDENTIFIER PLUS POW RBRACE RPAR SELF SEMICOLON SPACES STRING THEN TIMES TRUE TYPE_IDENTIFIER UNIT WHILE string_literalinit : programprogram : class program\n                    | classprogram : field\n                    | methodclass : CLASS TYPE_IDENTIFIER class-body\n                | CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-bodyclass : CLASS errorclass-body : LBRACE class-body-in RBRACEclass-body-in : field class-body-inclass-body-in : method class-body-inclass-body-in : field : OBJECT_IDENTIFIER COLON type SEMICOLON\n                | OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLONmethod : OBJECT_IDENTIFIER LPAR formals RPAR COLON type blocktype : TYPE_IDENTIFIER\n                | INT32\n                | BOOL\n                | STRING\n                | UNIT formals : formal\n                | formal COMMA formals\n                | formal : OBJECT_IDENTIFIER COLON typeblock : LBRACE inblock RBRACEblock : LBRACE inblock errorinblock : inblock SEMICOLON expression\n                | expressioninblock : inblock error expression : IF expression THEN expression\n                    | IF expression THEN expression ELSE expressionexpression : WHILE expression DO expressionexpression : LET OBJECT_IDENTIFIER COLON type IN expression\n                    | LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expressionexpression : OBJECT_IDENTIFIER ASSIGN expressionexpression : NOT expression\n                    | MINUS expression %prec UMINUS\n                    | ISNULL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIV expression\n                  | expression EQUAL expression\n                  | expression LOWER_EQUAL expression\n                  | expression LOWER expression\n                  | expression POW expression\n                  | expression AND expressionexpression : OBJECT_IDENTIFIER LPAR args RPAR\n                    | expression DOT OBJECT_IDENTIFIER LPAR args RPARexpression : NEW TYPE_IDENTIFIERexpression : OBJECT_IDENTIFIERexpression : SELFexpression : literalexpression : LPAR RPARexpression : LPAR expression RPARexpression : LPAR expression error\n                    | error expression RPARexpression : blockexpression : error\n                    | IF expression THEN expression SEMICOLON errorargs : expression COMMA args\n                | expression\n                |literal : INTEGER_LITERAL\n                | string_literal\n                | boolean-literalboolean-literal : TRUE \n                        | FALSE'
    
_lr_action_items = {'CLASS':([0,3,10,13,34,35,],[6,6,-8,-6,-7,-9,]),'OBJECT_IDENTIFIER':([0,3,10,12,13,15,27,28,29,30,33,34,35,40,41,42,43,44,45,46,50,55,61,62,63,64,65,66,67,68,69,70,71,72,73,100,101,106,107,108,109,111,112,119,121,122,128,],[7,7,-8,22,-6,7,7,7,-13,38,22,-7,-9,38,38,76,38,38,38,38,38,38,38,38,-14,38,38,38,38,38,38,38,38,38,99,38,38,-25,-26,38,-15,38,38,38,38,38,38,]),'$end':([1,2,3,4,5,8,10,13,29,34,35,63,106,107,109,],[0,-1,-3,-4,-5,-2,-8,-6,-13,-7,-9,-14,-25,-26,-15,]),'TYPE_IDENTIFIER':([6,11,14,31,47,59,102,],[9,17,25,17,82,17,17,]),'error':([6,30,38,40,41,43,44,45,46,48,49,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,77,78,79,80,81,82,84,85,87,90,91,92,93,94,95,96,97,98,100,101,103,104,105,106,107,108,110,111,112,113,114,116,119,120,121,122,123,124,125,126,128,129,],[10,50,-51,50,50,50,50,50,50,-52,-53,50,-58,-64,-65,-66,50,-67,-68,50,50,50,50,50,50,50,50,50,50,50,-36,-37,-38,-54,104,-50,107,-28,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,50,50,-55,-56,-57,-25,-26,50,-48,50,50,-30,-32,-27,50,125,50,50,-49,-31,-60,-33,50,-34,]),'COLON':([7,22,32,76,],[11,31,59,102,]),'LPAR':([7,30,38,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,99,100,101,108,111,112,119,121,122,128,],[12,46,62,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,112,46,46,46,46,46,46,46,46,46,]),'EXTENDS':([9,],[14,]),'LBRACE':([9,17,18,19,20,21,25,30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,86,100,101,108,111,112,119,121,122,128,],[15,-16,-17,-18,-19,-20,15,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INT32':([11,31,59,102,],[18,18,18,18,]),'BOOL':([11,31,59,102,],[19,19,19,19,]),'STRING':([11,31,59,102,],[20,20,20,20,]),'UNIT':([11,31,59,102,],[21,21,21,21,]),'RPAR':([12,17,18,19,20,21,23,24,33,38,46,48,49,50,51,52,53,54,56,57,58,60,62,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,111,112,113,114,117,118,123,124,125,126,129,],[-23,-16,-17,-18,-19,-20,32,-21,-23,-51,80,-52,-53,-59,-58,-64,-65,-66,-67,-68,-24,-22,-63,-36,-37,-38,-54,103,-50,105,-35,110,-62,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,-63,-63,-30,-32,-61,123,-49,-31,-60,-33,-34,]),'RBRACE':([15,26,27,28,29,36,37,38,48,49,50,51,52,53,54,56,57,63,77,78,79,80,82,84,85,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,109,110,113,114,116,123,124,125,126,129,],[-12,35,-12,-12,-13,-10,-11,-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,-14,-36,-37,-38,-54,-50,106,-28,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-15,-48,-30,-32,-27,-49,-31,-60,-33,-34,]),'SEMICOLON':([16,17,18,19,20,21,38,39,48,49,50,51,52,53,54,56,57,77,78,79,80,82,84,85,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,129,],[29,-16,-17,-18,-19,-20,-51,63,-52,-53,-59,-58,-64,-65,-66,-67,-68,-36,-37,-38,-54,-50,108,-28,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,120,-32,-27,-49,-31,-60,-33,-34,]),'ASSIGN':([16,17,18,19,20,21,38,115,],[30,-16,-17,-18,-19,-20,61,122,]),'COMMA':([17,18,19,20,21,24,38,48,49,50,51,52,53,54,56,57,58,77,78,79,80,82,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,123,124,125,126,129,],[-16,-17,-18,-19,-20,33,-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,-24,-36,-37,-38,-54,-50,-35,111,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,-30,-32,-49,-31,-60,-33,-34,]),'IN':([17,18,19,20,21,38,48,49,50,51,52,53,54,56,57,77,78,79,80,82,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,115,123,124,125,126,127,129,],[-16,-17,-18,-19,-20,-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,-36,-37,-38,-54,-50,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,-30,-32,121,-49,-31,-60,-33,128,-34,]),'IF':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'WHILE':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'LET':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'NOT':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'MINUS':([30,38,39,40,41,43,44,45,46,48,49,50,51,52,53,54,55,56,57,61,62,64,65,66,67,68,69,70,71,72,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,100,101,103,104,105,106,107,108,110,111,112,113,114,116,119,121,122,123,124,125,126,127,128,129,],[44,-51,65,44,44,44,44,44,44,-52,-53,44,-58,-64,-65,-66,44,-67,-68,44,44,44,44,44,44,44,44,44,44,44,65,65,65,-37,-38,-54,65,-50,65,65,65,65,-39,-40,-41,-42,65,65,65,-46,65,44,44,-55,-56,-57,-25,-26,44,-48,44,44,65,65,65,44,44,44,-49,65,-60,65,65,44,65,]),'ISNULL':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'NEW':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'SELF':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'INTEGER_LITERAL':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'string_literal':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'TRUE':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FALSE':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'PLUS':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,64,-52,-53,-59,-58,-64,-65,-66,-67,-68,64,64,64,-37,-38,-54,64,-50,64,64,64,64,-39,-40,-41,-42,64,64,64,-46,64,-55,-56,-57,-25,-26,-48,64,64,64,-49,64,-60,64,64,64,]),'TIMES':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,66,-52,-53,-59,-58,-64,-65,-66,-67,-68,66,66,66,-37,-38,-54,66,-50,66,66,66,66,66,66,-41,-42,66,66,66,-46,66,-55,-56,-57,-25,-26,-48,66,66,66,-49,66,-60,66,66,66,]),'DIV':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,67,-52,-53,-59,-58,-64,-65,-66,-67,-68,67,67,67,-37,-38,-54,67,-50,67,67,67,67,67,67,-41,-42,67,67,67,-46,67,-55,-56,-57,-25,-26,-48,67,67,67,-49,67,-60,67,67,67,]),'EQUAL':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,68,-52,-53,-59,-58,-64,-65,-66,-67,-68,68,68,68,-37,-38,-54,68,-50,68,68,68,68,-39,-40,-41,-42,None,None,None,-46,68,-55,-56,-57,-25,-26,-48,68,68,68,-49,68,-60,68,68,68,]),'LOWER_EQUAL':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,69,-52,-53,-59,-58,-64,-65,-66,-67,-68,69,69,69,-37,-38,-54,69,-50,69,69,69,69,-39,-40,-41,-42,None,None,None,-46,69,-55,-56,-57,-25,-26,-48,69,69,69,-49,69,-60,69,69,69,]),'LOWER':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,70,-52,-53,-59,-58,-64,-65,-66,-67,-68,70,70,70,-37,-38,-54,70,-50,70,70,70,70,-39,-40,-41,-42,None,None,None,-46,70,-55,-56,-57,-25,-26,-48,70,70,70,-49,70,-60,70,70,70,]),'POW':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,71,-52,-53,-59,-58,-64,-65,-66,-67,-68,71,71,71,71,71,-54,71,-50,71,71,71,71,71,71,71,71,71,71,71,71,71,-55,-56,-57,-25,-26,-48,71,71,71,-49,71,-60,71,71,71,]),'AND':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,72,-52,-53,-59,-58,-64,-65,-66,-67,-68,72,72,-36,-37,-38,-54,72,-50,72,72,72,72,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,72,72,72,-49,72,-60,72,72,72,]),'DOT':([38,39,48,49,50,51,52,53,54,56,57,74,75,77,78,79,80,81,82,83,85,87,89,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,116,123,124,125,126,127,129,],[-51,73,-52,-53,-59,-58,-64,-65,-66,-67,-68,73,73,73,73,73,-54,73,-50,73,73,73,73,73,73,73,73,73,73,73,73,73,-55,-56,-57,-25,-26,-48,73,73,73,-49,73,-60,73,73,73,]),'THEN':([38,48,49,50,51,52,53,54,56,57,74,77,78,79,80,82,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,123,124,125,126,129,],[-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,100,-36,-37,-38,-54,-50,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,-30,-32,-49,-31,-60,-33,-34,]),'DO':([38,48,49,50,51,52,53,54,56,57,75,77,78,79,80,82,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,123,124,125,126,129,],[-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,101,-36,-37,-38,-54,-50,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,-30,-32,-49,-31,-60,-33,-34,]),'ELSE':([38,48,49,50,51,52,53,54,56,57,77,78,79,80,82,87,90,91,92,93,94,95,96,97,98,103,104,105,106,107,110,113,114,123,124,125,126,129,],[-51,-52,-53,-59,-58,-64,-65,-66,-67,-68,-36,-37,-38,-54,-50,-35,-39,-40,-41,-42,-43,-44,-45,-46,-47,-55,-56,-57,-25,-26,-48,119,-32,-49,-31,-60,-33,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'program':([0,3,],[2,8,]),'class':([0,3,],[3,3,]),'field':([0,3,15,27,28,],[4,4,27,27,27,]),'method':([0,3,15,27,28,],[5,5,28,28,28,]),'class-body':([9,25,],[13,34,]),'type':([11,31,59,102,],[16,58,86,115,]),'formals':([12,33,],[23,60,]),'formal':([12,33,],[24,24,]),'class-body-in':([15,27,28,],[26,36,37,]),'expression':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[39,74,75,77,78,79,81,83,85,87,89,90,91,92,93,94,95,96,97,98,113,114,116,89,89,124,126,127,129,]),'literal':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'block':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,86,100,101,108,111,112,119,121,122,128,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,109,51,51,51,51,51,51,51,51,51,]),'boolean-literal':([30,40,41,43,44,45,46,50,55,61,62,64,65,66,67,68,69,70,71,72,100,101,108,111,112,119,121,122,128,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'inblock':([55,],[84,]),'args':([62,111,112,],[88,117,118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> program','init',1,'p_init','parserFile.py',45),
  ('program -> class program','program',2,'p_program','parserFile.py',49),
  ('program -> class','program',1,'p_program','parserFile.py',50),
  ('program -> field','program',1,'p_program_error','parserFile.py',60),
  ('program -> method','program',1,'p_program_error','parserFile.py',61),
  ('class -> CLASS TYPE_IDENTIFIER class-body','class',3,'p_class','parserFile.py',65),
  ('class -> CLASS TYPE_IDENTIFIER EXTENDS TYPE_IDENTIFIER class-body','class',5,'p_class','parserFile.py',66),
  ('class -> CLASS error','class',2,'p_class_error','parserFile.py',76),
  ('class-body -> LBRACE class-body-in RBRACE','class-body',3,'p_class_body','parserFile.py',81),
  ('class-body-in -> field class-body-in','class-body-in',2,'p_class_body_field','parserFile.py',90),
  ('class-body-in -> method class-body-in','class-body-in',2,'p_class_body_method','parserFile.py',95),
  ('class-body-in -> <empty>','class-body-in',0,'p_class_body_empty','parserFile.py',100),
  ('field -> OBJECT_IDENTIFIER COLON type SEMICOLON','field',4,'p_field','parserFile.py',104),
  ('field -> OBJECT_IDENTIFIER COLON type ASSIGN expression SEMICOLON','field',6,'p_field','parserFile.py',105),
  ('method -> OBJECT_IDENTIFIER LPAR formals RPAR COLON type block','method',7,'p_method','parserFile.py',113),
  ('type -> TYPE_IDENTIFIER','type',1,'p_type','parserFile.py',117),
  ('type -> INT32','type',1,'p_type','parserFile.py',118),
  ('type -> BOOL','type',1,'p_type','parserFile.py',119),
  ('type -> STRING','type',1,'p_type','parserFile.py',120),
  ('type -> UNIT','type',1,'p_type','parserFile.py',121),
  ('formals -> formal','formals',1,'p_formals','parserFile.py',125),
  ('formals -> formal COMMA formals','formals',3,'p_formals','parserFile.py',126),
  ('formals -> <empty>','formals',0,'p_formals','parserFile.py',127),
  ('formal -> OBJECT_IDENTIFIER COLON type','formal',3,'p_formal','parserFile.py',136),
  ('block -> LBRACE inblock RBRACE','block',3,'p_block','parserFile.py',140),
  ('block -> LBRACE inblock error','block',3,'p_block_braces_error','parserFile.py',145),
  ('inblock -> inblock SEMICOLON expression','inblock',3,'p_block_inside','parserFile.py',150),
  ('inblock -> expression','inblock',1,'p_block_inside','parserFile.py',151),
  ('inblock -> inblock error','inblock',2,'p_block_error','parserFile.py',158),
  ('expression -> IF expression THEN expression','expression',4,'p_if','parserFile.py',163),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_if','parserFile.py',164),
  ('expression -> WHILE expression DO expression','expression',4,'p_while','parserFile.py',171),
  ('expression -> LET OBJECT_IDENTIFIER COLON type IN expression','expression',6,'p_let','parserFile.py',175),
  ('expression -> LET OBJECT_IDENTIFIER COLON type ASSIGN expression IN expression','expression',8,'p_let','parserFile.py',176),
  ('expression -> OBJECT_IDENTIFIER ASSIGN expression','expression',3,'p_assign','parserFile.py',183),
  ('expression -> NOT expression','expression',2,'p_unary_operators','parserFile.py',187),
  ('expression -> MINUS expression','expression',2,'p_unary_operators','parserFile.py',188),
  ('expression -> ISNULL expression','expression',2,'p_unary_operators','parserFile.py',189),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operators','parserFile.py',193),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operators','parserFile.py',194),
  ('expression -> expression TIMES expression','expression',3,'p_binary_operators','parserFile.py',195),
  ('expression -> expression DIV expression','expression',3,'p_binary_operators','parserFile.py',196),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_operators','parserFile.py',197),
  ('expression -> expression LOWER_EQUAL expression','expression',3,'p_binary_operators','parserFile.py',198),
  ('expression -> expression LOWER expression','expression',3,'p_binary_operators','parserFile.py',199),
  ('expression -> expression POW expression','expression',3,'p_binary_operators','parserFile.py',200),
  ('expression -> expression AND expression','expression',3,'p_binary_operators','parserFile.py',201),
  ('expression -> OBJECT_IDENTIFIER LPAR args RPAR','expression',4,'p_object_call','parserFile.py',206),
  ('expression -> expression DOT OBJECT_IDENTIFIER LPAR args RPAR','expression',6,'p_object_call','parserFile.py',207),
  ('expression -> NEW TYPE_IDENTIFIER','expression',2,'p_new_type','parserFile.py',214),
  ('expression -> OBJECT_IDENTIFIER','expression',1,'p_expression_object','parserFile.py',218),
  ('expression -> SELF','expression',1,'p_expression_self','parserFile.py',222),
  ('expression -> literal','expression',1,'p_expression_literal','parserFile.py',226),
  ('expression -> LPAR RPAR','expression',2,'p_par_alone','parserFile.py',230),
  ('expression -> LPAR expression RPAR','expression',3,'p_par_expression','parserFile.py',234),
  ('expression -> LPAR expression error','expression',3,'p_par_error','parserFile.py',238),
  ('expression -> error expression RPAR','expression',3,'p_par_error','parserFile.py',239),
  ('expression -> block','expression',1,'p_expression_block','parserFile.py',244),
  ('expression -> error','expression',1,'p_expression_error','parserFile.py',248),
  ('expression -> IF expression THEN expression SEMICOLON error','expression',6,'p_expression_error','parserFile.py',249),
  ('args -> expression COMMA args','args',3,'p_args','parserFile.py',257),
  ('args -> expression','args',1,'p_args','parserFile.py',258),
  ('args -> <empty>','args',0,'p_args','parserFile.py',259),
  ('literal -> INTEGER_LITERAL','literal',1,'p_literal','parserFile.py',268),
  ('literal -> string_literal','literal',1,'p_literal','parserFile.py',269),
  ('literal -> boolean-literal','literal',1,'p_literal','parserFile.py',270),
  ('boolean-literal -> TRUE','boolean-literal',1,'p_boolean_literal','parserFile.py',274),
  ('boolean-literal -> FALSE','boolean-literal',1,'p_boolean_literal','parserFile.py',275),
]
